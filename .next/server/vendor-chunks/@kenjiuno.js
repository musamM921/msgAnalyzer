"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@kenjiuno";
exports.ids = ["vendor-chunks/@kenjiuno"];
exports.modules = {

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/AppointmentRecurParser.js":
/*!************************************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/AppointmentRecurParser.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.parse = exports.OverrideFlags = exports.EndType = exports.CalendarType = exports.PatternType = exports.RecurFrequency = void 0;\r\n/**\r\n * RecurFrequency\r\n *\r\n * @see [[MS-OXOCAL]: RecurrencePattern Structure | Microsoft Learn](https://learn.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxocal/cf7153b4-f8b5-4cb6-bf14-e78d21f94814)\r\n */\r\nvar RecurFrequency;\r\n(function (RecurFrequency) {\r\n    RecurFrequency[RecurFrequency[\"Daily\"] = 8202] = \"Daily\";\r\n    RecurFrequency[RecurFrequency[\"Weekly\"] = 8203] = \"Weekly\";\r\n    RecurFrequency[RecurFrequency[\"Monthly\"] = 8204] = \"Monthly\";\r\n    RecurFrequency[RecurFrequency[\"Yearly\"] = 8205] = \"Yearly\";\r\n})(RecurFrequency = exports.RecurFrequency || (exports.RecurFrequency = {}));\r\n/**\r\n * PatternType\r\n *\r\n * @see [[MS-OXOCAL]: RecurrencePattern Structure | Microsoft Learn](https://learn.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxocal/cf7153b4-f8b5-4cb6-bf14-e78d21f94814)\r\n */\r\nvar PatternType;\r\n(function (PatternType) {\r\n    /**\r\n     * The event has a daily recurrence.\r\n     */\r\n    PatternType[PatternType[\"Day\"] = 0] = \"Day\";\r\n    /**\r\n     * The event has a weekly recurrence.\r\n     */\r\n    PatternType[PatternType[\"Week\"] = 1] = \"Week\";\r\n    /**\r\n     * The event has a monthly recurrence.\r\n     */\r\n    PatternType[PatternType[\"Month\"] = 2] = \"Month\";\r\n    /**\r\n     * The event has a month-end recurrence.\r\n     */\r\n    PatternType[PatternType[\"MonthEnd\"] = 4] = \"MonthEnd\";\r\n    /**\r\n     * The event has an every nth month pattern.\r\n     */\r\n    PatternType[PatternType[\"MonthNth\"] = 3] = \"MonthNth\";\r\n    /**\r\n     * The event has a monthly recurrence in the Hijri calendar.\r\n     * For this value in the PatternType field, the value of the CalendarType field SHOULD be set to 0x0000.\r\n     */\r\n    PatternType[PatternType[\"HjMonth\"] = 10] = \"HjMonth\";\r\n    /**\r\n     * The event has an every nth month pattern in the Hijri calendar.\r\n     * For this value in the PatternType field, the value of the CalendarType field MUST be set to 0x0000.\r\n     */\r\n    PatternType[PatternType[\"HjMonthNth\"] = 11] = \"HjMonthNth\";\r\n    /**\r\n     * The event has a month end recurrence in the Hijri calendar.\r\n     * For this value in the PatternType field, the value of the CalendarType field MUST be set to 0x0000.\r\n     */\r\n    PatternType[PatternType[\"HjMonthEnd\"] = 12] = \"HjMonthEnd\";\r\n})(PatternType = exports.PatternType || (exports.PatternType = {}));\r\nvar CalendarType;\r\n(function (CalendarType) {\r\n    /**\r\n     * The default value for the calendar type is Gregorian.\r\n     */\r\n    CalendarType[CalendarType[\"Default\"] = 0] = \"Default\";\r\n    /**\r\n     * Gregorian (localized) calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_GREGORIAN\"] = 1] = \"CAL_GREGORIAN\";\r\n    /**\r\n     * Gregorian (U.S.) calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_GREGORIAN_US\"] = 2] = \"CAL_GREGORIAN_US\";\r\n    /**\r\n     * Japanese Emperor era calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_JAPAN\"] = 3] = \"CAL_JAPAN\";\r\n    /**\r\n     * Taiwan calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_TAIWAN\"] = 4] = \"CAL_TAIWAN\";\r\n    /**\r\n     * Korean Tangun era calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_KOREA\"] = 5] = \"CAL_KOREA\";\r\n    /**\r\n     * Hijri (Arabic Lunar) calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_HIJRI\"] = 6] = \"CAL_HIJRI\";\r\n    /**\r\n     * Thai calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_THAI\"] = 7] = \"CAL_THAI\";\r\n    /**\r\n     * Hebrew lunar calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_HEBREW\"] = 8] = \"CAL_HEBREW\";\r\n    /**\r\n     * Gregorian Middle East French calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_GREGORIAN_ME_FRENCH\"] = 9] = \"CAL_GREGORIAN_ME_FRENCH\";\r\n    /**\r\n     * Gregorian Arabic calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_GREGORIAN_ARABIC\"] = 10] = \"CAL_GREGORIAN_ARABIC\";\r\n    /**\r\n     * Gregorian transliterated English calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_GREGORIAN_XLIT_ENGLISH\"] = 11] = \"CAL_GREGORIAN_XLIT_ENGLISH\";\r\n    /**\r\n     * Gregorian transliterated French calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_GREGORIAN_XLIT_FRENCH\"] = 12] = \"CAL_GREGORIAN_XLIT_FRENCH\";\r\n    /**\r\n     * Japanese lunar calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_LUNAR_JAPANESE\"] = 14] = \"CAL_LUNAR_JAPANESE\";\r\n    /**\r\n     * Chinese lunar calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_CHINESE_LUNAR\"] = 15] = \"CAL_CHINESE_LUNAR\";\r\n    /**\r\n     * Saka era calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_SAKA\"] = 16] = \"CAL_SAKA\";\r\n    /**\r\n     * Lunar ETO Chinese calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_LUNAR_ETO_CHN\"] = 17] = \"CAL_LUNAR_ETO_CHN\";\r\n    /**\r\n     * Lunar ETO Korean calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_LUNAR_ETO_KOR\"] = 18] = \"CAL_LUNAR_ETO_KOR\";\r\n    /**\r\n     * Lunar Rokuyou calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_LUNAR_ROKUYOU\"] = 19] = \"CAL_LUNAR_ROKUYOU\";\r\n    /**\r\n     * Korean lunar calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_LUNAR_KOREAN\"] = 20] = \"CAL_LUNAR_KOREAN\";\r\n    /**\r\n     * Um Al Qura calendar\r\n     */\r\n    CalendarType[CalendarType[\"CAL_UMALQURA\"] = 23] = \"CAL_UMALQURA\";\r\n})(CalendarType = exports.CalendarType || (exports.CalendarType = {}));\r\nvar EndType;\r\n(function (EndType) {\r\n    EndType[EndType[\"EndAfterDate\"] = 8225] = \"EndAfterDate\";\r\n    EndType[EndType[\"EndAfterNOccurrences\"] = 8226] = \"EndAfterNOccurrences\";\r\n    EndType[EndType[\"NeverEnd\"] = 8227] = \"NeverEnd\";\r\n    EndType[EndType[\"NeverEnd2\"] = 4294967295] = \"NeverEnd2\";\r\n})(EndType = exports.EndType || (exports.EndType = {}));\r\n/**\r\n * OverrideFlags\r\n *\r\n * @see [[MS-OXOCAL]: ExceptionInfo Structure | Microsoft Learn](https://learn.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxocal/0980d033-3bf1-43e9-a1e6-af51c564e24a)\r\n */\r\nvar OverrideFlags;\r\n(function (OverrideFlags) {\r\n    /**\r\n     * Indicates that the Subject, SubjectLength, and SubjectLength2 fields are present.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_SUBJECT\"] = 1] = \"ARO_SUBJECT\";\r\n    /**\r\n     * Indicates that the MeetingType field is present.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_MEETINGTYPE\"] = 2] = \"ARO_MEETINGTYPE\";\r\n    /**\r\n     * Indicates that the ReminderDelta field is present.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_REMINDERDELTA\"] = 4] = \"ARO_REMINDERDELTA\";\r\n    /**\r\n     * Indicates that the ReminderSet field is present.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_REMINDER\"] = 8] = \"ARO_REMINDER\";\r\n    /**\r\n     * Indicates that the Location, LocationLength, and LocationLength2 fields are present.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_LOCATION\"] = 16] = \"ARO_LOCATION\";\r\n    /**\r\n     * Indicates that the BusyStatus field is present.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_BUSYSTATUS\"] = 32] = \"ARO_BUSYSTATUS\";\r\n    /**\r\n     * Indicates that the attachment field is present.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_ATTACHMENT\"] = 64] = \"ARO_ATTACHMENT\";\r\n    /**\r\n     * Indicates that the SubType field is present.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_SUBTYPE\"] = 128] = \"ARO_SUBTYPE\";\r\n    /**\r\n     * Indicates that the AppointmentColor field is present.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_APPTCOLOR\"] = 256] = \"ARO_APPTCOLOR\";\r\n    /**\r\n     * Indicates that the Exception Embedded Message object has the PidTagRtfCompressed property\r\n     * ([MS-OXCMSG] section 2.2.1.56.4) set on it.\r\n     */\r\n    OverrideFlags[OverrideFlags[\"ARO_EXCEPTIONAL_BODY\"] = 512] = \"ARO_EXCEPTIONAL_BODY\";\r\n})(OverrideFlags = exports.OverrideFlags || (exports.OverrideFlags = {}));\r\n;\r\nfunction parseRecurrencePattern(ds) {\r\n    var ReaderVersion = ds.readUint16();\r\n    if (ReaderVersion !== 0x3004) {\r\n        throw new Error(\"ReaderVersion not supported\");\r\n    }\r\n    var WriterVersion = ds.readUint16();\r\n    if (WriterVersion !== 0x3004) {\r\n        throw new Error(\"WriterVersion not supported\");\r\n    }\r\n    var recurFrequency = ds.readUint16();\r\n    var patternType = ds.readUint16();\r\n    var calendarType = ds.readUint16();\r\n    var firstDateTime = ds.readUint32();\r\n    var period = ds.readUint32();\r\n    var slidingFlag = ds.readUint32();\r\n    var patternTypeWeek = undefined;\r\n    var patternTypeMonth = undefined;\r\n    var patternTypeMonthNth = undefined;\r\n    if (false) {}\r\n    else if ( false\r\n        || patternType === PatternType.Week) {\r\n        patternTypeWeek = {\r\n            dayOfWeekBits: ds.readUint32(),\r\n        };\r\n    }\r\n    else if ( false\r\n        || patternType === PatternType.Month\r\n        || patternType === PatternType.MonthEnd\r\n        || patternType === PatternType.HjMonth\r\n        || patternType === PatternType.HjMonthEnd) {\r\n        patternTypeMonth = {\r\n            day: ds.readUint32(),\r\n        };\r\n    }\r\n    else if ( false\r\n        || patternType === PatternType.MonthNth\r\n        || patternType === PatternType.HjMonthNth) {\r\n        patternTypeMonthNth = {\r\n            dayOfWeekBits: ds.readUint32(),\r\n            n: ds.readUint32(),\r\n        };\r\n    }\r\n    var endType = ds.readUint32();\r\n    var occurrenceCount = ds.readUint32();\r\n    var firstDOW = ds.readUint32();\r\n    var deletedInstanceCount = ds.readUint32();\r\n    var deletedInstanceDates = Array.from(ds.readUint32Array(deletedInstanceCount));\r\n    var modifiedInstanceCount = ds.readUint32();\r\n    var modifiedInstanceDates = Array.from(ds.readUint32Array(modifiedInstanceCount));\r\n    var startDate = ds.readUint32();\r\n    var endDate = ds.readUint32();\r\n    return Object.assign({\r\n        recurFrequency: recurFrequency,\r\n        patternType: patternType,\r\n        calendarType: calendarType,\r\n        firstDateTime: firstDateTime,\r\n        period: period,\r\n        slidingFlag: slidingFlag,\r\n        endType: endType,\r\n        occurrenceCount: occurrenceCount,\r\n        firstDOW: firstDOW,\r\n        deletedInstanceDates: deletedInstanceDates,\r\n        modifiedInstanceDates: modifiedInstanceDates,\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n    }, patternTypeWeek ? { patternTypeWeek: patternTypeWeek } : {}, patternTypeMonth ? { patternTypeMonth: patternTypeMonth } : {}, patternTypeMonthNth ? { patternTypeMonthNth: patternTypeMonthNth } : {});\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction parse(ds, ansiEncoding) {\r\n    var recurrencePattern = parseRecurrencePattern(ds);\r\n    var readerVersion2 = ds.readUint32();\r\n    if (readerVersion2 !== 0x3006) {\r\n        throw new Error(\"ReaderVersion2 not supported\");\r\n    }\r\n    var writerVersion2 = ds.readUint32();\r\n    if (writerVersion2 < 0x3006) {\r\n        throw new Error(\"WriterVersion2 not supported\");\r\n    }\r\n    var startTimeOffset = ds.readUint32();\r\n    var endTimeOffset = ds.readUint32();\r\n    var exceptionCount = ds.readUint16();\r\n    var exceptionInfo = [];\r\n    for (var x = 0; x < exceptionCount; x++) {\r\n        var startDateTime = ds.readUint32();\r\n        var endDateTime = ds.readUint32();\r\n        var originalStartTime = ds.readUint32();\r\n        var overrideFlags = ds.readUint16();\r\n        var subject = undefined;\r\n        if (overrideFlags & OverrideFlags.ARO_SUBJECT) {\r\n            var subjectLength = ds.readUint16();\r\n            var subjectLength2 = ds.readUint16();\r\n            if (subjectLength - 1 !== subjectLength2) {\r\n                throw new Error(\"subjectLength \".concat(subjectLength, \" and subjectLength2 \").concat(subjectLength2, \" are not close!\"));\r\n            }\r\n            subject = ds.readString(subjectLength2, ansiEncoding);\r\n        }\r\n        var meetingType = undefined;\r\n        if (overrideFlags & OverrideFlags.ARO_MEETINGTYPE) {\r\n            meetingType = ds.readUint32();\r\n        }\r\n        var reminderDelta = undefined;\r\n        if (overrideFlags & OverrideFlags.ARO_REMINDERDELTA) {\r\n            reminderDelta = ds.readUint32();\r\n        }\r\n        var reminderSet = undefined;\r\n        if (overrideFlags & OverrideFlags.ARO_REMINDER) {\r\n            reminderSet = ds.readUint32();\r\n        }\r\n        var location_1 = undefined;\r\n        if (overrideFlags & OverrideFlags.ARO_LOCATION) {\r\n            var locationLength = ds.readUint16();\r\n            var locationLength2 = ds.readUint16();\r\n            if (locationLength - 1 !== locationLength2) {\r\n                throw new Error(\"locationLength \".concat(locationLength, \" and locationLength2 \").concat(locationLength2, \" are not close!\"));\r\n            }\r\n            location_1 = ds.readString(locationLength2, ansiEncoding);\r\n        }\r\n        var busyStatus = undefined;\r\n        if (overrideFlags & OverrideFlags.ARO_BUSYSTATUS) {\r\n            busyStatus = ds.readUint32();\r\n        }\r\n        var attachment = undefined;\r\n        if (overrideFlags & OverrideFlags.ARO_ATTACHMENT) {\r\n            attachment = ds.readUint32();\r\n        }\r\n        var subType = undefined;\r\n        if (overrideFlags & OverrideFlags.ARO_SUBTYPE) {\r\n            subType = ds.readUint32();\r\n        }\r\n        var appointmentColor = undefined;\r\n        if (overrideFlags & OverrideFlags.ARO_APPTCOLOR) {\r\n            appointmentColor = ds.readUint32();\r\n        }\r\n        exceptionInfo.push(Object.assign({\r\n            startDateTime: startDateTime,\r\n            endDateTime: endDateTime,\r\n            originalStartTime: originalStartTime,\r\n            overrideFlags: overrideFlags,\r\n        }, subject ? { subject: subject } : {}, meetingType ? { meetingType: meetingType } : {}, reminderDelta ? { reminderDelta: reminderDelta } : {}, reminderSet ? { reminderSet: reminderSet } : {}, location_1 ? { location: location_1 } : {}, busyStatus ? { busyStatus: busyStatus } : {}, attachment ? { attachment: attachment } : {}, subType ? { subType: subType } : {}, appointmentColor ? { appointmentColor: appointmentColor } : {}));\r\n    }\r\n    var reservedBlock1Size = ds.readUint32();\r\n    if (reservedBlock1Size !== 0) {\r\n        throw new Error(\"reservedBlock1Size \".concat(reservedBlock1Size, \" is not zero, AppointmentRecur is broken\"));\r\n    }\r\n    for (var x = 0; x < exceptionCount; x++) {\r\n        var one = exceptionInfo[x];\r\n        if (0x00003009 <= writerVersion2) {\r\n            var changeHighlightSize = ds.readUint32();\r\n            one.changeHighlight = ds.readUint32();\r\n            ds.position += changeHighlightSize - 4;\r\n        }\r\n        var reservedBlockEE1Size = ds.readUint32();\r\n        if (reservedBlockEE1Size !== 0) {\r\n            throw new Error(\"reservedBlockEE1Size \".concat(reservedBlockEE1Size, \" is not zero, AppointmentRecur is broken\"));\r\n        }\r\n        if (one.overrideFlags & (OverrideFlags.ARO_SUBJECT | OverrideFlags.ARO_LOCATION)) {\r\n            var startDateTime = ds.readUint32();\r\n            var endDateTime = ds.readUint32();\r\n            var originalStartDate = ds.readUint32();\r\n            if (one.overrideFlags & (OverrideFlags.ARO_SUBJECT)) {\r\n                var wideCharSubjectLength = ds.readUint16();\r\n                one.subject = ds.readUCS2String(wideCharSubjectLength);\r\n            }\r\n            if (one.overrideFlags & (OverrideFlags.ARO_LOCATION)) {\r\n                var wideCharLocationLength = ds.readUint16();\r\n                one.location = ds.readUCS2String(wideCharLocationLength);\r\n            }\r\n            var reservedBlockEE2Size = ds.readUint32();\r\n            if (reservedBlockEE2Size !== 0) {\r\n                throw new Error(\"reservedBlockEE2Size \".concat(reservedBlockEE2Size, \" is not zero, AppointmentRecur is broken\"));\r\n            }\r\n        }\r\n    }\r\n    var reservedBlock2Size = ds.readUint32();\r\n    if (reservedBlock2Size !== 0) {\r\n        throw new Error(\"reservedBlock2Size \".concat(reservedBlock2Size, \" is not zero, AppointmentRecur is broken\"));\r\n    }\r\n    return {\r\n        recurrencePattern: recurrencePattern,\r\n        startTimeOffset: startTimeOffset,\r\n        endTimeOffset: endTimeOffset,\r\n        exceptionInfo: exceptionInfo,\r\n    };\r\n}\r\nexports.parse = parse;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/AppointmentRecurParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/Burner.js":
/*!********************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/Burner.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.burn = void 0;\r\nvar Reader_1 = __webpack_require__(/*! ./Reader */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/Reader.js\");\r\nvar DataStream_1 = __importDefault(__webpack_require__(/*! ./DataStream */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/DataStream.js\"));\r\nvar const_1 = __importDefault(__webpack_require__(/*! ./const */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/const.js\"));\r\nfunction RoundUpto4096(num) {\r\n    return (num + 4095) & (~4095);\r\n}\r\nfunction RoundUpto512(bytes) {\r\n    return (bytes + 511) & (~511);\r\n}\r\nfunction RoundUpto64(bytes) {\r\n    return (bytes + 63) & (~63);\r\n}\r\nfunction repeatValue(value, count) {\r\n    var array = [];\r\n    for (var x = 0; x < count; x++) {\r\n        array.push(value);\r\n    }\r\n    return array;\r\n}\r\nvar LiteFat = /** @class */ (function () {\r\n    function LiteFat(source) {\r\n        this.sectors = source;\r\n    }\r\n    LiteFat.prototype.allocate = function (count) {\r\n        var first = this.sectors.length;\r\n        for (var x = 0; x < count; x++) {\r\n            var next = (x + 1 === count) ? -2 : first + x + 1;\r\n            this.sectors.push(next);\r\n        }\r\n        return first;\r\n    };\r\n    LiteFat.prototype.allocateAs = function (count, value) {\r\n        var first = this.sectors.length;\r\n        for (var x = 0; x < count; x++) {\r\n            this.sectors.push(value);\r\n        }\r\n        return first;\r\n    };\r\n    LiteFat.prototype.finalize = function (boundary, value) {\r\n        var num = (boundary - (this.sectors.length % boundary)) % boundary;\r\n        for (; num >= 1; num -= 1) {\r\n            this.sectors.push(value);\r\n        }\r\n        return this;\r\n    };\r\n    LiteFat.prototype.count = function () {\r\n        return this.sectors.length;\r\n    };\r\n    return LiteFat;\r\n}());\r\nvar LiteBurner = /** @class */ (function () {\r\n    function LiteBurner(entries) {\r\n        this.fat = new LiteFat([]);\r\n        this.miniFat = new LiteFat([]);\r\n        this.liteEnts = entries\r\n            .map(function (it) { return ({\r\n            entry: it,\r\n            left: -1,\r\n            right: -1,\r\n            child: -1,\r\n            firstSector: 0,\r\n            isMini: it.length < 4096,\r\n        }); });\r\n        this.buildTree(0);\r\n        var entriesFirstSector = this.fat.allocate(RoundUpto512(128 * this.liteEnts.length) / 512);\r\n        for (var _i = 0, _a = this.liteEnts\r\n            .filter(function (it) { return  true\r\n            && it.entry.type == Reader_1.TypeEnum.DOCUMENT\r\n            && it.isMini === false; }); _i < _a.length; _i++) {\r\n            var liteEnt = _a[_i];\r\n            liteEnt.firstSector = (liteEnt.entry.length === 0)\r\n                ? -2\r\n                : this.fat.allocate(RoundUpto512(liteEnt.entry.length) / 512);\r\n        }\r\n        for (var _b = 0, _c = this.liteEnts\r\n            .filter(function (it) { return  true\r\n            && it.entry.type == Reader_1.TypeEnum.DOCUMENT\r\n            && it.isMini === true; }); _b < _c.length; _b++) {\r\n            var liteEnt = _c[_b];\r\n            liteEnt.firstSector = (liteEnt.entry.length === 0)\r\n                ? -2\r\n                : this.miniFat.allocate(RoundUpto64(liteEnt.entry.length) / 64);\r\n        }\r\n        var numMiniFatSectors = RoundUpto512(4 * this.miniFat.count()) / 512;\r\n        var firstMiniFatSector = (numMiniFatSectors !== 0)\r\n            ? this.fat.allocate(numMiniFatSectors)\r\n            : -2;\r\n        var bytesMiniFat = 64 * this.miniFat.count();\r\n        var firstMiniDataSector = this.fat.allocate(RoundUpto512(bytesMiniFat) / 512);\r\n        this.liteEnts[0].firstSector = firstMiniDataSector;\r\n        var firstFatSector = this.fat.allocateAs(RoundUpto512(4 * (this.fat.count() + this.fat.count() / 128 + this.fat.count() / (128 * 109))) / 512, -3);\r\n        var numFatSectors = this.fat.count() - firstFatSector;\r\n        var numDifatSectors = (numFatSectors > 109)\r\n            ? RoundUpto512(4 * Math.floor((numFatSectors - 109) / 127 * 128)) / 512\r\n            : 0;\r\n        var firstDifatSector = (numDifatSectors !== 0)\r\n            ? this.fat.allocateAs(numDifatSectors, -4)\r\n            : -2;\r\n        var array = new ArrayBuffer(512 * (1 + this.fat.count()));\r\n        var ds = new DataStream_1.default(array, 0, DataStream_1.default.LITTLE_ENDIAN);\r\n        ds.dynamicSize = false;\r\n        this.miniFat.finalize(512 / 4, -1);\r\n        var difat1 = [];\r\n        var difat2 = [];\r\n        {\r\n            var x = 0;\r\n            for (; x < 109 && x < numFatSectors; x++) {\r\n                difat1.push(firstFatSector + x);\r\n            }\r\n            var nextDifatSector = firstDifatSector + 1;\r\n            for (; x < numFatSectors; x++) {\r\n                difat2.push(firstFatSector + x);\r\n                var remain = (difat2.length & 127);\r\n                if (remain === 127) {\r\n                    difat2.push(nextDifatSector);\r\n                    nextDifatSector++;\r\n                }\r\n            }\r\n            while (true) {\r\n                var remain = (difat2.length & 127);\r\n                if (remain === 0) {\r\n                    break;\r\n                }\r\n                difat2.push((remain === 127) ? -2 : -1);\r\n            }\r\n        }\r\n        // header\r\n        {\r\n            ds.seek(0);\r\n            ds.writeUint8Array(const_1.default.FILE_HEADER);\r\n            ds.seek(0x18);\r\n            ds.writeUint16(0x3E); //ushort MinorVersion\r\n            ds.writeUint16(0x03); //ushort MajorVersion\r\n            ds.writeUint16(0xFFFE); //ushort ByteOrder\r\n            ds.writeUint16(9); //ushort SectorShift\r\n            ds.writeUint16(6); //ushort MiniSectorShift\r\n            ds.seek(0x2C);\r\n            ds.writeInt32(numFatSectors); //int32 NumberOfFATSectors\r\n            ds.writeInt32(entriesFirstSector); //int32 FirstDirectorySectorLocation\r\n            ds.seek(0x38);\r\n            ds.writeInt32(4096); //int32 MiniStreamCutoffSize\r\n            ds.writeInt32(firstMiniFatSector); //int32 FirstMiniFATSectorLocation\r\n            ds.writeInt32(numMiniFatSectors); //int32 NumberOfMiniFATSectors\r\n            ds.writeInt32(firstDifatSector); //int32 FirstDIFATSectorLocation\r\n            ds.writeInt32(numDifatSectors); //int32 NumberOfDIFATSectors\r\n            var x = 0;\r\n            for (; x < difat1.length; x++) {\r\n                ds.writeInt32(difat1[x]); //int32 DIFAT[x]\r\n            }\r\n            for (; x < 109; x++) {\r\n                ds.writeInt32(-1); //int32 DIFAT[x]\r\n            }\r\n        }\r\n        // entries\r\n        for (var x = 0; x < this.liteEnts.length; x++) {\r\n            var liteEnt = this.liteEnts[x];\r\n            var pos = 512 * (1 + entriesFirstSector) + 128 * x;\r\n            ds.seek(pos);\r\n            ds.writeUCS2String(liteEnt.entry.name, null, null);\r\n            var numBytesName = ds.position - pos;\r\n            ds.seek(pos + 0x40);\r\n            ds.writeUint16(Math.min(64, numBytesName + 2));\r\n            ds.writeUint8(liteEnt.entry.type);\r\n            ds.writeUint8((x === 0) ? 0 : 1);\r\n            ds.writeInt32(liteEnt.left);\r\n            ds.writeInt32(liteEnt.right);\r\n            ds.writeInt32(liteEnt.child);\r\n            if (x === 0) {\r\n                ds.seek(pos + 0x50);\r\n                ds.writeUint8Array([0x0B, 0x0D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46]);\r\n            }\r\n            var length_1 = (x === 0)\r\n                ? bytesMiniFat\r\n                : liteEnt.entry.length;\r\n            var firstSector = (length_1 !== 0)\r\n                ? liteEnt.firstSector\r\n                : (liteEnt.entry.type === Reader_1.TypeEnum.DIRECTORY ? 0 : -2);\r\n            ds.seek(pos + 0x74);\r\n            ds.writeInt32(firstSector);\r\n            ds.writeInt32(length_1);\r\n        }\r\n        for (var _d = 0, _e = this.liteEnts\r\n            .filter(function (it) { return  true\r\n            && it.entry.type == Reader_1.TypeEnum.DOCUMENT\r\n            && it.isMini === false; }); _d < _e.length; _d++) {\r\n            var liteEnt = _e[_d];\r\n            var bytes = liteEnt.entry.binaryProvider();\r\n            ds.seek(512 * (1 + liteEnt.firstSector));\r\n            ds.writeUint8Array(bytes);\r\n        }\r\n        for (var _f = 0, _g = this.liteEnts\r\n            .filter(function (it) { return  true\r\n            && it.entry.type == Reader_1.TypeEnum.DOCUMENT\r\n            && it.isMini === true; }); _f < _g.length; _f++) {\r\n            var liteEnt = _g[_f];\r\n            var bytes = liteEnt.entry.binaryProvider();\r\n            ds.seek(512 * (1 + firstMiniDataSector) + 64 * liteEnt.firstSector);\r\n            ds.writeUint8Array(bytes);\r\n        }\r\n        // minifat\r\n        ds.seek(512 * (1 + firstMiniFatSector));\r\n        ds.writeInt32Array(this.miniFat.sectors);\r\n        // fat\r\n        this.fat.finalize(512 / 4, -1);\r\n        ds.seek(512 * (1 + firstFatSector));\r\n        ds.writeInt32Array(this.fat.sectors);\r\n        // difat\r\n        if (numDifatSectors >= 1) {\r\n            ds.seek(512 * (1 + firstDifatSector));\r\n            ds.writeInt32Array(difat2);\r\n        }\r\n        this.array = array;\r\n    }\r\n    /**\r\n     * CFBF dedicated name comparer\r\n     *\r\n     * - At first compare UTF-16 length.\r\n     * - Then compare upper cased UTF-16 string.\r\n     */\r\n    LiteBurner.prototype.compareName = function (a, b) {\r\n        var t = a.length - b.length;\r\n        if (t === 0) {\r\n            var x = a.toUpperCase();\r\n            var y = b.toUpperCase();\r\n            if (x > y) {\r\n                t = 1;\r\n            }\r\n            else if (x < y) {\r\n                t = -1;\r\n            }\r\n        }\r\n        return t;\r\n    };\r\n    LiteBurner.prototype.buildTree = function (dirIndex) {\r\n        var _this = this;\r\n        var liteEnts = this.liteEnts;\r\n        var liteEntry = liteEnts[dirIndex];\r\n        if (liteEntry.entry.type === Reader_1.TypeEnum.DOCUMENT) {\r\n            throw new Error(\"It must be a storage!\");\r\n        }\r\n        var children = liteEntry.entry.children.concat();\r\n        if (children.length >= 1) {\r\n            children.sort(function (a, b) {\r\n                return _this.compareName(liteEnts[a].entry.name, liteEnts[b].entry.name);\r\n            });\r\n            liteEntry.child = children[0];\r\n            for (var x = 0; x < children.length - 1; x++) {\r\n                liteEnts[children[x]].right = children[x + 1];\r\n            }\r\n            for (var _i = 0, _a = children\r\n                .filter(function (it) { return liteEnts[it].entry.type === Reader_1.TypeEnum.DIRECTORY; }); _i < _a.length; _i++) {\r\n                var subIndex = _a[_i];\r\n                this.buildTree(subIndex);\r\n            }\r\n        }\r\n    };\r\n    return LiteBurner;\r\n}());\r\n/**\r\n * Burn CFBF file on the fly.\r\n *\r\n * CFBF = Compound File Binary Format\r\n *\r\n * @param entries The flattened (not tree) entries starting with `Root Entry`.\r\n * @returns The binary.\r\n */\r\nfunction burn(entries) {\r\n    return new Uint8Array(new LiteBurner(entries).array);\r\n}\r\nexports.burn = burn;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/Burner.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/DataStream.js":
/*!************************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/DataStream.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar iconv = __webpack_require__(/*! iconv-lite */ \"(rsc)/./node_modules/iconv-lite/lib/index.js\");\r\n/**\r\n * This DataStream is for internal use.\r\n */\r\nvar DataStream = /** @class */ (function () {\r\n    /**\r\n      DataStream reads scalars, arrays and structs of data from an ArrayBuffer.\r\n      It's like a file-like DataView on steroids.\r\n    \r\n      @param arrayBuffer ArrayBuffer to read from.\r\n      @param byteOffset Offset from arrayBuffer beginning for the DataStream.\r\n      @param endianness {@link DataStream.BIG_ENDIAN} or {@link DataStream.LITTLE_ENDIAN} (the default).\r\n      */\r\n    function DataStream(arrayBuffer, byteOffset, endianness) {\r\n        /**\r\n          @internal\r\n          */\r\n        this._dynamicSize = true;\r\n        /**\r\n          Virtual byte length of the DataStream backing buffer.\r\n          Updated to be max of original buffer size and last written size.\r\n          If dynamicSize is false is set to buffer size.\r\n      \r\n          @internal\r\n          */\r\n        this._byteLength = 0;\r\n        /**\r\n          Seek position where {@link readStruct} ran into a problem.\r\n          Useful for debugging struct parsing.\r\n        \r\n         */\r\n        this.failurePosition = 0;\r\n        this._byteOffset = byteOffset || 0;\r\n        if (arrayBuffer instanceof ArrayBuffer) {\r\n            this.buffer = arrayBuffer;\r\n        }\r\n        else if (arrayBuffer instanceof DataView) {\r\n            this.dataView = arrayBuffer;\r\n        }\r\n        else if (arrayBuffer && arrayBuffer.buffer instanceof ArrayBuffer) {\r\n            this._byteOffset += arrayBuffer.byteOffset;\r\n            this._buffer = arrayBuffer.buffer;\r\n            this._dataView = new DataView(this._buffer, this._byteOffset);\r\n            this._byteLength = this._dataView.byteLength + this._byteOffset;\r\n        }\r\n        else {\r\n            throw new Error(\"Unknown arrayBuffer\");\r\n        }\r\n        this.position = 0;\r\n        this.endianness = endianness == null ? DataStream.LITTLE_ENDIAN : endianness;\r\n    }\r\n    ;\r\n    /**\r\n      Saves the DataStream contents to the given filename.\r\n      Uses Chrome's anchor download property to initiate download.\r\n    \r\n      @param filename Filename to save as.\r\n      */\r\n    DataStream.prototype.save = function (filename) {\r\n        var blob = new Blob([this.buffer]);\r\n        var URL = (window[\"webkitURL\"] || window.URL);\r\n        if (URL && URL.createObjectURL) {\r\n            var url = URL.createObjectURL(blob);\r\n            var a = document.createElement('a');\r\n            a.setAttribute('href', url);\r\n            a.setAttribute('download', filename);\r\n            a.click();\r\n            URL.revokeObjectURL(url);\r\n        }\r\n        else {\r\n            throw (\"DataStream.save: Can't create object URL.\");\r\n        }\r\n    };\r\n    ;\r\n    Object.defineProperty(DataStream.prototype, \"dynamicSize\", {\r\n        /**\r\n         * Whether to extend DataStream buffer when trying to write beyond its size.\r\n         * If set, the buffer is reallocated to twice its current size until the\r\n         * requested write fits the buffer.\r\n         */\r\n        get: function () {\r\n            return this._dynamicSize;\r\n        },\r\n        set: function (v) {\r\n            if (!v) {\r\n                this._trimAlloc();\r\n            }\r\n            this._dynamicSize = v;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataStream.prototype, \"byteLength\", {\r\n        /**\r\n          Returns the byte length of the DataStream object.\r\n          */\r\n        get: function () {\r\n            return this._byteLength - this._byteOffset;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataStream.prototype, \"buffer\", {\r\n        /**\r\n          Set/get the backing ArrayBuffer of the DataStream object.\r\n          The setter updates the DataView to point to the new buffer.\r\n          */\r\n        get: function () {\r\n            this._trimAlloc();\r\n            return this._buffer;\r\n        },\r\n        set: function (v) {\r\n            this._buffer = v;\r\n            this._dataView = new DataView(this._buffer, this._byteOffset);\r\n            this._byteLength = this._buffer.byteLength;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataStream.prototype, \"byteOffset\", {\r\n        /**\r\n          Set/get the byteOffset of the DataStream object.\r\n          The setter updates the DataView to point to the new byteOffset.\r\n          */\r\n        get: function () {\r\n            return this._byteOffset;\r\n        },\r\n        set: function (v) {\r\n            this._byteOffset = v;\r\n            this._dataView = new DataView(this._buffer, this._byteOffset);\r\n            this._byteLength = this._buffer.byteLength;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(DataStream.prototype, \"dataView\", {\r\n        /**\r\n          Set/get the backing DataView of the DataStream object.\r\n          The setter updates the buffer and byteOffset to point to the DataView values.\r\n          */\r\n        get: function () {\r\n            return this._dataView;\r\n        },\r\n        set: function (v) {\r\n            this._byteOffset = v.byteOffset;\r\n            this._buffer = v.buffer;\r\n            this._dataView = new DataView(this._buffer, this._byteOffset);\r\n            this._byteLength = this._byteOffset + v.byteLength;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    /**\r\n      Internal function to resize the DataStream buffer when required.\r\n      @param extra Number of bytes to add to the buffer allocation.\r\n      */\r\n    DataStream.prototype._realloc = function (extra) {\r\n        if (!this._dynamicSize) {\r\n            return;\r\n        }\r\n        var req = this._byteOffset + this.position + extra;\r\n        var blen = this._buffer.byteLength;\r\n        if (req <= blen) {\r\n            if (req > this._byteLength) {\r\n                this._byteLength = req;\r\n            }\r\n            return;\r\n        }\r\n        if (blen < 1) {\r\n            blen = 1;\r\n        }\r\n        while (req > blen) {\r\n            blen *= 2;\r\n        }\r\n        var buf = new ArrayBuffer(blen);\r\n        var src = new Uint8Array(this._buffer);\r\n        var dst = new Uint8Array(buf, 0, src.length);\r\n        dst.set(src);\r\n        this.buffer = buf;\r\n        this._byteLength = req;\r\n    };\r\n    ;\r\n    /**\r\n      Internal function to trim the DataStream buffer when required.\r\n      Used for stripping out the extra bytes from the backing buffer when\r\n      the virtual byteLength is smaller than the buffer byteLength (happens after\r\n      growing the buffer with writes and not filling the extra space completely).\r\n    \r\n      */\r\n    DataStream.prototype._trimAlloc = function () {\r\n        if (this._byteLength == this._buffer.byteLength) {\r\n            return;\r\n        }\r\n        var buf = new ArrayBuffer(this._byteLength);\r\n        var dst = new Uint8Array(buf);\r\n        var src = new Uint8Array(this._buffer, 0, dst.length);\r\n        dst.set(src);\r\n        this.buffer = buf;\r\n    };\r\n    ;\r\n    /**\r\n      Sets the DataStream read/write position to given position.\r\n      Clamps between 0 and DataStream length.\r\n    \r\n      @param pos Position to seek to.\r\n      */\r\n    DataStream.prototype.seek = function (pos) {\r\n        var npos = Math.max(0, Math.min(this.byteLength, pos));\r\n        this.position = (isNaN(npos) || !isFinite(npos)) ? 0 : npos;\r\n    };\r\n    ;\r\n    /**\r\n      Returns true if the DataStream seek pointer is at the end of buffer and\r\n      there's no more data to read.\r\n    \r\n      @return True if the seek pointer is at the end of the buffer.\r\n      */\r\n    DataStream.prototype.isEof = function () {\r\n        return (this.position >= this.byteLength);\r\n    };\r\n    ;\r\n    /**\r\n      Maps an Int32Array into the DataStream buffer, swizzling it to native\r\n      endianness in-place. The current offset from the start of the buffer needs to\r\n      be a multiple of element size, just like with typed array views.\r\n    \r\n      Nice for quickly reading in data. Warning: potentially modifies the buffer\r\n      contents.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return Int32Array to the DataStream backing buffer.\r\n      */\r\n    DataStream.prototype.mapInt32Array = function (length, e) {\r\n        this._realloc(length * 4);\r\n        var arr = new Int32Array(this._buffer, this.byteOffset + this.position, length);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += length * 4;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Maps an Int16Array into the DataStream buffer, swizzling it to native\r\n      endianness in-place. The current offset from the start of the buffer needs to\r\n      be a multiple of element size, just like with typed array views.\r\n    \r\n      Nice for quickly reading in data. Warning: potentially modifies the buffer\r\n      contents.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return Int16Array to the DataStream backing buffer.\r\n      */\r\n    DataStream.prototype.mapInt16Array = function (length, e) {\r\n        this._realloc(length * 2);\r\n        var arr = new Int16Array(this._buffer, this.byteOffset + this.position, length);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += length * 2;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Maps an Int8Array into the DataStream buffer.\r\n    \r\n      Nice for quickly reading in data.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return Int8Array to the DataStream backing buffer.\r\n      */\r\n    DataStream.prototype.mapInt8Array = function (length) {\r\n        this._realloc(length * 1);\r\n        var arr = new Int8Array(this._buffer, this.byteOffset + this.position, length);\r\n        this.position += length * 1;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Maps a Uint32Array into the DataStream buffer, swizzling it to native\r\n      endianness in-place. The current offset from the start of the buffer needs to\r\n      be a multiple of element size, just like with typed array views.\r\n    \r\n      Nice for quickly reading in data. Warning: potentially modifies the buffer\r\n      contents.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return Uint32Array to the DataStream backing buffer.\r\n      */\r\n    DataStream.prototype.mapUint32Array = function (length, e) {\r\n        this._realloc(length * 4);\r\n        var arr = new Uint32Array(this._buffer, this.byteOffset + this.position, length);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += length * 4;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Maps a Uint16Array into the DataStream buffer, swizzling it to native\r\n      endianness in-place. The current offset from the start of the buffer needs to\r\n      be a multiple of element size, just like with typed array views.\r\n    \r\n      Nice for quickly reading in data. Warning: potentially modifies the buffer\r\n      contents.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return Uint16Array to the DataStream backing buffer.\r\n      */\r\n    DataStream.prototype.mapUint16Array = function (length, e) {\r\n        this._realloc(length * 2);\r\n        var arr = new Uint16Array(this._buffer, this.byteOffset + this.position, length);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += length * 2;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Maps a Uint8Array into the DataStream buffer.\r\n    \r\n      Nice for quickly reading in data.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return Uint8Array to the DataStream backing buffer.\r\n      */\r\n    DataStream.prototype.mapUint8Array = function (length) {\r\n        this._realloc(length * 1);\r\n        var arr = new Uint8Array(this._buffer, this.byteOffset + this.position, length);\r\n        this.position += length * 1;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Maps a Float64Array into the DataStream buffer, swizzling it to native\r\n      endianness in-place. The current offset from the start of the buffer needs to\r\n      be a multiple of element size, just like with typed array views.\r\n    \r\n      Nice for quickly reading in data. Warning: potentially modifies the buffer\r\n      contents.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return Float64Array to the DataStream backing buffer.\r\n      */\r\n    DataStream.prototype.mapFloat64Array = function (length, e) {\r\n        this._realloc(length * 8);\r\n        var arr = new Float64Array(this._buffer, this.byteOffset + this.position, length);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += length * 8;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Maps a Float32Array into the DataStream buffer, swizzling it to native\r\n      endianness in-place. The current offset from the start of the buffer needs to\r\n      be a multiple of element size, just like with typed array views.\r\n    \r\n      Nice for quickly reading in data. Warning: potentially modifies the buffer\r\n      contents.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return Float32Array to the DataStream backing buffer.\r\n      */\r\n    DataStream.prototype.mapFloat32Array = function (length, e) {\r\n        this._realloc(length * 4);\r\n        var arr = new Float32Array(this._buffer, this.byteOffset + this.position, length);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += length * 4;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Reads an Int32Array of desired length and endianness from the DataStream.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return The read Int32Array.\r\n     */\r\n    DataStream.prototype.readInt32Array = function (length, e) {\r\n        length = length == null ? (this.byteLength - this.position) / 4 : length;\r\n        var arr = new Int32Array(length);\r\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += arr.byteLength;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Reads an Int16Array of desired length and endianness from the DataStream.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return The read Int16Array.\r\n     */\r\n    DataStream.prototype.readInt16Array = function (length, e) {\r\n        length = length == null ? (this.byteLength - this.position) / 2 : length;\r\n        var arr = new Int16Array(length);\r\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += arr.byteLength;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Reads an Int8Array of desired length from the DataStream.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return The read Int8Array.\r\n     */\r\n    DataStream.prototype.readInt8Array = function (length) {\r\n        length = length == null ? (this.byteLength - this.position) : length;\r\n        var arr = new Int8Array(length);\r\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\r\n        this.position += arr.byteLength;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Reads a Uint32Array of desired length and endianness from the DataStream.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return The read Uint32Array.\r\n     */\r\n    DataStream.prototype.readUint32Array = function (length, e) {\r\n        length = length == null ? (this.byteLength - this.position) / 4 : length;\r\n        var arr = new Uint32Array(length);\r\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += arr.byteLength;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Reads a Uint16Array of desired length and endianness from the DataStream.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return The read Uint16Array.\r\n     */\r\n    DataStream.prototype.readUint16Array = function (length, e) {\r\n        length = length == null ? (this.byteLength - this.position) / 2 : length;\r\n        var arr = new Uint16Array(length);\r\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += arr.byteLength;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Reads a Uint8Array of desired length from the DataStream.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return The read Uint8Array.\r\n     */\r\n    DataStream.prototype.readUint8Array = function (length) {\r\n        length = length == null ? (this.byteLength - this.position) : length;\r\n        var arr = new Uint8Array(length);\r\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\r\n        this.position += arr.byteLength;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n     * @internal\r\n     */\r\n    DataStream.prototype.readToUint8Array = function (length, arr, dstOffset) {\r\n        length = length == null ? (this.byteLength - this.position) : length;\r\n        DataStream.memcpy(arr.buffer, dstOffset, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\r\n        this.position += arr.byteLength;\r\n    };\r\n    ;\r\n    /**\r\n      Reads a Float64Array of desired length and endianness from the DataStream.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return The read Float64Array.\r\n     */\r\n    DataStream.prototype.readFloat64Array = function (length, e) {\r\n        length = length == null ? (this.byteLength - this.position) / 8 : length;\r\n        var arr = new Float64Array(length);\r\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += arr.byteLength;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Reads a Float32Array of desired length and endianness from the DataStream.\r\n    \r\n      @param length Number of elements to map.\r\n      @param e Endianness of the data to read.\r\n      @return The read Float32Array.\r\n     */\r\n    DataStream.prototype.readFloat32Array = function (length, e) {\r\n        length = length == null ? (this.byteLength - this.position) / 4 : length;\r\n        var arr = new Float32Array(length);\r\n        DataStream.memcpy(arr.buffer, 0, this.buffer, this.byteOffset + this.position, length * arr.BYTES_PER_ELEMENT);\r\n        DataStream.arrayToNative(arr, e == null ? this.endianness : e);\r\n        this.position += arr.byteLength;\r\n        return arr;\r\n    };\r\n    ;\r\n    /**\r\n      Writes an Int32Array of specified endianness to the DataStream.\r\n    \r\n      @param arr The array to write.\r\n      @param e Endianness of the data to write.\r\n     */\r\n    DataStream.prototype.writeInt32Array = function (arr, e) {\r\n        this._realloc(arr.length * 4);\r\n        if (arr instanceof Int32Array &&\r\n            this.byteOffset + this.position % arr.BYTES_PER_ELEMENT == 0) {\r\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\r\n            this.mapInt32Array(arr.length, e);\r\n        }\r\n        else {\r\n            for (var i = 0; i < arr.length; i++) {\r\n                this.writeInt32(arr[i], e);\r\n            }\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Writes an Int16Array of specified endianness to the DataStream.\r\n    \r\n      @param arr The array to write.\r\n      @param e Endianness of the data to write.\r\n     */\r\n    DataStream.prototype.writeInt16Array = function (arr, e) {\r\n        this._realloc(arr.length * 2);\r\n        if (arr instanceof Int16Array &&\r\n            this.byteOffset + this.position % arr.BYTES_PER_ELEMENT == 0) {\r\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\r\n            this.mapInt16Array(arr.length, e);\r\n        }\r\n        else {\r\n            for (var i = 0; i < arr.length; i++) {\r\n                this.writeInt16(arr[i], e);\r\n            }\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Writes an Int8Array to the DataStream.\r\n    \r\n      @param arr The array to write.\r\n     */\r\n    DataStream.prototype.writeInt8Array = function (arr) {\r\n        this._realloc(arr.length * 1);\r\n        if (arr instanceof Int8Array &&\r\n            this.byteOffset + this.position % arr.BYTES_PER_ELEMENT == 0) {\r\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\r\n            this.mapInt8Array(arr.length);\r\n        }\r\n        else {\r\n            for (var i = 0; i < arr.length; i++) {\r\n                this.writeInt8(arr[i]);\r\n            }\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Writes a Uint32Array of specified endianness to the DataStream.\r\n    \r\n      @param arr The array to write.\r\n      @param e Endianness of the data to write.\r\n     */\r\n    DataStream.prototype.writeUint32Array = function (arr, e) {\r\n        this._realloc(arr.length * 4);\r\n        if (arr instanceof Uint32Array &&\r\n            this.byteOffset + this.position % arr.BYTES_PER_ELEMENT == 0) {\r\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\r\n            this.mapUint32Array(arr.length, e);\r\n        }\r\n        else {\r\n            for (var i = 0; i < arr.length; i++) {\r\n                this.writeUint32(arr[i], e);\r\n            }\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Writes a Uint16Array of specified endianness to the DataStream.\r\n    \r\n      @param arr The array to write.\r\n      @param e Endianness of the data to write.\r\n     */\r\n    DataStream.prototype.writeUint16Array = function (arr, e) {\r\n        this._realloc(arr.length * 2);\r\n        if (arr instanceof Uint16Array &&\r\n            this.byteOffset + this.position % arr.BYTES_PER_ELEMENT == 0) {\r\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\r\n            this.mapUint16Array(arr.length, e);\r\n        }\r\n        else {\r\n            for (var i = 0; i < arr.length; i++) {\r\n                this.writeUint16(arr[i], e);\r\n            }\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Writes a Uint8Array to the DataStream.\r\n    \r\n      @param arr The array to write.\r\n     */\r\n    DataStream.prototype.writeUint8Array = function (arr) {\r\n        this._realloc(arr.length * 1);\r\n        if (arr instanceof Uint8Array &&\r\n            this.byteOffset + this.position % arr.BYTES_PER_ELEMENT == 0) {\r\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\r\n            this.mapUint8Array(arr.length);\r\n        }\r\n        else {\r\n            for (var i = 0; i < arr.length; i++) {\r\n                this.writeUint8(arr[i]);\r\n            }\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Writes a Float64Array of specified endianness to the DataStream.\r\n    \r\n      @param arr The array to write.\r\n      @param e Endianness of the data to write.\r\n     */\r\n    DataStream.prototype.writeFloat64Array = function (arr, e) {\r\n        this._realloc(arr.length * 8);\r\n        if (arr instanceof Float64Array &&\r\n            this.byteOffset + this.position % arr.BYTES_PER_ELEMENT == 0) {\r\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\r\n            this.mapFloat64Array(arr.length, e);\r\n        }\r\n        else {\r\n            for (var i = 0; i < arr.length; i++) {\r\n                this.writeFloat64(arr[i], e);\r\n            }\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Writes a Float32Array of specified endianness to the DataStream.\r\n    \r\n      @param arr The array to write.\r\n      @param e Endianness of the data to write.\r\n     */\r\n    DataStream.prototype.writeFloat32Array = function (arr, e) {\r\n        this._realloc(arr.length * 4);\r\n        if (arr instanceof Float32Array &&\r\n            this.byteOffset + this.position % arr.BYTES_PER_ELEMENT == 0) {\r\n            DataStream.memcpy(this._buffer, this.byteOffset + this.position, arr.buffer, 0, arr.byteLength);\r\n            this.mapFloat32Array(arr.length, e);\r\n        }\r\n        else {\r\n            for (var i = 0; i < arr.length; i++) {\r\n                this.writeFloat32(arr[i], e);\r\n            }\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Reads a 32-bit int from the DataStream with the desired endianness.\r\n    \r\n      @param e Endianness of the number.\r\n      @return The read number.\r\n     */\r\n    DataStream.prototype.readInt32 = function (e) {\r\n        var v = this._dataView.getInt32(this.position, e == null ? this.endianness : e);\r\n        this.position += 4;\r\n        return v;\r\n    };\r\n    ;\r\n    /**\r\n     Reads a 32-bit int from the DataStream with the offset.\r\n    \r\n     @param offset The offset.\r\n     @return The read number.\r\n     */\r\n    DataStream.prototype.readInt = function (offset) {\r\n        this.seek(offset);\r\n        return this.readInt32();\r\n    };\r\n    ;\r\n    /**\r\n      Reads a 16-bit int from the DataStream with the desired endianness.\r\n    \r\n      @param e Endianness of the number.\r\n      @return The read number.\r\n     */\r\n    DataStream.prototype.readInt16 = function (e) {\r\n        var v = this._dataView.getInt16(this.position, e == null ? this.endianness : e);\r\n        this.position += 2;\r\n        return v;\r\n    };\r\n    ;\r\n    /**\r\n     Reads a 16-bit int from the DataStream with the offset\r\n    \r\n     @param offset The offset.\r\n     @return The read number.\r\n     */\r\n    DataStream.prototype.readShort = function (offset) {\r\n        this.seek(offset);\r\n        return this.readInt16();\r\n    };\r\n    ;\r\n    /**\r\n      Reads an 8-bit int from the DataStream.\r\n    \r\n      @return The read number.\r\n     */\r\n    DataStream.prototype.readInt8 = function () {\r\n        var v = this._dataView.getInt8(this.position);\r\n        this.position += 1;\r\n        return v;\r\n    };\r\n    ;\r\n    /**\r\n     Reads an 8-bit int from the DataStream with the offset.\r\n    \r\n     @param offset The offset.\r\n     @return The read number.\r\n     */\r\n    DataStream.prototype.readByte = function (offset) {\r\n        this.seek(offset);\r\n        return this.readInt8();\r\n    };\r\n    ;\r\n    /**\r\n      Reads a 32-bit unsigned int from the DataStream with the desired endianness.\r\n    \r\n      @param e Endianness of the number.\r\n      @return The read number.\r\n     */\r\n    DataStream.prototype.readUint32 = function (e) {\r\n        var v = this._dataView.getUint32(this.position, e == null ? this.endianness : e);\r\n        this.position += 4;\r\n        return v;\r\n    };\r\n    ;\r\n    /**\r\n      Reads a 16-bit unsigned int from the DataStream with the desired endianness.\r\n    \r\n      @param e Endianness of the number.\r\n      @return The read number.\r\n     */\r\n    DataStream.prototype.readUint16 = function (e) {\r\n        var v = this._dataView.getUint16(this.position, e == null ? this.endianness : e);\r\n        this.position += 2;\r\n        return v;\r\n    };\r\n    ;\r\n    /**\r\n      Reads an 8-bit unsigned int from the DataStream.\r\n    \r\n      @return The read number.\r\n     */\r\n    DataStream.prototype.readUint8 = function () {\r\n        var v = this._dataView.getUint8(this.position);\r\n        this.position += 1;\r\n        return v;\r\n    };\r\n    ;\r\n    /**\r\n      Reads a 32-bit float from the DataStream with the desired endianness.\r\n    \r\n      @param e Endianness of the number.\r\n      @return The read number.\r\n     */\r\n    DataStream.prototype.readFloat32 = function (e) {\r\n        var v = this._dataView.getFloat32(this.position, e == null ? this.endianness : e);\r\n        this.position += 4;\r\n        return v;\r\n    };\r\n    ;\r\n    /**\r\n      Reads a 64-bit float from the DataStream with the desired endianness.\r\n    \r\n      @param e Endianness of the number.\r\n      @return The read number.\r\n     */\r\n    DataStream.prototype.readFloat64 = function (e) {\r\n        var v = this._dataView.getFloat64(this.position, e == null ? this.endianness : e);\r\n        this.position += 8;\r\n        return v;\r\n    };\r\n    ;\r\n    /**\r\n      Writes a 32-bit int to the DataStream with the desired endianness.\r\n    \r\n      @param v Number to write.\r\n      @param e Endianness of the number.\r\n     */\r\n    DataStream.prototype.writeInt32 = function (v, e) {\r\n        this._realloc(4);\r\n        this._dataView.setInt32(this.position, v, e == null ? this.endianness : e);\r\n        this.position += 4;\r\n    };\r\n    ;\r\n    /**\r\n      Writes a 16-bit int to the DataStream with the desired endianness.\r\n    \r\n      @param v Number to write.\r\n      @param e Endianness of the number.\r\n     */\r\n    DataStream.prototype.writeInt16 = function (v, e) {\r\n        this._realloc(2);\r\n        this._dataView.setInt16(this.position, v, e == null ? this.endianness : e);\r\n        this.position += 2;\r\n    };\r\n    ;\r\n    /**\r\n      Writes an 8-bit int to the DataStream.\r\n    \r\n      @param v Number to write.\r\n     */\r\n    DataStream.prototype.writeInt8 = function (v) {\r\n        this._realloc(1);\r\n        this._dataView.setInt8(this.position, v);\r\n        this.position += 1;\r\n    };\r\n    ;\r\n    /**\r\n      Writes a 32-bit unsigned int to the DataStream with the desired endianness.\r\n    \r\n      @param v Number to write.\r\n      @param e Endianness of the number.\r\n     */\r\n    DataStream.prototype.writeUint32 = function (v, e) {\r\n        this._realloc(4);\r\n        this._dataView.setUint32(this.position, v, e == null ? this.endianness : e);\r\n        this.position += 4;\r\n    };\r\n    ;\r\n    /**\r\n      Writes a 16-bit unsigned int to the DataStream with the desired endianness.\r\n    \r\n      @param v Number to write.\r\n      @param e Endianness of the number.\r\n     */\r\n    DataStream.prototype.writeUint16 = function (v, e) {\r\n        this._realloc(2);\r\n        this._dataView.setUint16(this.position, v, e == null ? this.endianness : e);\r\n        this.position += 2;\r\n    };\r\n    ;\r\n    /**\r\n      Writes an 8-bit unsigned  int to the DataStream.\r\n    \r\n      @param v Number to write.\r\n     */\r\n    DataStream.prototype.writeUint8 = function (v) {\r\n        this._realloc(1);\r\n        this._dataView.setUint8(this.position, v);\r\n        this.position += 1;\r\n    };\r\n    ;\r\n    /**\r\n      Writes a 32-bit float to the DataStream with the desired endianness.\r\n    \r\n      @param v Number to write.\r\n      @param e Endianness of the number.\r\n     */\r\n    DataStream.prototype.writeFloat32 = function (v, e) {\r\n        this._realloc(4);\r\n        this._dataView.setFloat32(this.position, v, e == null ? this.endianness : e);\r\n        this.position += 4;\r\n    };\r\n    ;\r\n    /**\r\n      Writes a 64-bit float to the DataStream with the desired endianness.\r\n    \r\n      @param v Number to write.\r\n      @param e Endianness of the number.\r\n     */\r\n    DataStream.prototype.writeFloat64 = function (v, e) {\r\n        this._realloc(8);\r\n        this._dataView.setFloat64(this.position, v, e == null ? this.endianness : e);\r\n        this.position += 8;\r\n    };\r\n    ;\r\n    /**\r\n      Copies byteLength bytes from the src buffer at srcOffset to the\r\n      dst buffer at dstOffset.\r\n    \r\n      @param dst Destination ArrayBuffer to write to.\r\n      @param dstOffset Offset to the destination ArrayBuffer.\r\n      @param src Source ArrayBuffer to read from.\r\n      @param srcOffset Offset to the source ArrayBuffer.\r\n      @param byteLength Number of bytes to copy.\r\n     */\r\n    DataStream.memcpy = function (dst, dstOffset, src, srcOffset, byteLength) {\r\n        var dstU8 = new Uint8Array(dst, dstOffset, byteLength);\r\n        var srcU8 = new Uint8Array(src, srcOffset, byteLength);\r\n        dstU8.set(srcU8);\r\n    };\r\n    ;\r\n    /**\r\n      Converts array to native endianness in-place.\r\n    \r\n      @param array Typed array to convert.\r\n      @param arrayIsLittleEndian True if the data in the array is\r\n                                           little-endian. Set false for big-endian.\r\n      @return The converted typed array.\r\n     */\r\n    DataStream.arrayToNative = function (array, arrayIsLittleEndian) {\r\n        if (arrayIsLittleEndian == this.endianness) {\r\n            return array;\r\n        }\r\n        else {\r\n            return this.flipArrayEndianness(array);\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Converts native endianness array to desired endianness in-place.\r\n    \r\n      @param array Typed array to convert.\r\n      @param littleEndian True if the converted array should be\r\n                                    little-endian. Set false for big-endian.\r\n      @return The converted typed array.\r\n     */\r\n    DataStream.nativeToEndian = function (array, littleEndian) {\r\n        if (this.endianness == littleEndian) {\r\n            return array;\r\n        }\r\n        else {\r\n            return this.flipArrayEndianness(array);\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Flips typed array endianness in-place.\r\n    \r\n      @param array Typed array to flip.\r\n      @return The converted typed array.\r\n     */\r\n    DataStream.flipArrayEndianness = function (array) {\r\n        var u8 = new Uint8Array(array.buffer, array.byteOffset, array.byteLength);\r\n        for (var i = 0; i < array.byteLength; i += array.BYTES_PER_ELEMENT) {\r\n            for (var j = i + array.BYTES_PER_ELEMENT - 1, k = i; j > k; j--, k++) {\r\n                var tmp = u8[k];\r\n                u8[k] = u8[j];\r\n                u8[j] = tmp;\r\n            }\r\n        }\r\n        return array;\r\n    };\r\n    ;\r\n    /**\r\n      Creates an array from an array of character codes.\r\n      Uses String.fromCharCode on the character codes and concats the results into a string.\r\n    \r\n      @param array Array of character codes.\r\n      @return String created from the character codes.\r\n    **/\r\n    DataStream.createStringFromArray = function (array) {\r\n        var str = \"\";\r\n        for (var i = 0; i < array.length; i++) {\r\n            str += String.fromCharCode(array[i]);\r\n        }\r\n        return str;\r\n    };\r\n    ;\r\n    /**\r\n      Reads a struct of data from the DataStream. The struct is defined as\r\n      a flat array of [name, type]-pairs. See the example below:\r\n    \r\n      ds.readStruct([\r\n        'headerTag', 'uint32', // Uint32 in DataStream endianness.\r\n        'headerTag2', 'uint32be', // Big-endian Uint32.\r\n        'headerTag3', 'uint32le', // Little-endian Uint32.\r\n        'array', ['[]', 'uint32', 16], // Uint32Array of length 16.\r\n        'array2Length', 'uint32',\r\n        'array2', ['[]', 'uint32', 'array2Length'] // Uint32Array of length array2Length\r\n      ]);\r\n    \r\n      The possible values for the type are as follows:\r\n    \r\n      // Number types\r\n    \r\n      // Unsuffixed number types use DataStream endianness.\r\n      // To explicitly specify endianness, suffix the type with\r\n      // 'le' for little-endian or 'be' for big-endian,\r\n      // e.g. 'int32be' for big-endian int32.\r\n    \r\n      'uint8' -- 8-bit unsigned int\r\n      'uint16' -- 16-bit unsigned int\r\n      'uint32' -- 32-bit unsigned int\r\n      'int8' -- 8-bit int\r\n      'int16' -- 16-bit int\r\n      'int32' -- 32-bit int\r\n      'float32' -- 32-bit float\r\n      'float64' -- 64-bit float\r\n    \r\n      // String types\r\n      'cstring' -- ASCII string terminated by a zero byte.\r\n      'string:N' -- ASCII string of length N, where N is a literal integer.\r\n      'string:variableName' -- ASCII string of length $variableName,\r\n        where 'variableName' is a previously parsed number in the current struct.\r\n      'string,CHARSET:N' -- String of byteLength N encoded with given CHARSET.\r\n      'u16string:N' -- UCS-2 string of length N in DataStream endianness.\r\n      'u16stringle:N' -- UCS-2 string of length N in little-endian.\r\n      'u16stringbe:N' -- UCS-2 string of length N in big-endian.\r\n    \r\n      // Complex types\r\n      [name, type, name_2, type_2, ..., name_N, type_N] -- Struct\r\n      function(dataStream, struct) {} -- Callback function to read and return data.\r\n      {get: function(dataStream, struct) {},\r\n       set: function(dataStream, struct) {}}\r\n      -- Getter/setter functions to read and return data, handy for using the same\r\n         struct definition for reading and writing structs.\r\n      ['[]', type, length] -- Array of given type and length. The length can be either\r\n                            a number, a string that references a previously-read\r\n                            field, or a callback function(struct, dataStream, type){}.\r\n                            If length is '*', reads in as many elements as it can.\r\n    \r\n      @param structDefinition Struct definition object.\r\n      @return The read struct. Null if failed to read struct.\r\n     */\r\n    DataStream.prototype.readStruct = function (structDefinition) {\r\n        var struct = {}, t, v, n;\r\n        var p = this.position;\r\n        for (var i = 0; i < structDefinition.length; i += 2) {\r\n            t = structDefinition[i + 1];\r\n            v = this.readType(t, struct);\r\n            if (v == null) {\r\n                if (this.failurePosition == 0) {\r\n                    this.failurePosition = this.position;\r\n                }\r\n                this.position = p;\r\n                return null;\r\n            }\r\n            struct[structDefinition[i]] = v;\r\n        }\r\n        return struct;\r\n    };\r\n    ;\r\n    /**\r\n      Read UCS-2 string of desired length and endianness from the DataStream.\r\n    \r\n      @param length The length of the string to read.\r\n      @param endianness The endianness of the string data in the DataStream.\r\n      @return The read string.\r\n     */\r\n    DataStream.prototype.readUCS2String = function (length, endianness) {\r\n        return DataStream.createStringFromArray(this.readUint16Array(length, endianness));\r\n    };\r\n    ;\r\n    /**\r\n     Read UCS-2 string of desired length and offset from the DataStream.\r\n    \r\n     @param offset The offset.\r\n     @param length The length of the string to read.\r\n     @return The read string.\r\n     */\r\n    DataStream.prototype.readStringAt = function (offset, length) {\r\n        this.seek(offset);\r\n        return this.readUCS2String(length);\r\n    };\r\n    ;\r\n    /**\r\n      Write a UCS-2 string of desired endianness to the DataStream. The\r\n      lengthOverride argument lets you define the number of characters to write.\r\n      If the string is shorter than lengthOverride, the extra space is padded with\r\n      zeroes.\r\n    \r\n      @param str The string to write.\r\n      @param endianness The endianness to use for the written string data.\r\n      @param lengthOverride The number of characters to write.\r\n     */\r\n    DataStream.prototype.writeUCS2String = function (str, endianness, lengthOverride) {\r\n        if (lengthOverride == null) {\r\n            lengthOverride = str.length;\r\n        }\r\n        for (var i = 0; i < str.length && i < lengthOverride; i++) {\r\n            this.writeUint16(str.charCodeAt(i), endianness);\r\n        }\r\n        for (; i < lengthOverride; i++) {\r\n            this.writeUint16(0, endianness);\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Read a string of desired length and encoding from the DataStream.\r\n    \r\n      @param length The length of the string to read in bytes.\r\n      @param encoding The encoding of the string data in the DataStream.\r\n                                Defaults to ASCII.\r\n      @return The read string.\r\n     */\r\n    DataStream.prototype.readString = function (length, encoding) {\r\n        if (encoding == null || encoding == \"ASCII\") {\r\n            return DataStream.createStringFromArray(this.mapUint8Array(length == null ? this.byteLength - this.position : length));\r\n        }\r\n        else {\r\n            return iconv.decode(this.mapUint8Array(length), encoding);\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Writes a string of desired length and encoding to the DataStream.\r\n    \r\n      @param s The string to write.\r\n      @param encoding The encoding for the written string data.\r\n                                Defaults to ASCII.\r\n      @param length The number of characters to write.\r\n     */\r\n    DataStream.prototype.writeString = function (s, encoding, length) {\r\n        if (encoding == null || encoding == \"ASCII\") {\r\n            if (length != null) {\r\n                var i = 0;\r\n                var len = Math.min(s.length, length);\r\n                for (i = 0; i < len; i++) {\r\n                    this.writeUint8(s.charCodeAt(i));\r\n                }\r\n                for (; i < length; i++) {\r\n                    this.writeUint8(0);\r\n                }\r\n            }\r\n            else {\r\n                for (var i = 0; i < s.length; i++) {\r\n                    this.writeUint8(s.charCodeAt(i));\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.writeUint8Array(iconv.encode(s.substring(0, length), encoding));\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Read null-terminated string of desired length from the DataStream. Truncates\r\n      the returned string so that the null byte is not a part of it.\r\n    \r\n      @param length The length of the string to read.\r\n      @return The read string.\r\n     */\r\n    DataStream.prototype.readCString = function (length) {\r\n        var blen = this.byteLength - this.position;\r\n        var u8 = new Uint8Array(this._buffer, this._byteOffset + this.position);\r\n        var len = blen;\r\n        if (length != null) {\r\n            len = Math.min(length, blen);\r\n        }\r\n        for (var i = 0; i < len && u8[i] != 0; i++)\r\n            ; // find first zero byte\r\n        var s = DataStream.createStringFromArray(this.mapUint8Array(i));\r\n        if (length != null) {\r\n            this.position += len - i;\r\n        }\r\n        else if (i != blen) {\r\n            this.position += 1; // trailing zero if not at end of buffer\r\n        }\r\n        return s;\r\n    };\r\n    ;\r\n    /**\r\n      Writes a null-terminated string to DataStream and zero-pads it to length\r\n      bytes. If length is not given, writes the string followed by a zero.\r\n      If string is longer than length, the written part of the string does not have\r\n      a trailing zero.\r\n    \r\n      @param s The string to write.\r\n      @param length The number of characters to write.\r\n     */\r\n    DataStream.prototype.writeCString = function (s, length) {\r\n        if (length != null) {\r\n            var i = 0;\r\n            var len = Math.min(s.length, length);\r\n            for (i = 0; i < len; i++) {\r\n                this.writeUint8(s.charCodeAt(i));\r\n            }\r\n            for (; i < length; i++) {\r\n                this.writeUint8(0);\r\n            }\r\n        }\r\n        else {\r\n            for (var i = 0; i < s.length; i++) {\r\n                this.writeUint8(s.charCodeAt(i));\r\n            }\r\n            this.writeUint8(0);\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Reads an object of type t from the DataStream, passing struct as the thus-far\r\n      read struct to possible callbacks that refer to it. Used by readStruct for\r\n      reading in the values, so the type is one of the readStruct types.\r\n    \r\n      @param t Type of the object to read.\r\n      @param struct Struct to refer to when resolving length references\r\n                              and for calling callbacks.\r\n      @return Returns the object on successful read, null on unsuccessful.\r\n     */\r\n    DataStream.prototype.readType = function (t, struct) {\r\n        if (typeof t == \"function\") {\r\n            return t(this, struct);\r\n        }\r\n        else if (typeof t == \"object\" && !(t instanceof Array)) {\r\n            return t.get(this, struct);\r\n        }\r\n        else if (t instanceof Array && t.length != 3) {\r\n            return this.readStruct(t);\r\n        }\r\n        var v = null;\r\n        var lengthOverride = null;\r\n        var charset = \"ASCII\";\r\n        var pos = this.position;\r\n        var len;\r\n        if (typeof t == 'string' && /:/.test(t)) {\r\n            var tp = t.split(\":\");\r\n            t = tp[0];\r\n            len = tp[1];\r\n            // allow length to be previously parsed variable\r\n            // e.g. 'string:fieldLength', if `fieldLength` has\r\n            // been parsed previously.\r\n            if (struct[len] != null) {\r\n                lengthOverride = parseInt(struct[len]);\r\n            }\r\n            else {\r\n                // assume literal integer e.g., 'string:4'\r\n                lengthOverride = parseInt(tp[1]);\r\n            }\r\n        }\r\n        if (typeof t == 'string' && /,/.test(t)) {\r\n            var tp = t.split(\",\");\r\n            t = tp[0];\r\n            charset = parseInt(tp[1]).toString();\r\n        }\r\n        switch (t) {\r\n            case 'uint8':\r\n                v = this.readUint8();\r\n                break;\r\n            case 'int8':\r\n                v = this.readInt8();\r\n                break;\r\n            case 'uint16':\r\n                v = this.readUint16(this.endianness);\r\n                break;\r\n            case 'int16':\r\n                v = this.readInt16(this.endianness);\r\n                break;\r\n            case 'uint32':\r\n                v = this.readUint32(this.endianness);\r\n                break;\r\n            case 'int32':\r\n                v = this.readInt32(this.endianness);\r\n                break;\r\n            case 'float32':\r\n                v = this.readFloat32(this.endianness);\r\n                break;\r\n            case 'float64':\r\n                v = this.readFloat64(this.endianness);\r\n                break;\r\n            case 'uint16be':\r\n                v = this.readUint16(DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'int16be':\r\n                v = this.readInt16(DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'uint32be':\r\n                v = this.readUint32(DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'int32be':\r\n                v = this.readInt32(DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'float32be':\r\n                v = this.readFloat32(DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'float64be':\r\n                v = this.readFloat64(DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'uint16le':\r\n                v = this.readUint16(DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'int16le':\r\n                v = this.readInt16(DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'uint32le':\r\n                v = this.readUint32(DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'int32le':\r\n                v = this.readInt32(DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'float32le':\r\n                v = this.readFloat32(DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'float64le':\r\n                v = this.readFloat64(DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'cstring':\r\n                v = this.readCString(lengthOverride);\r\n                break;\r\n            case 'string':\r\n                v = this.readString(lengthOverride, charset);\r\n                break;\r\n            case 'u16string':\r\n                v = this.readUCS2String(lengthOverride, this.endianness);\r\n                break;\r\n            case 'u16stringle':\r\n                v = this.readUCS2String(lengthOverride, DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'u16stringbe':\r\n                v = this.readUCS2String(lengthOverride, DataStream.BIG_ENDIAN);\r\n                break;\r\n            default:\r\n                if (t.length == 3) {\r\n                    var ta = t[1];\r\n                    var len = t[2];\r\n                    var length = 0;\r\n                    if (typeof len == 'function') {\r\n                        length = len(struct, this, t);\r\n                    }\r\n                    else if (typeof len == 'string' && struct[len] != null) {\r\n                        length = parseInt(struct[len]);\r\n                    }\r\n                    else {\r\n                        length = parseInt(len);\r\n                    }\r\n                    if (typeof ta == \"string\") {\r\n                        var tap = ta.replace(/(le|be)$/, '');\r\n                        var endianness = null;\r\n                        if (/le$/.test(ta)) {\r\n                            endianness = DataStream.LITTLE_ENDIAN;\r\n                        }\r\n                        else if (/be$/.test(ta)) {\r\n                            endianness = DataStream.BIG_ENDIAN;\r\n                        }\r\n                        if (len == '*') {\r\n                            length = null;\r\n                        }\r\n                        switch (tap) {\r\n                            case 'uint8':\r\n                                v = this.readUint8Array(length);\r\n                                break;\r\n                            case 'uint16':\r\n                                v = this.readUint16Array(length, endianness);\r\n                                break;\r\n                            case 'uint32':\r\n                                v = this.readUint32Array(length, endianness);\r\n                                break;\r\n                            case 'int8':\r\n                                v = this.readInt8Array(length);\r\n                                break;\r\n                            case 'int16':\r\n                                v = this.readInt16Array(length, endianness);\r\n                                break;\r\n                            case 'int32':\r\n                                v = this.readInt32Array(length, endianness);\r\n                                break;\r\n                            case 'float32':\r\n                                v = this.readFloat32Array(length, endianness);\r\n                                break;\r\n                            case 'float64':\r\n                                v = this.readFloat64Array(length, endianness);\r\n                                break;\r\n                            case 'cstring':\r\n                            case 'utf16string':\r\n                            case 'string':\r\n                                if (length == null) {\r\n                                    v = [];\r\n                                    while (!this.isEof()) {\r\n                                        var u = this.readType(ta, struct);\r\n                                        if (u == null)\r\n                                            break;\r\n                                        v.push(u);\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    v = new Array(length);\r\n                                    for (var i = 0; i < length; i++) {\r\n                                        v[i] = this.readType(ta, struct);\r\n                                    }\r\n                                }\r\n                                break;\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (len == '*') {\r\n                            v = [];\r\n                            this.buffer;\r\n                            while (true) {\r\n                                var p = this.position;\r\n                                try {\r\n                                    var o = this.readType(ta, struct);\r\n                                    if (o == null) {\r\n                                        this.position = p;\r\n                                        break;\r\n                                    }\r\n                                    v.push(o);\r\n                                }\r\n                                catch (e) {\r\n                                    this.position = p;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            v = new Array(length);\r\n                            for (var i = 0; i < length; i++) {\r\n                                var u = this.readType(ta, struct);\r\n                                if (u == null)\r\n                                    return null;\r\n                                v[i] = u;\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n        }\r\n        if (lengthOverride != null) {\r\n            this.position = pos + lengthOverride;\r\n        }\r\n        return v;\r\n    };\r\n    ;\r\n    /**\r\n      Writes a struct to the DataStream. Takes a structDefinition that gives the\r\n      types and a struct object that gives the values. Refer to readStruct for the\r\n      structure of structDefinition.\r\n    \r\n      @param structDefinition Type definition of the struct.\r\n      @param struct The struct data object.\r\n      */\r\n    DataStream.prototype.writeStruct = function (structDefinition, struct) {\r\n        for (var i = 0; i < structDefinition.length; i += 2) {\r\n            var t = structDefinition[i + 1];\r\n            this.writeType(t, struct[structDefinition[i]], struct);\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Writes object v of type t to the DataStream.\r\n    \r\n      @param t Type of data to write.\r\n      @param v Value of data to write.\r\n      @param struct Struct to pass to write callback functions.\r\n      */\r\n    DataStream.prototype.writeType = function (t, v, struct) {\r\n        if (typeof t == \"function\") {\r\n            return t(this, v);\r\n        }\r\n        else if (typeof t == \"object\" && !(t instanceof Array)) {\r\n            return t.set(this, v, struct);\r\n        }\r\n        var lengthOverride = null;\r\n        var charset = \"ASCII\";\r\n        var pos = this.position;\r\n        if (typeof (t) == 'string' && /:/.test(t)) {\r\n            var tp = t.split(\":\");\r\n            t = tp[0];\r\n            lengthOverride = parseInt(tp[1]);\r\n        }\r\n        if (typeof t == 'string' && /,/.test(t)) {\r\n            var tp = t.split(\",\");\r\n            t = tp[0];\r\n            charset = parseInt(tp[1]).toString();\r\n        }\r\n        switch (t) {\r\n            case 'uint8':\r\n                this.writeUint8(v);\r\n                break;\r\n            case 'int8':\r\n                this.writeInt8(v);\r\n                break;\r\n            case 'uint16':\r\n                this.writeUint16(v, this.endianness);\r\n                break;\r\n            case 'int16':\r\n                this.writeInt16(v, this.endianness);\r\n                break;\r\n            case 'uint32':\r\n                this.writeUint32(v, this.endianness);\r\n                break;\r\n            case 'int32':\r\n                this.writeInt32(v, this.endianness);\r\n                break;\r\n            case 'float32':\r\n                this.writeFloat32(v, this.endianness);\r\n                break;\r\n            case 'float64':\r\n                this.writeFloat64(v, this.endianness);\r\n                break;\r\n            case 'uint16be':\r\n                this.writeUint16(v, DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'int16be':\r\n                this.writeInt16(v, DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'uint32be':\r\n                this.writeUint32(v, DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'int32be':\r\n                this.writeInt32(v, DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'float32be':\r\n                this.writeFloat32(v, DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'float64be':\r\n                this.writeFloat64(v, DataStream.BIG_ENDIAN);\r\n                break;\r\n            case 'uint16le':\r\n                this.writeUint16(v, DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'int16le':\r\n                this.writeInt16(v, DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'uint32le':\r\n                this.writeUint32(v, DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'int32le':\r\n                this.writeInt32(v, DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'float32le':\r\n                this.writeFloat32(v, DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'float64le':\r\n                this.writeFloat64(v, DataStream.LITTLE_ENDIAN);\r\n                break;\r\n            case 'cstring':\r\n                this.writeCString(v, lengthOverride);\r\n                break;\r\n            case 'string':\r\n                this.writeString(v, charset, lengthOverride);\r\n                break;\r\n            case 'u16string':\r\n                this.writeUCS2String(v, this.endianness, lengthOverride);\r\n                break;\r\n            case 'u16stringle':\r\n                this.writeUCS2String(v, DataStream.LITTLE_ENDIAN, lengthOverride);\r\n                break;\r\n            case 'u16stringbe':\r\n                this.writeUCS2String(v, DataStream.BIG_ENDIAN, lengthOverride);\r\n                break;\r\n            default:\r\n                if (t.length == 3) {\r\n                    var ta = t[1];\r\n                    for (var i = 0; i < v.length; i++) {\r\n                        this.writeType(ta, v[i], t[2]);\r\n                    }\r\n                    break;\r\n                }\r\n                else {\r\n                    this.writeStruct(t, v);\r\n                    break;\r\n                }\r\n        }\r\n        if (lengthOverride != null) {\r\n            this.position = pos;\r\n            this._realloc(lengthOverride);\r\n            this.position = pos + lengthOverride;\r\n        }\r\n    };\r\n    ;\r\n    /**\r\n      Big-endian const to use as default endianness.\r\n      */\r\n    DataStream.BIG_ENDIAN = false;\r\n    /**\r\n      Little-endian const to use as default endianness.\r\n      */\r\n    DataStream.LITTLE_ENDIAN = true;\r\n    /**\r\n      Native endianness. Either DataStream.BIG_ENDIAN or DataStream.LITTLE_ENDIAN\r\n      depending on the platform endianness.\r\n    \r\n     */\r\n    DataStream.endianness = new Int8Array(new Int16Array([1]).buffer)[0] > 0;\r\n    return DataStream;\r\n}());\r\nexports[\"default\"] = DataStream;\r\n/* Fix for Opera 12 not defining BYTES_PER_ELEMENT in typed array prototypes. */\r\nif (Uint8Array.prototype.BYTES_PER_ELEMENT === undefined) {\r\n    Object.defineProperties(Uint8Array.prototype, { BYTES_PER_ELEMENT: { value: Uint8Array.BYTES_PER_ELEMENT } });\r\n    Object.defineProperties(Int8Array.prototype, { BYTES_PER_ELEMENT: { value: Int8Array.BYTES_PER_ELEMENT } });\r\n    Object.defineProperties(Uint8ClampedArray.prototype, { BYTES_PER_ELEMENT: { value: Uint8ClampedArray.BYTES_PER_ELEMENT } });\r\n    Object.defineProperties(Uint16Array.prototype, { BYTES_PER_ELEMENT: { value: Uint16Array.BYTES_PER_ELEMENT } });\r\n    Object.defineProperties(Int16Array.prototype, { BYTES_PER_ELEMENT: { value: Int16Array.BYTES_PER_ELEMENT } });\r\n    Object.defineProperties(Uint32Array.prototype, { BYTES_PER_ELEMENT: { value: Uint32Array.BYTES_PER_ELEMENT } });\r\n    Object.defineProperties(Int32Array.prototype, { BYTES_PER_ELEMENT: { value: Int32Array.BYTES_PER_ELEMENT } });\r\n    Object.defineProperties(Float64Array.prototype, { BYTES_PER_ELEMENT: { value: Float64Array.BYTES_PER_ELEMENT } });\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvRGF0YVN0cmVhbS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZLG1CQUFPLENBQUMsZ0VBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsNkJBQTZCLElBQUksZ0NBQWdDO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQkFBa0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnQkFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnQkFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isc0JBQXNCO0FBQzlDLGlFQUFpRSxPQUFPO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0Isa0JBQWtCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QyxPQUFPLG9DQUFvQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQXFGO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHNDQUFzQztBQUM5RDtBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUztBQUNyQztBQUNBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsY0FBYztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVCQUF1QjtBQUMvQyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLFNBQVM7QUFDakM7QUFDQTtBQUNBLG1CQUFtQixZQUFZO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGNBQWM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELFlBQVk7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsWUFBWTtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qiw2QkFBNkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLGNBQWM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWU7QUFDZjtBQUNBO0FBQ0Esb0RBQW9ELHFCQUFxQix1Q0FBdUM7QUFDaEgsbURBQW1ELHFCQUFxQixzQ0FBc0M7QUFDOUcsMkRBQTJELHFCQUFxQiw4Q0FBOEM7QUFDOUgscURBQXFELHFCQUFxQix3Q0FBd0M7QUFDbEgsb0RBQW9ELHFCQUFxQix1Q0FBdUM7QUFDaEgscURBQXFELHFCQUFxQix3Q0FBd0M7QUFDbEgsb0RBQW9ELHFCQUFxQix1Q0FBdUM7QUFDaEgsc0RBQXNELHFCQUFxQix5Q0FBeUM7QUFDcEgiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tc2d0b2h0bWwvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvRGF0YVN0cmVhbS5qcz85NTY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbnZhciBpY29udiA9IHJlcXVpcmUoJ2ljb252LWxpdGUnKTtcclxuLyoqXHJcbiAqIFRoaXMgRGF0YVN0cmVhbSBpcyBmb3IgaW50ZXJuYWwgdXNlLlxyXG4gKi9cclxudmFyIERhdGFTdHJlYW0gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAvKipcclxuICAgICAgRGF0YVN0cmVhbSByZWFkcyBzY2FsYXJzLCBhcnJheXMgYW5kIHN0cnVjdHMgb2YgZGF0YSBmcm9tIGFuIEFycmF5QnVmZmVyLlxyXG4gICAgICBJdCdzIGxpa2UgYSBmaWxlLWxpa2UgRGF0YVZpZXcgb24gc3Rlcm9pZHMuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGFycmF5QnVmZmVyIEFycmF5QnVmZmVyIHRvIHJlYWQgZnJvbS5cclxuICAgICAgQHBhcmFtIGJ5dGVPZmZzZXQgT2Zmc2V0IGZyb20gYXJyYXlCdWZmZXIgYmVnaW5uaW5nIGZvciB0aGUgRGF0YVN0cmVhbS5cclxuICAgICAgQHBhcmFtIGVuZGlhbm5lc3Mge0BsaW5rIERhdGFTdHJlYW0uQklHX0VORElBTn0gb3Ige0BsaW5rIERhdGFTdHJlYW0uTElUVExFX0VORElBTn0gKHRoZSBkZWZhdWx0KS5cclxuICAgICAgKi9cclxuICAgIGZ1bmN0aW9uIERhdGFTdHJlYW0oYXJyYXlCdWZmZXIsIGJ5dGVPZmZzZXQsIGVuZGlhbm5lc3MpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgIEBpbnRlcm5hbFxyXG4gICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9keW5hbWljU2l6ZSA9IHRydWU7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICBWaXJ0dWFsIGJ5dGUgbGVuZ3RoIG9mIHRoZSBEYXRhU3RyZWFtIGJhY2tpbmcgYnVmZmVyLlxyXG4gICAgICAgICAgVXBkYXRlZCB0byBiZSBtYXggb2Ygb3JpZ2luYWwgYnVmZmVyIHNpemUgYW5kIGxhc3Qgd3JpdHRlbiBzaXplLlxyXG4gICAgICAgICAgSWYgZHluYW1pY1NpemUgaXMgZmFsc2UgaXMgc2V0IHRvIGJ1ZmZlciBzaXplLlxyXG4gICAgICBcclxuICAgICAgICAgIEBpbnRlcm5hbFxyXG4gICAgICAgICAgKi9cclxuICAgICAgICB0aGlzLl9ieXRlTGVuZ3RoID0gMDtcclxuICAgICAgICAvKipcclxuICAgICAgICAgIFNlZWsgcG9zaXRpb24gd2hlcmUge0BsaW5rIHJlYWRTdHJ1Y3R9IHJhbiBpbnRvIGEgcHJvYmxlbS5cclxuICAgICAgICAgIFVzZWZ1bCBmb3IgZGVidWdnaW5nIHN0cnVjdCBwYXJzaW5nLlxyXG4gICAgICAgIFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHRoaXMuZmFpbHVyZVBvc2l0aW9uID0gMDtcclxuICAgICAgICB0aGlzLl9ieXRlT2Zmc2V0ID0gYnl0ZU9mZnNldCB8fCAwO1xyXG4gICAgICAgIGlmIChhcnJheUJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gYXJyYXlCdWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFycmF5QnVmZmVyIGluc3RhbmNlb2YgRGF0YVZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5kYXRhVmlldyA9IGFycmF5QnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChhcnJheUJ1ZmZlciAmJiBhcnJheUJ1ZmZlci5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgICAgICB0aGlzLl9ieXRlT2Zmc2V0ICs9IGFycmF5QnVmZmVyLmJ5dGVPZmZzZXQ7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IGFycmF5QnVmZmVyLmJ1ZmZlcjtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YVZpZXcgPSBuZXcgRGF0YVZpZXcodGhpcy5fYnVmZmVyLCB0aGlzLl9ieXRlT2Zmc2V0KTtcclxuICAgICAgICAgICAgdGhpcy5fYnl0ZUxlbmd0aCA9IHRoaXMuX2RhdGFWaWV3LmJ5dGVMZW5ndGggKyB0aGlzLl9ieXRlT2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBhcnJheUJ1ZmZlclwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IDA7XHJcbiAgICAgICAgdGhpcy5lbmRpYW5uZXNzID0gZW5kaWFubmVzcyA9PSBudWxsID8gRGF0YVN0cmVhbS5MSVRUTEVfRU5ESUFOIDogZW5kaWFubmVzcztcclxuICAgIH1cclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBTYXZlcyB0aGUgRGF0YVN0cmVhbSBjb250ZW50cyB0byB0aGUgZ2l2ZW4gZmlsZW5hbWUuXHJcbiAgICAgIFVzZXMgQ2hyb21lJ3MgYW5jaG9yIGRvd25sb2FkIHByb3BlcnR5IHRvIGluaXRpYXRlIGRvd25sb2FkLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBmaWxlbmFtZSBGaWxlbmFtZSB0byBzYXZlIGFzLlxyXG4gICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUuc2F2ZSA9IGZ1bmN0aW9uIChmaWxlbmFtZSkge1xyXG4gICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3RoaXMuYnVmZmVyXSk7XHJcbiAgICAgICAgdmFyIFVSTCA9ICh3aW5kb3dbXCJ3ZWJraXRVUkxcIl0gfHwgd2luZG93LlVSTCk7XHJcbiAgICAgICAgaWYgKFVSTCAmJiBVUkwuY3JlYXRlT2JqZWN0VVJMKSB7XHJcbiAgICAgICAgICAgIHZhciB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xyXG4gICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCB1cmwpO1xyXG4gICAgICAgICAgICBhLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCBmaWxlbmFtZSk7XHJcbiAgICAgICAgICAgIGEuY2xpY2soKTtcclxuICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgKFwiRGF0YVN0cmVhbS5zYXZlOiBDYW4ndCBjcmVhdGUgb2JqZWN0IFVSTC5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIDtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhU3RyZWFtLnByb3RvdHlwZSwgXCJkeW5hbWljU2l6ZVwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogV2hldGhlciB0byBleHRlbmQgRGF0YVN0cmVhbSBidWZmZXIgd2hlbiB0cnlpbmcgdG8gd3JpdGUgYmV5b25kIGl0cyBzaXplLlxyXG4gICAgICAgICAqIElmIHNldCwgdGhlIGJ1ZmZlciBpcyByZWFsbG9jYXRlZCB0byB0d2ljZSBpdHMgY3VycmVudCBzaXplIHVudGlsIHRoZVxyXG4gICAgICAgICAqIHJlcXVlc3RlZCB3cml0ZSBmaXRzIHRoZSBidWZmZXIuXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9keW5hbWljU2l6ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgaWYgKCF2KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90cmltQWxsb2MoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9keW5hbWljU2l6ZSA9IHY7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERhdGFTdHJlYW0ucHJvdG90eXBlLCBcImJ5dGVMZW5ndGhcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAgUmV0dXJucyB0aGUgYnl0ZSBsZW5ndGggb2YgdGhlIERhdGFTdHJlYW0gb2JqZWN0LlxyXG4gICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J5dGVMZW5ndGggLSB0aGlzLl9ieXRlT2Zmc2V0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEYXRhU3RyZWFtLnByb3RvdHlwZSwgXCJidWZmZXJcIiwge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAgU2V0L2dldCB0aGUgYmFja2luZyBBcnJheUJ1ZmZlciBvZiB0aGUgRGF0YVN0cmVhbSBvYmplY3QuXHJcbiAgICAgICAgICBUaGUgc2V0dGVyIHVwZGF0ZXMgdGhlIERhdGFWaWV3IHRvIHBvaW50IHRvIHRoZSBuZXcgYnVmZmVyLlxyXG4gICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fdHJpbUFsbG9jKCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXI7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J1ZmZlciA9IHY7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGFWaWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuX2J1ZmZlciwgdGhpcy5fYnl0ZU9mZnNldCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J5dGVMZW5ndGggPSB0aGlzLl9idWZmZXIuYnl0ZUxlbmd0aDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRGF0YVN0cmVhbS5wcm90b3R5cGUsIFwiYnl0ZU9mZnNldFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICBTZXQvZ2V0IHRoZSBieXRlT2Zmc2V0IG9mIHRoZSBEYXRhU3RyZWFtIG9iamVjdC5cclxuICAgICAgICAgIFRoZSBzZXR0ZXIgdXBkYXRlcyB0aGUgRGF0YVZpZXcgdG8gcG9pbnQgdG8gdGhlIG5ldyBieXRlT2Zmc2V0LlxyXG4gICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2J5dGVPZmZzZXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2J5dGVPZmZzZXQgPSB2O1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhVmlldyA9IG5ldyBEYXRhVmlldyh0aGlzLl9idWZmZXIsIHRoaXMuX2J5dGVPZmZzZXQpO1xyXG4gICAgICAgICAgICB0aGlzLl9ieXRlTGVuZ3RoID0gdGhpcy5fYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KERhdGFTdHJlYW0ucHJvdG90eXBlLCBcImRhdGFWaWV3XCIsIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgIFNldC9nZXQgdGhlIGJhY2tpbmcgRGF0YVZpZXcgb2YgdGhlIERhdGFTdHJlYW0gb2JqZWN0LlxyXG4gICAgICAgICAgVGhlIHNldHRlciB1cGRhdGVzIHRoZSBidWZmZXIgYW5kIGJ5dGVPZmZzZXQgdG8gcG9pbnQgdG8gdGhlIERhdGFWaWV3IHZhbHVlcy5cclxuICAgICAgICAgICovXHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhVmlldztcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgdGhpcy5fYnl0ZU9mZnNldCA9IHYuYnl0ZU9mZnNldDtcclxuICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gdi5idWZmZXI7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGFWaWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuX2J1ZmZlciwgdGhpcy5fYnl0ZU9mZnNldCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2J5dGVMZW5ndGggPSB0aGlzLl9ieXRlT2Zmc2V0ICsgdi5ieXRlTGVuZ3RoO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICBJbnRlcm5hbCBmdW5jdGlvbiB0byByZXNpemUgdGhlIERhdGFTdHJlYW0gYnVmZmVyIHdoZW4gcmVxdWlyZWQuXHJcbiAgICAgIEBwYXJhbSBleHRyYSBOdW1iZXIgb2YgYnl0ZXMgdG8gYWRkIHRvIHRoZSBidWZmZXIgYWxsb2NhdGlvbi5cclxuICAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLl9yZWFsbG9jID0gZnVuY3Rpb24gKGV4dHJhKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9keW5hbWljU2l6ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXEgPSB0aGlzLl9ieXRlT2Zmc2V0ICsgdGhpcy5wb3NpdGlvbiArIGV4dHJhO1xyXG4gICAgICAgIHZhciBibGVuID0gdGhpcy5fYnVmZmVyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgaWYgKHJlcSA8PSBibGVuKSB7XHJcbiAgICAgICAgICAgIGlmIChyZXEgPiB0aGlzLl9ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ieXRlTGVuZ3RoID0gcmVxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGJsZW4gPCAxKSB7XHJcbiAgICAgICAgICAgIGJsZW4gPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAocmVxID4gYmxlbikge1xyXG4gICAgICAgICAgICBibGVuICo9IDI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIoYmxlbik7XHJcbiAgICAgICAgdmFyIHNyYyA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2J1ZmZlcik7XHJcbiAgICAgICAgdmFyIGRzdCA9IG5ldyBVaW50OEFycmF5KGJ1ZiwgMCwgc3JjLmxlbmd0aCk7XHJcbiAgICAgICAgZHN0LnNldChzcmMpO1xyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmO1xyXG4gICAgICAgIHRoaXMuX2J5dGVMZW5ndGggPSByZXE7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIEludGVybmFsIGZ1bmN0aW9uIHRvIHRyaW0gdGhlIERhdGFTdHJlYW0gYnVmZmVyIHdoZW4gcmVxdWlyZWQuXHJcbiAgICAgIFVzZWQgZm9yIHN0cmlwcGluZyBvdXQgdGhlIGV4dHJhIGJ5dGVzIGZyb20gdGhlIGJhY2tpbmcgYnVmZmVyIHdoZW5cclxuICAgICAgdGhlIHZpcnR1YWwgYnl0ZUxlbmd0aCBpcyBzbWFsbGVyIHRoYW4gdGhlIGJ1ZmZlciBieXRlTGVuZ3RoIChoYXBwZW5zIGFmdGVyXHJcbiAgICAgIGdyb3dpbmcgdGhlIGJ1ZmZlciB3aXRoIHdyaXRlcyBhbmQgbm90IGZpbGxpbmcgdGhlIGV4dHJhIHNwYWNlIGNvbXBsZXRlbHkpLlxyXG4gICAgXHJcbiAgICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5fdHJpbUFsbG9jID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9ieXRlTGVuZ3RoID09IHRoaXMuX2J1ZmZlci5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ1ZiA9IG5ldyBBcnJheUJ1ZmZlcih0aGlzLl9ieXRlTGVuZ3RoKTtcclxuICAgICAgICB2YXIgZHN0ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcclxuICAgICAgICB2YXIgc3JjID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fYnVmZmVyLCAwLCBkc3QubGVuZ3RoKTtcclxuICAgICAgICBkc3Quc2V0KHNyYyk7XHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSBidWY7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFNldHMgdGhlIERhdGFTdHJlYW0gcmVhZC93cml0ZSBwb3NpdGlvbiB0byBnaXZlbiBwb3NpdGlvbi5cclxuICAgICAgQ2xhbXBzIGJldHdlZW4gMCBhbmQgRGF0YVN0cmVhbSBsZW5ndGguXHJcbiAgICBcclxuICAgICAgQHBhcmFtIHBvcyBQb3NpdGlvbiB0byBzZWVrIHRvLlxyXG4gICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUuc2VlayA9IGZ1bmN0aW9uIChwb3MpIHtcclxuICAgICAgICB2YXIgbnBvcyA9IE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMuYnl0ZUxlbmd0aCwgcG9zKSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IChpc05hTihucG9zKSB8fCAhaXNGaW5pdGUobnBvcykpID8gMCA6IG5wb3M7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFJldHVybnMgdHJ1ZSBpZiB0aGUgRGF0YVN0cmVhbSBzZWVrIHBvaW50ZXIgaXMgYXQgdGhlIGVuZCBvZiBidWZmZXIgYW5kXHJcbiAgICAgIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhIHRvIHJlYWQuXHJcbiAgICBcclxuICAgICAgQHJldHVybiBUcnVlIGlmIHRoZSBzZWVrIHBvaW50ZXIgaXMgYXQgdGhlIGVuZCBvZiB0aGUgYnVmZmVyLlxyXG4gICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUuaXNFb2YgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLnBvc2l0aW9uID49IHRoaXMuYnl0ZUxlbmd0aCk7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIE1hcHMgYW4gSW50MzJBcnJheSBpbnRvIHRoZSBEYXRhU3RyZWFtIGJ1ZmZlciwgc3dpenpsaW5nIGl0IHRvIG5hdGl2ZVxyXG4gICAgICBlbmRpYW5uZXNzIGluLXBsYWNlLiBUaGUgY3VycmVudCBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIGJ1ZmZlciBuZWVkcyB0b1xyXG4gICAgICBiZSBhIG11bHRpcGxlIG9mIGVsZW1lbnQgc2l6ZSwganVzdCBsaWtlIHdpdGggdHlwZWQgYXJyYXkgdmlld3MuXHJcbiAgICBcclxuICAgICAgTmljZSBmb3IgcXVpY2tseSByZWFkaW5nIGluIGRhdGEuIFdhcm5pbmc6IHBvdGVudGlhbGx5IG1vZGlmaWVzIHRoZSBidWZmZXJcclxuICAgICAgY29udGVudHMuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGxlbmd0aCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gbWFwLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBkYXRhIHRvIHJlYWQuXHJcbiAgICAgIEByZXR1cm4gSW50MzJBcnJheSB0byB0aGUgRGF0YVN0cmVhbSBiYWNraW5nIGJ1ZmZlci5cclxuICAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLm1hcEludDMyQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoLCBlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbGxvYyhsZW5ndGggKiA0KTtcclxuICAgICAgICB2YXIgYXJyID0gbmV3IEludDMyQXJyYXkodGhpcy5fYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBsZW5ndGgpO1xyXG4gICAgICAgIERhdGFTdHJlYW0uYXJyYXlUb05hdGl2ZShhcnIsIGUgPT0gbnVsbCA/IHRoaXMuZW5kaWFubmVzcyA6IGUpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gbGVuZ3RoICogNDtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBNYXBzIGFuIEludDE2QXJyYXkgaW50byB0aGUgRGF0YVN0cmVhbSBidWZmZXIsIHN3aXp6bGluZyBpdCB0byBuYXRpdmVcclxuICAgICAgZW5kaWFubmVzcyBpbi1wbGFjZS4gVGhlIGN1cnJlbnQgb2Zmc2V0IGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBidWZmZXIgbmVlZHMgdG9cclxuICAgICAgYmUgYSBtdWx0aXBsZSBvZiBlbGVtZW50IHNpemUsIGp1c3QgbGlrZSB3aXRoIHR5cGVkIGFycmF5IHZpZXdzLlxyXG4gICAgXHJcbiAgICAgIE5pY2UgZm9yIHF1aWNrbHkgcmVhZGluZyBpbiBkYXRhLiBXYXJuaW5nOiBwb3RlbnRpYWxseSBtb2RpZmllcyB0aGUgYnVmZmVyXHJcbiAgICAgIGNvbnRlbnRzLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBsZW5ndGggTnVtYmVyIG9mIGVsZW1lbnRzIHRvIG1hcC5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgZGF0YSB0byByZWFkLlxyXG4gICAgICBAcmV0dXJuIEludDE2QXJyYXkgdG8gdGhlIERhdGFTdHJlYW0gYmFja2luZyBidWZmZXIuXHJcbiAgICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5tYXBJbnQxNkFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCwgZSkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MobGVuZ3RoICogMik7XHJcbiAgICAgICAgdmFyIGFyciA9IG5ldyBJbnQxNkFycmF5KHRoaXMuX2J1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0ICsgdGhpcy5wb3NpdGlvbiwgbGVuZ3RoKTtcclxuICAgICAgICBEYXRhU3RyZWFtLmFycmF5VG9OYXRpdmUoYXJyLCBlID09IG51bGwgPyB0aGlzLmVuZGlhbm5lc3MgOiBlKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IGxlbmd0aCAqIDI7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgTWFwcyBhbiBJbnQ4QXJyYXkgaW50byB0aGUgRGF0YVN0cmVhbSBidWZmZXIuXHJcbiAgICBcclxuICAgICAgTmljZSBmb3IgcXVpY2tseSByZWFkaW5nIGluIGRhdGEuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGxlbmd0aCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gbWFwLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBkYXRhIHRvIHJlYWQuXHJcbiAgICAgIEByZXR1cm4gSW50OEFycmF5IHRvIHRoZSBEYXRhU3RyZWFtIGJhY2tpbmcgYnVmZmVyLlxyXG4gICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUubWFwSW50OEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MobGVuZ3RoICogMSk7XHJcbiAgICAgICAgdmFyIGFyciA9IG5ldyBJbnQ4QXJyYXkodGhpcy5fYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBsZW5ndGgpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gbGVuZ3RoICogMTtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBNYXBzIGEgVWludDMyQXJyYXkgaW50byB0aGUgRGF0YVN0cmVhbSBidWZmZXIsIHN3aXp6bGluZyBpdCB0byBuYXRpdmVcclxuICAgICAgZW5kaWFubmVzcyBpbi1wbGFjZS4gVGhlIGN1cnJlbnQgb2Zmc2V0IGZyb20gdGhlIHN0YXJ0IG9mIHRoZSBidWZmZXIgbmVlZHMgdG9cclxuICAgICAgYmUgYSBtdWx0aXBsZSBvZiBlbGVtZW50IHNpemUsIGp1c3QgbGlrZSB3aXRoIHR5cGVkIGFycmF5IHZpZXdzLlxyXG4gICAgXHJcbiAgICAgIE5pY2UgZm9yIHF1aWNrbHkgcmVhZGluZyBpbiBkYXRhLiBXYXJuaW5nOiBwb3RlbnRpYWxseSBtb2RpZmllcyB0aGUgYnVmZmVyXHJcbiAgICAgIGNvbnRlbnRzLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBsZW5ndGggTnVtYmVyIG9mIGVsZW1lbnRzIHRvIG1hcC5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgZGF0YSB0byByZWFkLlxyXG4gICAgICBAcmV0dXJuIFVpbnQzMkFycmF5IHRvIHRoZSBEYXRhU3RyZWFtIGJhY2tpbmcgYnVmZmVyLlxyXG4gICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUubWFwVWludDMyQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoLCBlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbGxvYyhsZW5ndGggKiA0KTtcclxuICAgICAgICB2YXIgYXJyID0gbmV3IFVpbnQzMkFycmF5KHRoaXMuX2J1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0ICsgdGhpcy5wb3NpdGlvbiwgbGVuZ3RoKTtcclxuICAgICAgICBEYXRhU3RyZWFtLmFycmF5VG9OYXRpdmUoYXJyLCBlID09IG51bGwgPyB0aGlzLmVuZGlhbm5lc3MgOiBlKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IGxlbmd0aCAqIDQ7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgTWFwcyBhIFVpbnQxNkFycmF5IGludG8gdGhlIERhdGFTdHJlYW0gYnVmZmVyLCBzd2l6emxpbmcgaXQgdG8gbmF0aXZlXHJcbiAgICAgIGVuZGlhbm5lc3MgaW4tcGxhY2UuIFRoZSBjdXJyZW50IG9mZnNldCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgYnVmZmVyIG5lZWRzIHRvXHJcbiAgICAgIGJlIGEgbXVsdGlwbGUgb2YgZWxlbWVudCBzaXplLCBqdXN0IGxpa2Ugd2l0aCB0eXBlZCBhcnJheSB2aWV3cy5cclxuICAgIFxyXG4gICAgICBOaWNlIGZvciBxdWlja2x5IHJlYWRpbmcgaW4gZGF0YS4gV2FybmluZzogcG90ZW50aWFsbHkgbW9kaWZpZXMgdGhlIGJ1ZmZlclxyXG4gICAgICBjb250ZW50cy5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gbGVuZ3RoIE51bWJlciBvZiBlbGVtZW50cyB0byBtYXAuXHJcbiAgICAgIEBwYXJhbSBlIEVuZGlhbm5lc3Mgb2YgdGhlIGRhdGEgdG8gcmVhZC5cclxuICAgICAgQHJldHVybiBVaW50MTZBcnJheSB0byB0aGUgRGF0YVN0cmVhbSBiYWNraW5nIGJ1ZmZlci5cclxuICAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLm1hcFVpbnQxNkFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCwgZSkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MobGVuZ3RoICogMik7XHJcbiAgICAgICAgdmFyIGFyciA9IG5ldyBVaW50MTZBcnJheSh0aGlzLl9idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24sIGxlbmd0aCk7XHJcbiAgICAgICAgRGF0YVN0cmVhbS5hcnJheVRvTmF0aXZlKGFyciwgZSA9PSBudWxsID8gdGhpcy5lbmRpYW5uZXNzIDogZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBsZW5ndGggKiAyO1xyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIE1hcHMgYSBVaW50OEFycmF5IGludG8gdGhlIERhdGFTdHJlYW0gYnVmZmVyLlxyXG4gICAgXHJcbiAgICAgIE5pY2UgZm9yIHF1aWNrbHkgcmVhZGluZyBpbiBkYXRhLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBsZW5ndGggTnVtYmVyIG9mIGVsZW1lbnRzIHRvIG1hcC5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgZGF0YSB0byByZWFkLlxyXG4gICAgICBAcmV0dXJuIFVpbnQ4QXJyYXkgdG8gdGhlIERhdGFTdHJlYW0gYmFja2luZyBidWZmZXIuXHJcbiAgICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5tYXBVaW50OEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MobGVuZ3RoICogMSk7XHJcbiAgICAgICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KHRoaXMuX2J1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0ICsgdGhpcy5wb3NpdGlvbiwgbGVuZ3RoKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IGxlbmd0aCAqIDE7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgTWFwcyBhIEZsb2F0NjRBcnJheSBpbnRvIHRoZSBEYXRhU3RyZWFtIGJ1ZmZlciwgc3dpenpsaW5nIGl0IHRvIG5hdGl2ZVxyXG4gICAgICBlbmRpYW5uZXNzIGluLXBsYWNlLiBUaGUgY3VycmVudCBvZmZzZXQgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIGJ1ZmZlciBuZWVkcyB0b1xyXG4gICAgICBiZSBhIG11bHRpcGxlIG9mIGVsZW1lbnQgc2l6ZSwganVzdCBsaWtlIHdpdGggdHlwZWQgYXJyYXkgdmlld3MuXHJcbiAgICBcclxuICAgICAgTmljZSBmb3IgcXVpY2tseSByZWFkaW5nIGluIGRhdGEuIFdhcm5pbmc6IHBvdGVudGlhbGx5IG1vZGlmaWVzIHRoZSBidWZmZXJcclxuICAgICAgY29udGVudHMuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGxlbmd0aCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gbWFwLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBkYXRhIHRvIHJlYWQuXHJcbiAgICAgIEByZXR1cm4gRmxvYXQ2NEFycmF5IHRvIHRoZSBEYXRhU3RyZWFtIGJhY2tpbmcgYnVmZmVyLlxyXG4gICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUubWFwRmxvYXQ2NEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCwgZSkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MobGVuZ3RoICogOCk7XHJcbiAgICAgICAgdmFyIGFyciA9IG5ldyBGbG9hdDY0QXJyYXkodGhpcy5fYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBsZW5ndGgpO1xyXG4gICAgICAgIERhdGFTdHJlYW0uYXJyYXlUb05hdGl2ZShhcnIsIGUgPT0gbnVsbCA/IHRoaXMuZW5kaWFubmVzcyA6IGUpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gbGVuZ3RoICogODtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBNYXBzIGEgRmxvYXQzMkFycmF5IGludG8gdGhlIERhdGFTdHJlYW0gYnVmZmVyLCBzd2l6emxpbmcgaXQgdG8gbmF0aXZlXHJcbiAgICAgIGVuZGlhbm5lc3MgaW4tcGxhY2UuIFRoZSBjdXJyZW50IG9mZnNldCBmcm9tIHRoZSBzdGFydCBvZiB0aGUgYnVmZmVyIG5lZWRzIHRvXHJcbiAgICAgIGJlIGEgbXVsdGlwbGUgb2YgZWxlbWVudCBzaXplLCBqdXN0IGxpa2Ugd2l0aCB0eXBlZCBhcnJheSB2aWV3cy5cclxuICAgIFxyXG4gICAgICBOaWNlIGZvciBxdWlja2x5IHJlYWRpbmcgaW4gZGF0YS4gV2FybmluZzogcG90ZW50aWFsbHkgbW9kaWZpZXMgdGhlIGJ1ZmZlclxyXG4gICAgICBjb250ZW50cy5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gbGVuZ3RoIE51bWJlciBvZiBlbGVtZW50cyB0byBtYXAuXHJcbiAgICAgIEBwYXJhbSBlIEVuZGlhbm5lc3Mgb2YgdGhlIGRhdGEgdG8gcmVhZC5cclxuICAgICAgQHJldHVybiBGbG9hdDMyQXJyYXkgdG8gdGhlIERhdGFTdHJlYW0gYmFja2luZyBidWZmZXIuXHJcbiAgICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5tYXBGbG9hdDMyQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoLCBlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbGxvYyhsZW5ndGggKiA0KTtcclxuICAgICAgICB2YXIgYXJyID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLl9idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24sIGxlbmd0aCk7XHJcbiAgICAgICAgRGF0YVN0cmVhbS5hcnJheVRvTmF0aXZlKGFyciwgZSA9PSBudWxsID8gdGhpcy5lbmRpYW5uZXNzIDogZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBsZW5ndGggKiA0O1xyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFJlYWRzIGFuIEludDMyQXJyYXkgb2YgZGVzaXJlZCBsZW5ndGggYW5kIGVuZGlhbm5lc3MgZnJvbSB0aGUgRGF0YVN0cmVhbS5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gbGVuZ3RoIE51bWJlciBvZiBlbGVtZW50cyB0byBtYXAuXHJcbiAgICAgIEBwYXJhbSBlIEVuZGlhbm5lc3Mgb2YgdGhlIGRhdGEgdG8gcmVhZC5cclxuICAgICAgQHJldHVybiBUaGUgcmVhZCBJbnQzMkFycmF5LlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkSW50MzJBcnJheSA9IGZ1bmN0aW9uIChsZW5ndGgsIGUpIHtcclxuICAgICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/ICh0aGlzLmJ5dGVMZW5ndGggLSB0aGlzLnBvc2l0aW9uKSAvIDQgOiBsZW5ndGg7XHJcbiAgICAgICAgdmFyIGFyciA9IG5ldyBJbnQzMkFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgRGF0YVN0cmVhbS5tZW1jcHkoYXJyLmJ1ZmZlciwgMCwgdGhpcy5idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24sIGxlbmd0aCAqIGFyci5CWVRFU19QRVJfRUxFTUVOVCk7XHJcbiAgICAgICAgRGF0YVN0cmVhbS5hcnJheVRvTmF0aXZlKGFyciwgZSA9PSBudWxsID8gdGhpcy5lbmRpYW5uZXNzIDogZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBhcnIuYnl0ZUxlbmd0aDtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBSZWFkcyBhbiBJbnQxNkFycmF5IG9mIGRlc2lyZWQgbGVuZ3RoIGFuZCBlbmRpYW5uZXNzIGZyb20gdGhlIERhdGFTdHJlYW0uXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGxlbmd0aCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gbWFwLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBkYXRhIHRvIHJlYWQuXHJcbiAgICAgIEByZXR1cm4gVGhlIHJlYWQgSW50MTZBcnJheS5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUucmVhZEludDE2QXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoLCBlKSB7XHJcbiAgICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyAodGhpcy5ieXRlTGVuZ3RoIC0gdGhpcy5wb3NpdGlvbikgLyAyIDogbGVuZ3RoO1xyXG4gICAgICAgIHZhciBhcnIgPSBuZXcgSW50MTZBcnJheShsZW5ndGgpO1xyXG4gICAgICAgIERhdGFTdHJlYW0ubWVtY3B5KGFyci5idWZmZXIsIDAsIHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBsZW5ndGggKiBhcnIuQllURVNfUEVSX0VMRU1FTlQpO1xyXG4gICAgICAgIERhdGFTdHJlYW0uYXJyYXlUb05hdGl2ZShhcnIsIGUgPT0gbnVsbCA/IHRoaXMuZW5kaWFubmVzcyA6IGUpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gYXJyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgUmVhZHMgYW4gSW50OEFycmF5IG9mIGRlc2lyZWQgbGVuZ3RoIGZyb20gdGhlIERhdGFTdHJlYW0uXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGxlbmd0aCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gbWFwLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBkYXRhIHRvIHJlYWQuXHJcbiAgICAgIEByZXR1cm4gVGhlIHJlYWQgSW50OEFycmF5LlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkSW50OEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xyXG4gICAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gKHRoaXMuYnl0ZUxlbmd0aCAtIHRoaXMucG9zaXRpb24pIDogbGVuZ3RoO1xyXG4gICAgICAgIHZhciBhcnIgPSBuZXcgSW50OEFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgRGF0YVN0cmVhbS5tZW1jcHkoYXJyLmJ1ZmZlciwgMCwgdGhpcy5idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24sIGxlbmd0aCAqIGFyci5CWVRFU19QRVJfRUxFTUVOVCk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBhcnIuYnl0ZUxlbmd0aDtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBSZWFkcyBhIFVpbnQzMkFycmF5IG9mIGRlc2lyZWQgbGVuZ3RoIGFuZCBlbmRpYW5uZXNzIGZyb20gdGhlIERhdGFTdHJlYW0uXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGxlbmd0aCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gbWFwLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBkYXRhIHRvIHJlYWQuXHJcbiAgICAgIEByZXR1cm4gVGhlIHJlYWQgVWludDMyQXJyYXkuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLnJlYWRVaW50MzJBcnJheSA9IGZ1bmN0aW9uIChsZW5ndGgsIGUpIHtcclxuICAgICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/ICh0aGlzLmJ5dGVMZW5ndGggLSB0aGlzLnBvc2l0aW9uKSAvIDQgOiBsZW5ndGg7XHJcbiAgICAgICAgdmFyIGFyciA9IG5ldyBVaW50MzJBcnJheShsZW5ndGgpO1xyXG4gICAgICAgIERhdGFTdHJlYW0ubWVtY3B5KGFyci5idWZmZXIsIDAsIHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBsZW5ndGggKiBhcnIuQllURVNfUEVSX0VMRU1FTlQpO1xyXG4gICAgICAgIERhdGFTdHJlYW0uYXJyYXlUb05hdGl2ZShhcnIsIGUgPT0gbnVsbCA/IHRoaXMuZW5kaWFubmVzcyA6IGUpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gYXJyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgUmVhZHMgYSBVaW50MTZBcnJheSBvZiBkZXNpcmVkIGxlbmd0aCBhbmQgZW5kaWFubmVzcyBmcm9tIHRoZSBEYXRhU3RyZWFtLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBsZW5ndGggTnVtYmVyIG9mIGVsZW1lbnRzIHRvIG1hcC5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgZGF0YSB0byByZWFkLlxyXG4gICAgICBAcmV0dXJuIFRoZSByZWFkIFVpbnQxNkFycmF5LlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkVWludDE2QXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoLCBlKSB7XHJcbiAgICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyAodGhpcy5ieXRlTGVuZ3RoIC0gdGhpcy5wb3NpdGlvbikgLyAyIDogbGVuZ3RoO1xyXG4gICAgICAgIHZhciBhcnIgPSBuZXcgVWludDE2QXJyYXkobGVuZ3RoKTtcclxuICAgICAgICBEYXRhU3RyZWFtLm1lbWNweShhcnIuYnVmZmVyLCAwLCB0aGlzLmJ1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0ICsgdGhpcy5wb3NpdGlvbiwgbGVuZ3RoICogYXJyLkJZVEVTX1BFUl9FTEVNRU5UKTtcclxuICAgICAgICBEYXRhU3RyZWFtLmFycmF5VG9OYXRpdmUoYXJyLCBlID09IG51bGwgPyB0aGlzLmVuZGlhbm5lc3MgOiBlKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IGFyci5ieXRlTGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFJlYWRzIGEgVWludDhBcnJheSBvZiBkZXNpcmVkIGxlbmd0aCBmcm9tIHRoZSBEYXRhU3RyZWFtLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBsZW5ndGggTnVtYmVyIG9mIGVsZW1lbnRzIHRvIG1hcC5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgZGF0YSB0byByZWFkLlxyXG4gICAgICBAcmV0dXJuIFRoZSByZWFkIFVpbnQ4QXJyYXkuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLnJlYWRVaW50OEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCkge1xyXG4gICAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gKHRoaXMuYnl0ZUxlbmd0aCAtIHRoaXMucG9zaXRpb24pIDogbGVuZ3RoO1xyXG4gICAgICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShsZW5ndGgpO1xyXG4gICAgICAgIERhdGFTdHJlYW0ubWVtY3B5KGFyci5idWZmZXIsIDAsIHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBsZW5ndGggKiBhcnIuQllURVNfUEVSX0VMRU1FTlQpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gYXJyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAqIEBpbnRlcm5hbFxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkVG9VaW50OEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCwgYXJyLCBkc3RPZmZzZXQpIHtcclxuICAgICAgICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/ICh0aGlzLmJ5dGVMZW5ndGggLSB0aGlzLnBvc2l0aW9uKSA6IGxlbmd0aDtcclxuICAgICAgICBEYXRhU3RyZWFtLm1lbWNweShhcnIuYnVmZmVyLCBkc3RPZmZzZXQsIHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBsZW5ndGggKiBhcnIuQllURVNfUEVSX0VMRU1FTlQpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gYXJyLmJ5dGVMZW5ndGg7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFJlYWRzIGEgRmxvYXQ2NEFycmF5IG9mIGRlc2lyZWQgbGVuZ3RoIGFuZCBlbmRpYW5uZXNzIGZyb20gdGhlIERhdGFTdHJlYW0uXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGxlbmd0aCBOdW1iZXIgb2YgZWxlbWVudHMgdG8gbWFwLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBkYXRhIHRvIHJlYWQuXHJcbiAgICAgIEByZXR1cm4gVGhlIHJlYWQgRmxvYXQ2NEFycmF5LlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkRmxvYXQ2NEFycmF5ID0gZnVuY3Rpb24gKGxlbmd0aCwgZSkge1xyXG4gICAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gKHRoaXMuYnl0ZUxlbmd0aCAtIHRoaXMucG9zaXRpb24pIC8gOCA6IGxlbmd0aDtcclxuICAgICAgICB2YXIgYXJyID0gbmV3IEZsb2F0NjRBcnJheShsZW5ndGgpO1xyXG4gICAgICAgIERhdGFTdHJlYW0ubWVtY3B5KGFyci5idWZmZXIsIDAsIHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBsZW5ndGggKiBhcnIuQllURVNfUEVSX0VMRU1FTlQpO1xyXG4gICAgICAgIERhdGFTdHJlYW0uYXJyYXlUb05hdGl2ZShhcnIsIGUgPT0gbnVsbCA/IHRoaXMuZW5kaWFubmVzcyA6IGUpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gYXJyLmJ5dGVMZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgUmVhZHMgYSBGbG9hdDMyQXJyYXkgb2YgZGVzaXJlZCBsZW5ndGggYW5kIGVuZGlhbm5lc3MgZnJvbSB0aGUgRGF0YVN0cmVhbS5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gbGVuZ3RoIE51bWJlciBvZiBlbGVtZW50cyB0byBtYXAuXHJcbiAgICAgIEBwYXJhbSBlIEVuZGlhbm5lc3Mgb2YgdGhlIGRhdGEgdG8gcmVhZC5cclxuICAgICAgQHJldHVybiBUaGUgcmVhZCBGbG9hdDMyQXJyYXkuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLnJlYWRGbG9hdDMyQXJyYXkgPSBmdW5jdGlvbiAobGVuZ3RoLCBlKSB7XHJcbiAgICAgICAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyAodGhpcy5ieXRlTGVuZ3RoIC0gdGhpcy5wb3NpdGlvbikgLyA0IDogbGVuZ3RoO1xyXG4gICAgICAgIHZhciBhcnIgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgRGF0YVN0cmVhbS5tZW1jcHkoYXJyLmJ1ZmZlciwgMCwgdGhpcy5idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24sIGxlbmd0aCAqIGFyci5CWVRFU19QRVJfRUxFTUVOVCk7XHJcbiAgICAgICAgRGF0YVN0cmVhbS5hcnJheVRvTmF0aXZlKGFyciwgZSA9PSBudWxsID8gdGhpcy5lbmRpYW5uZXNzIDogZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBhcnIuYnl0ZUxlbmd0aDtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBXcml0ZXMgYW4gSW50MzJBcnJheSBvZiBzcGVjaWZpZWQgZW5kaWFubmVzcyB0byB0aGUgRGF0YVN0cmVhbS5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gYXJyIFRoZSBhcnJheSB0byB3cml0ZS5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgZGF0YSB0byB3cml0ZS5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUud3JpdGVJbnQzMkFycmF5ID0gZnVuY3Rpb24gKGFyciwgZSkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MoYXJyLmxlbmd0aCAqIDQpO1xyXG4gICAgICAgIGlmIChhcnIgaW5zdGFuY2VvZiBJbnQzMkFycmF5ICYmXHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24gJSBhcnIuQllURVNfUEVSX0VMRU1FTlQgPT0gMCkge1xyXG4gICAgICAgICAgICBEYXRhU3RyZWFtLm1lbWNweSh0aGlzLl9idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24sIGFyci5idWZmZXIsIDAsIGFyci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5tYXBJbnQzMkFycmF5KGFyci5sZW5ndGgsIGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVJbnQzMihhcnJbaV0sIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBXcml0ZXMgYW4gSW50MTZBcnJheSBvZiBzcGVjaWZpZWQgZW5kaWFubmVzcyB0byB0aGUgRGF0YVN0cmVhbS5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gYXJyIFRoZSBhcnJheSB0byB3cml0ZS5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgZGF0YSB0byB3cml0ZS5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUud3JpdGVJbnQxNkFycmF5ID0gZnVuY3Rpb24gKGFyciwgZSkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MoYXJyLmxlbmd0aCAqIDIpO1xyXG4gICAgICAgIGlmIChhcnIgaW5zdGFuY2VvZiBJbnQxNkFycmF5ICYmXHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24gJSBhcnIuQllURVNfUEVSX0VMRU1FTlQgPT0gMCkge1xyXG4gICAgICAgICAgICBEYXRhU3RyZWFtLm1lbWNweSh0aGlzLl9idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24sIGFyci5idWZmZXIsIDAsIGFyci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5tYXBJbnQxNkFycmF5KGFyci5sZW5ndGgsIGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVJbnQxNihhcnJbaV0sIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBXcml0ZXMgYW4gSW50OEFycmF5IHRvIHRoZSBEYXRhU3RyZWFtLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBhcnIgVGhlIGFycmF5IHRvIHdyaXRlLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS53cml0ZUludDhBcnJheSA9IGZ1bmN0aW9uIChhcnIpIHtcclxuICAgICAgICB0aGlzLl9yZWFsbG9jKGFyci5sZW5ndGggKiAxKTtcclxuICAgICAgICBpZiAoYXJyIGluc3RhbmNlb2YgSW50OEFycmF5ICYmXHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24gJSBhcnIuQllURVNfUEVSX0VMRU1FTlQgPT0gMCkge1xyXG4gICAgICAgICAgICBEYXRhU3RyZWFtLm1lbWNweSh0aGlzLl9idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24sIGFyci5idWZmZXIsIDAsIGFyci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5tYXBJbnQ4QXJyYXkoYXJyLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUludDgoYXJyW2ldKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgV3JpdGVzIGEgVWludDMyQXJyYXkgb2Ygc3BlY2lmaWVkIGVuZGlhbm5lc3MgdG8gdGhlIERhdGFTdHJlYW0uXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGFyciBUaGUgYXJyYXkgdG8gd3JpdGUuXHJcbiAgICAgIEBwYXJhbSBlIEVuZGlhbm5lc3Mgb2YgdGhlIGRhdGEgdG8gd3JpdGUuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLndyaXRlVWludDMyQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCBlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbGxvYyhhcnIubGVuZ3RoICogNCk7XHJcbiAgICAgICAgaWYgKGFyciBpbnN0YW5jZW9mIFVpbnQzMkFycmF5ICYmXHJcbiAgICAgICAgICAgIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24gJSBhcnIuQllURVNfUEVSX0VMRU1FTlQgPT0gMCkge1xyXG4gICAgICAgICAgICBEYXRhU3RyZWFtLm1lbWNweSh0aGlzLl9idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMucG9zaXRpb24sIGFyci5idWZmZXIsIDAsIGFyci5ieXRlTGVuZ3RoKTtcclxuICAgICAgICAgICAgdGhpcy5tYXBVaW50MzJBcnJheShhcnIubGVuZ3RoLCBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlVWludDMyKGFycltpXSwgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFdyaXRlcyBhIFVpbnQxNkFycmF5IG9mIHNwZWNpZmllZCBlbmRpYW5uZXNzIHRvIHRoZSBEYXRhU3RyZWFtLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBhcnIgVGhlIGFycmF5IHRvIHdyaXRlLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBkYXRhIHRvIHdyaXRlLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS53cml0ZVVpbnQxNkFycmF5ID0gZnVuY3Rpb24gKGFyciwgZSkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MoYXJyLmxlbmd0aCAqIDIpO1xyXG4gICAgICAgIGlmIChhcnIgaW5zdGFuY2VvZiBVaW50MTZBcnJheSAmJlxyXG4gICAgICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uICUgYXJyLkJZVEVTX1BFUl9FTEVNRU5UID09IDApIHtcclxuICAgICAgICAgICAgRGF0YVN0cmVhbS5tZW1jcHkodGhpcy5fYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBhcnIuYnVmZmVyLCAwLCBhcnIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwVWludDE2QXJyYXkoYXJyLmxlbmd0aCwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQxNihhcnJbaV0sIGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBXcml0ZXMgYSBVaW50OEFycmF5IHRvIHRoZSBEYXRhU3RyZWFtLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBhcnIgVGhlIGFycmF5IHRvIHdyaXRlLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS53cml0ZVVpbnQ4QXJyYXkgPSBmdW5jdGlvbiAoYXJyKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbGxvYyhhcnIubGVuZ3RoICogMSk7XHJcbiAgICAgICAgaWYgKGFyciBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiZcclxuICAgICAgICAgICAgdGhpcy5ieXRlT2Zmc2V0ICsgdGhpcy5wb3NpdGlvbiAlIGFyci5CWVRFU19QRVJfRUxFTUVOVCA9PSAwKSB7XHJcbiAgICAgICAgICAgIERhdGFTdHJlYW0ubWVtY3B5KHRoaXMuX2J1ZmZlciwgdGhpcy5ieXRlT2Zmc2V0ICsgdGhpcy5wb3NpdGlvbiwgYXJyLmJ1ZmZlciwgMCwgYXJyLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICB0aGlzLm1hcFVpbnQ4QXJyYXkoYXJyLmxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQ4KGFycltpXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFdyaXRlcyBhIEZsb2F0NjRBcnJheSBvZiBzcGVjaWZpZWQgZW5kaWFubmVzcyB0byB0aGUgRGF0YVN0cmVhbS5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gYXJyIFRoZSBhcnJheSB0byB3cml0ZS5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgZGF0YSB0byB3cml0ZS5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUud3JpdGVGbG9hdDY0QXJyYXkgPSBmdW5jdGlvbiAoYXJyLCBlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbGxvYyhhcnIubGVuZ3RoICogOCk7XHJcbiAgICAgICAgaWYgKGFyciBpbnN0YW5jZW9mIEZsb2F0NjRBcnJheSAmJlxyXG4gICAgICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uICUgYXJyLkJZVEVTX1BFUl9FTEVNRU5UID09IDApIHtcclxuICAgICAgICAgICAgRGF0YVN0cmVhbS5tZW1jcHkodGhpcy5fYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBhcnIuYnVmZmVyLCAwLCBhcnIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwRmxvYXQ2NEFycmF5KGFyci5sZW5ndGgsIGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVGbG9hdDY0KGFycltpXSwgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFdyaXRlcyBhIEZsb2F0MzJBcnJheSBvZiBzcGVjaWZpZWQgZW5kaWFubmVzcyB0byB0aGUgRGF0YVN0cmVhbS5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gYXJyIFRoZSBhcnJheSB0byB3cml0ZS5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgZGF0YSB0byB3cml0ZS5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUud3JpdGVGbG9hdDMyQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCBlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbGxvYyhhcnIubGVuZ3RoICogNCk7XHJcbiAgICAgICAgaWYgKGFyciBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheSAmJlxyXG4gICAgICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uICUgYXJyLkJZVEVTX1BFUl9FTEVNRU5UID09IDApIHtcclxuICAgICAgICAgICAgRGF0YVN0cmVhbS5tZW1jcHkodGhpcy5fYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQgKyB0aGlzLnBvc2l0aW9uLCBhcnIuYnVmZmVyLCAwLCBhcnIuYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFwRmxvYXQzMkFycmF5KGFyci5sZW5ndGgsIGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVGbG9hdDMyKGFycltpXSwgZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFJlYWRzIGEgMzItYml0IGludCBmcm9tIHRoZSBEYXRhU3RyZWFtIHdpdGggdGhlIGRlc2lyZWQgZW5kaWFubmVzcy5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBudW1iZXIuXHJcbiAgICAgIEByZXR1cm4gVGhlIHJlYWQgbnVtYmVyLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkSW50MzIgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciB2ID0gdGhpcy5fZGF0YVZpZXcuZ2V0SW50MzIodGhpcy5wb3NpdGlvbiwgZSA9PSBudWxsID8gdGhpcy5lbmRpYW5uZXNzIDogZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSA0O1xyXG4gICAgICAgIHJldHVybiB2O1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgIFJlYWRzIGEgMzItYml0IGludCBmcm9tIHRoZSBEYXRhU3RyZWFtIHdpdGggdGhlIG9mZnNldC5cclxuICAgIFxyXG4gICAgIEBwYXJhbSBvZmZzZXQgVGhlIG9mZnNldC5cclxuICAgICBAcmV0dXJuIFRoZSByZWFkIG51bWJlci5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUucmVhZEludCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLnNlZWsob2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWFkSW50MzIoKTtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgUmVhZHMgYSAxNi1iaXQgaW50IGZyb20gdGhlIERhdGFTdHJlYW0gd2l0aCB0aGUgZGVzaXJlZCBlbmRpYW5uZXNzLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBlIEVuZGlhbm5lc3Mgb2YgdGhlIG51bWJlci5cclxuICAgICAgQHJldHVybiBUaGUgcmVhZCBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLnJlYWRJbnQxNiA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIHYgPSB0aGlzLl9kYXRhVmlldy5nZXRJbnQxNih0aGlzLnBvc2l0aW9uLCBlID09IG51bGwgPyB0aGlzLmVuZGlhbm5lc3MgOiBlKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDI7XHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgUmVhZHMgYSAxNi1iaXQgaW50IGZyb20gdGhlIERhdGFTdHJlYW0gd2l0aCB0aGUgb2Zmc2V0XHJcbiAgICBcclxuICAgICBAcGFyYW0gb2Zmc2V0IFRoZSBvZmZzZXQuXHJcbiAgICAgQHJldHVybiBUaGUgcmVhZCBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLnJlYWRTaG9ydCA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLnNlZWsob2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWFkSW50MTYoKTtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgUmVhZHMgYW4gOC1iaXQgaW50IGZyb20gdGhlIERhdGFTdHJlYW0uXHJcbiAgICBcclxuICAgICAgQHJldHVybiBUaGUgcmVhZCBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2ID0gdGhpcy5fZGF0YVZpZXcuZ2V0SW50OCh0aGlzLnBvc2l0aW9uKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDE7XHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgUmVhZHMgYW4gOC1iaXQgaW50IGZyb20gdGhlIERhdGFTdHJlYW0gd2l0aCB0aGUgb2Zmc2V0LlxyXG4gICAgXHJcbiAgICAgQHBhcmFtIG9mZnNldCBUaGUgb2Zmc2V0LlxyXG4gICAgIEByZXR1cm4gVGhlIHJlYWQgbnVtYmVyLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkQnl0ZSA9IGZ1bmN0aW9uIChvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLnNlZWsob2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWFkSW50OCgpO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBSZWFkcyBhIDMyLWJpdCB1bnNpZ25lZCBpbnQgZnJvbSB0aGUgRGF0YVN0cmVhbSB3aXRoIHRoZSBkZXNpcmVkIGVuZGlhbm5lc3MuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgbnVtYmVyLlxyXG4gICAgICBAcmV0dXJuIFRoZSByZWFkIG51bWJlci5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUucmVhZFVpbnQzMiA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIHYgPSB0aGlzLl9kYXRhVmlldy5nZXRVaW50MzIodGhpcy5wb3NpdGlvbiwgZSA9PSBudWxsID8gdGhpcy5lbmRpYW5uZXNzIDogZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSA0O1xyXG4gICAgICAgIHJldHVybiB2O1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBSZWFkcyBhIDE2LWJpdCB1bnNpZ25lZCBpbnQgZnJvbSB0aGUgRGF0YVN0cmVhbSB3aXRoIHRoZSBkZXNpcmVkIGVuZGlhbm5lc3MuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgbnVtYmVyLlxyXG4gICAgICBAcmV0dXJuIFRoZSByZWFkIG51bWJlci5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUucmVhZFVpbnQxNiA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIHYgPSB0aGlzLl9kYXRhVmlldy5nZXRVaW50MTYodGhpcy5wb3NpdGlvbiwgZSA9PSBudWxsID8gdGhpcy5lbmRpYW5uZXNzIDogZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAyO1xyXG4gICAgICAgIHJldHVybiB2O1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBSZWFkcyBhbiA4LWJpdCB1bnNpZ25lZCBpbnQgZnJvbSB0aGUgRGF0YVN0cmVhbS5cclxuICAgIFxyXG4gICAgICBAcmV0dXJuIFRoZSByZWFkIG51bWJlci5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUucmVhZFVpbnQ4ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2ID0gdGhpcy5fZGF0YVZpZXcuZ2V0VWludDgodGhpcy5wb3NpdGlvbik7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAxO1xyXG4gICAgICAgIHJldHVybiB2O1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBSZWFkcyBhIDMyLWJpdCBmbG9hdCBmcm9tIHRoZSBEYXRhU3RyZWFtIHdpdGggdGhlIGRlc2lyZWQgZW5kaWFubmVzcy5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBudW1iZXIuXHJcbiAgICAgIEByZXR1cm4gVGhlIHJlYWQgbnVtYmVyLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkRmxvYXQzMiA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgdmFyIHYgPSB0aGlzLl9kYXRhVmlldy5nZXRGbG9hdDMyKHRoaXMucG9zaXRpb24sIGUgPT0gbnVsbCA/IHRoaXMuZW5kaWFubmVzcyA6IGUpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gNDtcclxuICAgICAgICByZXR1cm4gdjtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgUmVhZHMgYSA2NC1iaXQgZmxvYXQgZnJvbSB0aGUgRGF0YVN0cmVhbSB3aXRoIHRoZSBkZXNpcmVkIGVuZGlhbm5lc3MuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgbnVtYmVyLlxyXG4gICAgICBAcmV0dXJuIFRoZSByZWFkIG51bWJlci5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUucmVhZEZsb2F0NjQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgIHZhciB2ID0gdGhpcy5fZGF0YVZpZXcuZ2V0RmxvYXQ2NCh0aGlzLnBvc2l0aW9uLCBlID09IG51bGwgPyB0aGlzLmVuZGlhbm5lc3MgOiBlKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDg7XHJcbiAgICAgICAgcmV0dXJuIHY7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFdyaXRlcyBhIDMyLWJpdCBpbnQgdG8gdGhlIERhdGFTdHJlYW0gd2l0aCB0aGUgZGVzaXJlZCBlbmRpYW5uZXNzLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSB2IE51bWJlciB0byB3cml0ZS5cclxuICAgICAgQHBhcmFtIGUgRW5kaWFubmVzcyBvZiB0aGUgbnVtYmVyLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS53cml0ZUludDMyID0gZnVuY3Rpb24gKHYsIGUpIHtcclxuICAgICAgICB0aGlzLl9yZWFsbG9jKDQpO1xyXG4gICAgICAgIHRoaXMuX2RhdGFWaWV3LnNldEludDMyKHRoaXMucG9zaXRpb24sIHYsIGUgPT0gbnVsbCA/IHRoaXMuZW5kaWFubmVzcyA6IGUpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gNDtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgV3JpdGVzIGEgMTYtYml0IGludCB0byB0aGUgRGF0YVN0cmVhbSB3aXRoIHRoZSBkZXNpcmVkIGVuZGlhbm5lc3MuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIHYgTnVtYmVyIHRvIHdyaXRlLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLndyaXRlSW50MTYgPSBmdW5jdGlvbiAodiwgZSkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MoMik7XHJcbiAgICAgICAgdGhpcy5fZGF0YVZpZXcuc2V0SW50MTYodGhpcy5wb3NpdGlvbiwgdiwgZSA9PSBudWxsID8gdGhpcy5lbmRpYW5uZXNzIDogZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAyO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBXcml0ZXMgYW4gOC1iaXQgaW50IHRvIHRoZSBEYXRhU3RyZWFtLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSB2IE51bWJlciB0byB3cml0ZS5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICB0aGlzLl9yZWFsbG9jKDEpO1xyXG4gICAgICAgIHRoaXMuX2RhdGFWaWV3LnNldEludDgodGhpcy5wb3NpdGlvbiwgdik7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAxO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBXcml0ZXMgYSAzMi1iaXQgdW5zaWduZWQgaW50IHRvIHRoZSBEYXRhU3RyZWFtIHdpdGggdGhlIGRlc2lyZWQgZW5kaWFubmVzcy5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gdiBOdW1iZXIgdG8gd3JpdGUuXHJcbiAgICAgIEBwYXJhbSBlIEVuZGlhbm5lc3Mgb2YgdGhlIG51bWJlci5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUud3JpdGVVaW50MzIgPSBmdW5jdGlvbiAodiwgZSkge1xyXG4gICAgICAgIHRoaXMuX3JlYWxsb2MoNCk7XHJcbiAgICAgICAgdGhpcy5fZGF0YVZpZXcuc2V0VWludDMyKHRoaXMucG9zaXRpb24sIHYsIGUgPT0gbnVsbCA/IHRoaXMuZW5kaWFubmVzcyA6IGUpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gNDtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgV3JpdGVzIGEgMTYtYml0IHVuc2lnbmVkIGludCB0byB0aGUgRGF0YVN0cmVhbSB3aXRoIHRoZSBkZXNpcmVkIGVuZGlhbm5lc3MuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIHYgTnVtYmVyIHRvIHdyaXRlLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLndyaXRlVWludDE2ID0gZnVuY3Rpb24gKHYsIGUpIHtcclxuICAgICAgICB0aGlzLl9yZWFsbG9jKDIpO1xyXG4gICAgICAgIHRoaXMuX2RhdGFWaWV3LnNldFVpbnQxNih0aGlzLnBvc2l0aW9uLCB2LCBlID09IG51bGwgPyB0aGlzLmVuZGlhbm5lc3MgOiBlKTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDI7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFdyaXRlcyBhbiA4LWJpdCB1bnNpZ25lZCAgaW50IHRvIHRoZSBEYXRhU3RyZWFtLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSB2IE51bWJlciB0byB3cml0ZS5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUud3JpdGVVaW50OCA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbGxvYygxKTtcclxuICAgICAgICB0aGlzLl9kYXRhVmlldy5zZXRVaW50OCh0aGlzLnBvc2l0aW9uLCB2KTtcclxuICAgICAgICB0aGlzLnBvc2l0aW9uICs9IDE7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFdyaXRlcyBhIDMyLWJpdCBmbG9hdCB0byB0aGUgRGF0YVN0cmVhbSB3aXRoIHRoZSBkZXNpcmVkIGVuZGlhbm5lc3MuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIHYgTnVtYmVyIHRvIHdyaXRlLlxyXG4gICAgICBAcGFyYW0gZSBFbmRpYW5uZXNzIG9mIHRoZSBudW1iZXIuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLndyaXRlRmxvYXQzMiA9IGZ1bmN0aW9uICh2LCBlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbGxvYyg0KTtcclxuICAgICAgICB0aGlzLl9kYXRhVmlldy5zZXRGbG9hdDMyKHRoaXMucG9zaXRpb24sIHYsIGUgPT0gbnVsbCA/IHRoaXMuZW5kaWFubmVzcyA6IGUpO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gKz0gNDtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgV3JpdGVzIGEgNjQtYml0IGZsb2F0IHRvIHRoZSBEYXRhU3RyZWFtIHdpdGggdGhlIGRlc2lyZWQgZW5kaWFubmVzcy5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gdiBOdW1iZXIgdG8gd3JpdGUuXHJcbiAgICAgIEBwYXJhbSBlIEVuZGlhbm5lc3Mgb2YgdGhlIG51bWJlci5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUud3JpdGVGbG9hdDY0ID0gZnVuY3Rpb24gKHYsIGUpIHtcclxuICAgICAgICB0aGlzLl9yZWFsbG9jKDgpO1xyXG4gICAgICAgIHRoaXMuX2RhdGFWaWV3LnNldEZsb2F0NjQodGhpcy5wb3NpdGlvbiwgdiwgZSA9PSBudWxsID8gdGhpcy5lbmRpYW5uZXNzIDogZSk7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiArPSA4O1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBDb3BpZXMgYnl0ZUxlbmd0aCBieXRlcyBmcm9tIHRoZSBzcmMgYnVmZmVyIGF0IHNyY09mZnNldCB0byB0aGVcclxuICAgICAgZHN0IGJ1ZmZlciBhdCBkc3RPZmZzZXQuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGRzdCBEZXN0aW5hdGlvbiBBcnJheUJ1ZmZlciB0byB3cml0ZSB0by5cclxuICAgICAgQHBhcmFtIGRzdE9mZnNldCBPZmZzZXQgdG8gdGhlIGRlc3RpbmF0aW9uIEFycmF5QnVmZmVyLlxyXG4gICAgICBAcGFyYW0gc3JjIFNvdXJjZSBBcnJheUJ1ZmZlciB0byByZWFkIGZyb20uXHJcbiAgICAgIEBwYXJhbSBzcmNPZmZzZXQgT2Zmc2V0IHRvIHRoZSBzb3VyY2UgQXJyYXlCdWZmZXIuXHJcbiAgICAgIEBwYXJhbSBieXRlTGVuZ3RoIE51bWJlciBvZiBieXRlcyB0byBjb3B5LlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLm1lbWNweSA9IGZ1bmN0aW9uIChkc3QsIGRzdE9mZnNldCwgc3JjLCBzcmNPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcclxuICAgICAgICB2YXIgZHN0VTggPSBuZXcgVWludDhBcnJheShkc3QsIGRzdE9mZnNldCwgYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgdmFyIHNyY1U4ID0gbmV3IFVpbnQ4QXJyYXkoc3JjLCBzcmNPZmZzZXQsIGJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGRzdFU4LnNldChzcmNVOCk7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIENvbnZlcnRzIGFycmF5IHRvIG5hdGl2ZSBlbmRpYW5uZXNzIGluLXBsYWNlLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBhcnJheSBUeXBlZCBhcnJheSB0byBjb252ZXJ0LlxyXG4gICAgICBAcGFyYW0gYXJyYXlJc0xpdHRsZUVuZGlhbiBUcnVlIGlmIHRoZSBkYXRhIGluIHRoZSBhcnJheSBpc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl0dGxlLWVuZGlhbi4gU2V0IGZhbHNlIGZvciBiaWctZW5kaWFuLlxyXG4gICAgICBAcmV0dXJuIFRoZSBjb252ZXJ0ZWQgdHlwZWQgYXJyYXkuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0uYXJyYXlUb05hdGl2ZSA9IGZ1bmN0aW9uIChhcnJheSwgYXJyYXlJc0xpdHRsZUVuZGlhbikge1xyXG4gICAgICAgIGlmIChhcnJheUlzTGl0dGxlRW5kaWFuID09IHRoaXMuZW5kaWFubmVzcykge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mbGlwQXJyYXlFbmRpYW5uZXNzKGFycmF5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIENvbnZlcnRzIG5hdGl2ZSBlbmRpYW5uZXNzIGFycmF5IHRvIGRlc2lyZWQgZW5kaWFubmVzcyBpbi1wbGFjZS5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gYXJyYXkgVHlwZWQgYXJyYXkgdG8gY29udmVydC5cclxuICAgICAgQHBhcmFtIGxpdHRsZUVuZGlhbiBUcnVlIGlmIHRoZSBjb252ZXJ0ZWQgYXJyYXkgc2hvdWxkIGJlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpdHRsZS1lbmRpYW4uIFNldCBmYWxzZSBmb3IgYmlnLWVuZGlhbi5cclxuICAgICAgQHJldHVybiBUaGUgY29udmVydGVkIHR5cGVkIGFycmF5LlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLm5hdGl2ZVRvRW5kaWFuID0gZnVuY3Rpb24gKGFycmF5LCBsaXR0bGVFbmRpYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5lbmRpYW5uZXNzID09IGxpdHRsZUVuZGlhbikge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mbGlwQXJyYXlFbmRpYW5uZXNzKGFycmF5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIEZsaXBzIHR5cGVkIGFycmF5IGVuZGlhbm5lc3MgaW4tcGxhY2UuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGFycmF5IFR5cGVkIGFycmF5IHRvIGZsaXAuXHJcbiAgICAgIEByZXR1cm4gVGhlIGNvbnZlcnRlZCB0eXBlZCBhcnJheS5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5mbGlwQXJyYXlFbmRpYW5uZXNzID0gZnVuY3Rpb24gKGFycmF5KSB7XHJcbiAgICAgICAgdmFyIHU4ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkuYnVmZmVyLCBhcnJheS5ieXRlT2Zmc2V0LCBhcnJheS5ieXRlTGVuZ3RoKTtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5LmJ5dGVMZW5ndGg7IGkgKz0gYXJyYXkuQllURVNfUEVSX0VMRU1FTlQpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGkgKyBhcnJheS5CWVRFU19QRVJfRUxFTUVOVCAtIDEsIGsgPSBpOyBqID4gazsgai0tLCBrKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB0bXAgPSB1OFtrXTtcclxuICAgICAgICAgICAgICAgIHU4W2tdID0gdThbal07XHJcbiAgICAgICAgICAgICAgICB1OFtqXSA9IHRtcDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIENyZWF0ZXMgYW4gYXJyYXkgZnJvbSBhbiBhcnJheSBvZiBjaGFyYWN0ZXIgY29kZXMuXHJcbiAgICAgIFVzZXMgU3RyaW5nLmZyb21DaGFyQ29kZSBvbiB0aGUgY2hhcmFjdGVyIGNvZGVzIGFuZCBjb25jYXRzIHRoZSByZXN1bHRzIGludG8gYSBzdHJpbmcuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGFycmF5IEFycmF5IG9mIGNoYXJhY3RlciBjb2Rlcy5cclxuICAgICAgQHJldHVybiBTdHJpbmcgY3JlYXRlZCBmcm9tIHRoZSBjaGFyYWN0ZXIgY29kZXMuXHJcbiAgICAqKi9cclxuICAgIERhdGFTdHJlYW0uY3JlYXRlU3RyaW5nRnJvbUFycmF5ID0gZnVuY3Rpb24gKGFycmF5KSB7XHJcbiAgICAgICAgdmFyIHN0ciA9IFwiXCI7XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBzdHIgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShhcnJheVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFJlYWRzIGEgc3RydWN0IG9mIGRhdGEgZnJvbSB0aGUgRGF0YVN0cmVhbS4gVGhlIHN0cnVjdCBpcyBkZWZpbmVkIGFzXHJcbiAgICAgIGEgZmxhdCBhcnJheSBvZiBbbmFtZSwgdHlwZV0tcGFpcnMuIFNlZSB0aGUgZXhhbXBsZSBiZWxvdzpcclxuICAgIFxyXG4gICAgICBkcy5yZWFkU3RydWN0KFtcclxuICAgICAgICAnaGVhZGVyVGFnJywgJ3VpbnQzMicsIC8vIFVpbnQzMiBpbiBEYXRhU3RyZWFtIGVuZGlhbm5lc3MuXHJcbiAgICAgICAgJ2hlYWRlclRhZzInLCAndWludDMyYmUnLCAvLyBCaWctZW5kaWFuIFVpbnQzMi5cclxuICAgICAgICAnaGVhZGVyVGFnMycsICd1aW50MzJsZScsIC8vIExpdHRsZS1lbmRpYW4gVWludDMyLlxyXG4gICAgICAgICdhcnJheScsIFsnW10nLCAndWludDMyJywgMTZdLCAvLyBVaW50MzJBcnJheSBvZiBsZW5ndGggMTYuXHJcbiAgICAgICAgJ2FycmF5Mkxlbmd0aCcsICd1aW50MzInLFxyXG4gICAgICAgICdhcnJheTInLCBbJ1tdJywgJ3VpbnQzMicsICdhcnJheTJMZW5ndGgnXSAvLyBVaW50MzJBcnJheSBvZiBsZW5ndGggYXJyYXkyTGVuZ3RoXHJcbiAgICAgIF0pO1xyXG4gICAgXHJcbiAgICAgIFRoZSBwb3NzaWJsZSB2YWx1ZXMgZm9yIHRoZSB0eXBlIGFyZSBhcyBmb2xsb3dzOlxyXG4gICAgXHJcbiAgICAgIC8vIE51bWJlciB0eXBlc1xyXG4gICAgXHJcbiAgICAgIC8vIFVuc3VmZml4ZWQgbnVtYmVyIHR5cGVzIHVzZSBEYXRhU3RyZWFtIGVuZGlhbm5lc3MuXHJcbiAgICAgIC8vIFRvIGV4cGxpY2l0bHkgc3BlY2lmeSBlbmRpYW5uZXNzLCBzdWZmaXggdGhlIHR5cGUgd2l0aFxyXG4gICAgICAvLyAnbGUnIGZvciBsaXR0bGUtZW5kaWFuIG9yICdiZScgZm9yIGJpZy1lbmRpYW4sXHJcbiAgICAgIC8vIGUuZy4gJ2ludDMyYmUnIGZvciBiaWctZW5kaWFuIGludDMyLlxyXG4gICAgXHJcbiAgICAgICd1aW50OCcgLS0gOC1iaXQgdW5zaWduZWQgaW50XHJcbiAgICAgICd1aW50MTYnIC0tIDE2LWJpdCB1bnNpZ25lZCBpbnRcclxuICAgICAgJ3VpbnQzMicgLS0gMzItYml0IHVuc2lnbmVkIGludFxyXG4gICAgICAnaW50OCcgLS0gOC1iaXQgaW50XHJcbiAgICAgICdpbnQxNicgLS0gMTYtYml0IGludFxyXG4gICAgICAnaW50MzInIC0tIDMyLWJpdCBpbnRcclxuICAgICAgJ2Zsb2F0MzInIC0tIDMyLWJpdCBmbG9hdFxyXG4gICAgICAnZmxvYXQ2NCcgLS0gNjQtYml0IGZsb2F0XHJcbiAgICBcclxuICAgICAgLy8gU3RyaW5nIHR5cGVzXHJcbiAgICAgICdjc3RyaW5nJyAtLSBBU0NJSSBzdHJpbmcgdGVybWluYXRlZCBieSBhIHplcm8gYnl0ZS5cclxuICAgICAgJ3N0cmluZzpOJyAtLSBBU0NJSSBzdHJpbmcgb2YgbGVuZ3RoIE4sIHdoZXJlIE4gaXMgYSBsaXRlcmFsIGludGVnZXIuXHJcbiAgICAgICdzdHJpbmc6dmFyaWFibGVOYW1lJyAtLSBBU0NJSSBzdHJpbmcgb2YgbGVuZ3RoICR2YXJpYWJsZU5hbWUsXHJcbiAgICAgICAgd2hlcmUgJ3ZhcmlhYmxlTmFtZScgaXMgYSBwcmV2aW91c2x5IHBhcnNlZCBudW1iZXIgaW4gdGhlIGN1cnJlbnQgc3RydWN0LlxyXG4gICAgICAnc3RyaW5nLENIQVJTRVQ6TicgLS0gU3RyaW5nIG9mIGJ5dGVMZW5ndGggTiBlbmNvZGVkIHdpdGggZ2l2ZW4gQ0hBUlNFVC5cclxuICAgICAgJ3UxNnN0cmluZzpOJyAtLSBVQ1MtMiBzdHJpbmcgb2YgbGVuZ3RoIE4gaW4gRGF0YVN0cmVhbSBlbmRpYW5uZXNzLlxyXG4gICAgICAndTE2c3RyaW5nbGU6TicgLS0gVUNTLTIgc3RyaW5nIG9mIGxlbmd0aCBOIGluIGxpdHRsZS1lbmRpYW4uXHJcbiAgICAgICd1MTZzdHJpbmdiZTpOJyAtLSBVQ1MtMiBzdHJpbmcgb2YgbGVuZ3RoIE4gaW4gYmlnLWVuZGlhbi5cclxuICAgIFxyXG4gICAgICAvLyBDb21wbGV4IHR5cGVzXHJcbiAgICAgIFtuYW1lLCB0eXBlLCBuYW1lXzIsIHR5cGVfMiwgLi4uLCBuYW1lX04sIHR5cGVfTl0gLS0gU3RydWN0XHJcbiAgICAgIGZ1bmN0aW9uKGRhdGFTdHJlYW0sIHN0cnVjdCkge30gLS0gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gcmVhZCBhbmQgcmV0dXJuIGRhdGEuXHJcbiAgICAgIHtnZXQ6IGZ1bmN0aW9uKGRhdGFTdHJlYW0sIHN0cnVjdCkge30sXHJcbiAgICAgICBzZXQ6IGZ1bmN0aW9uKGRhdGFTdHJlYW0sIHN0cnVjdCkge319XHJcbiAgICAgIC0tIEdldHRlci9zZXR0ZXIgZnVuY3Rpb25zIHRvIHJlYWQgYW5kIHJldHVybiBkYXRhLCBoYW5keSBmb3IgdXNpbmcgdGhlIHNhbWVcclxuICAgICAgICAgc3RydWN0IGRlZmluaXRpb24gZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgc3RydWN0cy5cclxuICAgICAgWydbXScsIHR5cGUsIGxlbmd0aF0gLS0gQXJyYXkgb2YgZ2l2ZW4gdHlwZSBhbmQgbGVuZ3RoLiBUaGUgbGVuZ3RoIGNhbiBiZSBlaXRoZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgbnVtYmVyLCBhIHN0cmluZyB0aGF0IHJlZmVyZW5jZXMgYSBwcmV2aW91c2x5LXJlYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLCBvciBhIGNhbGxiYWNrIGZ1bmN0aW9uKHN0cnVjdCwgZGF0YVN0cmVhbSwgdHlwZSl7fS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIElmIGxlbmd0aCBpcyAnKicsIHJlYWRzIGluIGFzIG1hbnkgZWxlbWVudHMgYXMgaXQgY2FuLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBzdHJ1Y3REZWZpbml0aW9uIFN0cnVjdCBkZWZpbml0aW9uIG9iamVjdC5cclxuICAgICAgQHJldHVybiBUaGUgcmVhZCBzdHJ1Y3QuIE51bGwgaWYgZmFpbGVkIHRvIHJlYWQgc3RydWN0LlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkU3RydWN0ID0gZnVuY3Rpb24gKHN0cnVjdERlZmluaXRpb24pIHtcclxuICAgICAgICB2YXIgc3RydWN0ID0ge30sIHQsIHYsIG47XHJcbiAgICAgICAgdmFyIHAgPSB0aGlzLnBvc2l0aW9uO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RydWN0RGVmaW5pdGlvbi5sZW5ndGg7IGkgKz0gMikge1xyXG4gICAgICAgICAgICB0ID0gc3RydWN0RGVmaW5pdGlvbltpICsgMV07XHJcbiAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRUeXBlKHQsIHN0cnVjdCk7XHJcbiAgICAgICAgICAgIGlmICh2ID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZhaWx1cmVQb3NpdGlvbiA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWlsdXJlUG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHA7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdHJ1Y3Rbc3RydWN0RGVmaW5pdGlvbltpXV0gPSB2O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RydWN0O1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBSZWFkIFVDUy0yIHN0cmluZyBvZiBkZXNpcmVkIGxlbmd0aCBhbmQgZW5kaWFubmVzcyBmcm9tIHRoZSBEYXRhU3RyZWFtLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBsZW5ndGggVGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nIHRvIHJlYWQuXHJcbiAgICAgIEBwYXJhbSBlbmRpYW5uZXNzIFRoZSBlbmRpYW5uZXNzIG9mIHRoZSBzdHJpbmcgZGF0YSBpbiB0aGUgRGF0YVN0cmVhbS5cclxuICAgICAgQHJldHVybiBUaGUgcmVhZCBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIERhdGFTdHJlYW0ucHJvdG90eXBlLnJlYWRVQ1MyU3RyaW5nID0gZnVuY3Rpb24gKGxlbmd0aCwgZW5kaWFubmVzcykge1xyXG4gICAgICAgIHJldHVybiBEYXRhU3RyZWFtLmNyZWF0ZVN0cmluZ0Zyb21BcnJheSh0aGlzLnJlYWRVaW50MTZBcnJheShsZW5ndGgsIGVuZGlhbm5lc3MpKTtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICBSZWFkIFVDUy0yIHN0cmluZyBvZiBkZXNpcmVkIGxlbmd0aCBhbmQgb2Zmc2V0IGZyb20gdGhlIERhdGFTdHJlYW0uXHJcbiAgICBcclxuICAgICBAcGFyYW0gb2Zmc2V0IFRoZSBvZmZzZXQuXHJcbiAgICAgQHBhcmFtIGxlbmd0aCBUaGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgdG8gcmVhZC5cclxuICAgICBAcmV0dXJuIFRoZSByZWFkIHN0cmluZy5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUucmVhZFN0cmluZ0F0ID0gZnVuY3Rpb24gKG9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICAgICAgdGhpcy5zZWVrKG9mZnNldCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFVDUzJTdHJpbmcobGVuZ3RoKTtcclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgV3JpdGUgYSBVQ1MtMiBzdHJpbmcgb2YgZGVzaXJlZCBlbmRpYW5uZXNzIHRvIHRoZSBEYXRhU3RyZWFtLiBUaGVcclxuICAgICAgbGVuZ3RoT3ZlcnJpZGUgYXJndW1lbnQgbGV0cyB5b3UgZGVmaW5lIHRoZSBudW1iZXIgb2YgY2hhcmFjdGVycyB0byB3cml0ZS5cclxuICAgICAgSWYgdGhlIHN0cmluZyBpcyBzaG9ydGVyIHRoYW4gbGVuZ3RoT3ZlcnJpZGUsIHRoZSBleHRyYSBzcGFjZSBpcyBwYWRkZWQgd2l0aFxyXG4gICAgICB6ZXJvZXMuXHJcbiAgICBcclxuICAgICAgQHBhcmFtIHN0ciBUaGUgc3RyaW5nIHRvIHdyaXRlLlxyXG4gICAgICBAcGFyYW0gZW5kaWFubmVzcyBUaGUgZW5kaWFubmVzcyB0byB1c2UgZm9yIHRoZSB3cml0dGVuIHN0cmluZyBkYXRhLlxyXG4gICAgICBAcGFyYW0gbGVuZ3RoT3ZlcnJpZGUgVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIHdyaXRlLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS53cml0ZVVDUzJTdHJpbmcgPSBmdW5jdGlvbiAoc3RyLCBlbmRpYW5uZXNzLCBsZW5ndGhPdmVycmlkZSkge1xyXG4gICAgICAgIGlmIChsZW5ndGhPdmVycmlkZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxlbmd0aE92ZXJyaWRlID0gc3RyLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoICYmIGkgPCBsZW5ndGhPdmVycmlkZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVVaW50MTYoc3RyLmNoYXJDb2RlQXQoaSksIGVuZGlhbm5lc3MpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aE92ZXJyaWRlOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQxNigwLCBlbmRpYW5uZXNzKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFJlYWQgYSBzdHJpbmcgb2YgZGVzaXJlZCBsZW5ndGggYW5kIGVuY29kaW5nIGZyb20gdGhlIERhdGFTdHJlYW0uXHJcbiAgICBcclxuICAgICAgQHBhcmFtIGxlbmd0aCBUaGUgbGVuZ3RoIG9mIHRoZSBzdHJpbmcgdG8gcmVhZCBpbiBieXRlcy5cclxuICAgICAgQHBhcmFtIGVuY29kaW5nIFRoZSBlbmNvZGluZyBvZiB0aGUgc3RyaW5nIGRhdGEgaW4gdGhlIERhdGFTdHJlYW0uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gQVNDSUkuXHJcbiAgICAgIEByZXR1cm4gVGhlIHJlYWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkU3RyaW5nID0gZnVuY3Rpb24gKGxlbmd0aCwgZW5jb2RpbmcpIHtcclxuICAgICAgICBpZiAoZW5jb2RpbmcgPT0gbnVsbCB8fCBlbmNvZGluZyA9PSBcIkFTQ0lJXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIERhdGFTdHJlYW0uY3JlYXRlU3RyaW5nRnJvbUFycmF5KHRoaXMubWFwVWludDhBcnJheShsZW5ndGggPT0gbnVsbCA/IHRoaXMuYnl0ZUxlbmd0aCAtIHRoaXMucG9zaXRpb24gOiBsZW5ndGgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpY29udi5kZWNvZGUodGhpcy5tYXBVaW50OEFycmF5KGxlbmd0aCksIGVuY29kaW5nKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIFdyaXRlcyBhIHN0cmluZyBvZiBkZXNpcmVkIGxlbmd0aCBhbmQgZW5jb2RpbmcgdG8gdGhlIERhdGFTdHJlYW0uXHJcbiAgICBcclxuICAgICAgQHBhcmFtIHMgVGhlIHN0cmluZyB0byB3cml0ZS5cclxuICAgICAgQHBhcmFtIGVuY29kaW5nIFRoZSBlbmNvZGluZyBmb3IgdGhlIHdyaXR0ZW4gc3RyaW5nIGRhdGEuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gQVNDSUkuXHJcbiAgICAgIEBwYXJhbSBsZW5ndGggVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIHdyaXRlLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS53cml0ZVN0cmluZyA9IGZ1bmN0aW9uIChzLCBlbmNvZGluZywgbGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKGVuY29kaW5nID09IG51bGwgfHwgZW5jb2RpbmcgPT0gXCJBU0NJSVwiKSB7XHJcbiAgICAgICAgICAgIGlmIChsZW5ndGggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKHMubGVuZ3RoLCBsZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQ4KHMuY2hhckNvZGVBdChpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQ4KDApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQ4KHMuY2hhckNvZGVBdChpKSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVVaW50OEFycmF5KGljb252LmVuY29kZShzLnN1YnN0cmluZygwLCBsZW5ndGgpLCBlbmNvZGluZykpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgUmVhZCBudWxsLXRlcm1pbmF0ZWQgc3RyaW5nIG9mIGRlc2lyZWQgbGVuZ3RoIGZyb20gdGhlIERhdGFTdHJlYW0uIFRydW5jYXRlc1xyXG4gICAgICB0aGUgcmV0dXJuZWQgc3RyaW5nIHNvIHRoYXQgdGhlIG51bGwgYnl0ZSBpcyBub3QgYSBwYXJ0IG9mIGl0LlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBsZW5ndGggVGhlIGxlbmd0aCBvZiB0aGUgc3RyaW5nIHRvIHJlYWQuXHJcbiAgICAgIEByZXR1cm4gVGhlIHJlYWQgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS5yZWFkQ1N0cmluZyA9IGZ1bmN0aW9uIChsZW5ndGgpIHtcclxuICAgICAgICB2YXIgYmxlbiA9IHRoaXMuYnl0ZUxlbmd0aCAtIHRoaXMucG9zaXRpb247XHJcbiAgICAgICAgdmFyIHU4ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5fYnVmZmVyLCB0aGlzLl9ieXRlT2Zmc2V0ICsgdGhpcy5wb3NpdGlvbik7XHJcbiAgICAgICAgdmFyIGxlbiA9IGJsZW47XHJcbiAgICAgICAgaWYgKGxlbmd0aCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGxlbiA9IE1hdGgubWluKGxlbmd0aCwgYmxlbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuICYmIHU4W2ldICE9IDA7IGkrKylcclxuICAgICAgICAgICAgOyAvLyBmaW5kIGZpcnN0IHplcm8gYnl0ZVxyXG4gICAgICAgIHZhciBzID0gRGF0YVN0cmVhbS5jcmVhdGVTdHJpbmdGcm9tQXJyYXkodGhpcy5tYXBVaW50OEFycmF5KGkpKTtcclxuICAgICAgICBpZiAobGVuZ3RoICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiArPSBsZW4gLSBpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChpICE9IGJsZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiArPSAxOyAvLyB0cmFpbGluZyB6ZXJvIGlmIG5vdCBhdCBlbmQgb2YgYnVmZmVyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzO1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBXcml0ZXMgYSBudWxsLXRlcm1pbmF0ZWQgc3RyaW5nIHRvIERhdGFTdHJlYW0gYW5kIHplcm8tcGFkcyBpdCB0byBsZW5ndGhcclxuICAgICAgYnl0ZXMuIElmIGxlbmd0aCBpcyBub3QgZ2l2ZW4sIHdyaXRlcyB0aGUgc3RyaW5nIGZvbGxvd2VkIGJ5IGEgemVyby5cclxuICAgICAgSWYgc3RyaW5nIGlzIGxvbmdlciB0aGFuIGxlbmd0aCwgdGhlIHdyaXR0ZW4gcGFydCBvZiB0aGUgc3RyaW5nIGRvZXMgbm90IGhhdmVcclxuICAgICAgYSB0cmFpbGluZyB6ZXJvLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBzIFRoZSBzdHJpbmcgdG8gd3JpdGUuXHJcbiAgICAgIEBwYXJhbSBsZW5ndGggVGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIHRvIHdyaXRlLlxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS53cml0ZUNTdHJpbmcgPSBmdW5jdGlvbiAocywgbGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKGxlbmd0aCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gMDtcclxuICAgICAgICAgICAgdmFyIGxlbiA9IE1hdGgubWluKHMubGVuZ3RoLCBsZW5ndGgpO1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVVaW50OChzLmNoYXJDb2RlQXQoaSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVVaW50OCgwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlVWludDgocy5jaGFyQ29kZUF0KGkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLndyaXRlVWludDgoMCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBSZWFkcyBhbiBvYmplY3Qgb2YgdHlwZSB0IGZyb20gdGhlIERhdGFTdHJlYW0sIHBhc3Npbmcgc3RydWN0IGFzIHRoZSB0aHVzLWZhclxyXG4gICAgICByZWFkIHN0cnVjdCB0byBwb3NzaWJsZSBjYWxsYmFja3MgdGhhdCByZWZlciB0byBpdC4gVXNlZCBieSByZWFkU3RydWN0IGZvclxyXG4gICAgICByZWFkaW5nIGluIHRoZSB2YWx1ZXMsIHNvIHRoZSB0eXBlIGlzIG9uZSBvZiB0aGUgcmVhZFN0cnVjdCB0eXBlcy5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gdCBUeXBlIG9mIHRoZSBvYmplY3QgdG8gcmVhZC5cclxuICAgICAgQHBhcmFtIHN0cnVjdCBTdHJ1Y3QgdG8gcmVmZXIgdG8gd2hlbiByZXNvbHZpbmcgbGVuZ3RoIHJlZmVyZW5jZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIGZvciBjYWxsaW5nIGNhbGxiYWNrcy5cclxuICAgICAgQHJldHVybiBSZXR1cm5zIHRoZSBvYmplY3Qgb24gc3VjY2Vzc2Z1bCByZWFkLCBudWxsIG9uIHVuc3VjY2Vzc2Z1bC5cclxuICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUucmVhZFR5cGUgPSBmdW5jdGlvbiAodCwgc3RydWN0KSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICByZXR1cm4gdCh0aGlzLCBzdHJ1Y3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgdCA9PSBcIm9iamVjdFwiICYmICEodCBpbnN0YW5jZW9mIEFycmF5KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5nZXQodGhpcywgc3RydWN0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodCBpbnN0YW5jZW9mIEFycmF5ICYmIHQubGVuZ3RoICE9IDMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVhZFN0cnVjdCh0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHYgPSBudWxsO1xyXG4gICAgICAgIHZhciBsZW5ndGhPdmVycmlkZSA9IG51bGw7XHJcbiAgICAgICAgdmFyIGNoYXJzZXQgPSBcIkFTQ0lJXCI7XHJcbiAgICAgICAgdmFyIHBvcyA9IHRoaXMucG9zaXRpb247XHJcbiAgICAgICAgdmFyIGxlbjtcclxuICAgICAgICBpZiAodHlwZW9mIHQgPT0gJ3N0cmluZycgJiYgLzovLnRlc3QodCkpIHtcclxuICAgICAgICAgICAgdmFyIHRwID0gdC5zcGxpdChcIjpcIik7XHJcbiAgICAgICAgICAgIHQgPSB0cFswXTtcclxuICAgICAgICAgICAgbGVuID0gdHBbMV07XHJcbiAgICAgICAgICAgIC8vIGFsbG93IGxlbmd0aCB0byBiZSBwcmV2aW91c2x5IHBhcnNlZCB2YXJpYWJsZVxyXG4gICAgICAgICAgICAvLyBlLmcuICdzdHJpbmc6ZmllbGRMZW5ndGgnLCBpZiBgZmllbGRMZW5ndGhgIGhhc1xyXG4gICAgICAgICAgICAvLyBiZWVuIHBhcnNlZCBwcmV2aW91c2x5LlxyXG4gICAgICAgICAgICBpZiAoc3RydWN0W2xlbl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgbGVuZ3RoT3ZlcnJpZGUgPSBwYXJzZUludChzdHJ1Y3RbbGVuXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBhc3N1bWUgbGl0ZXJhbCBpbnRlZ2VyIGUuZy4sICdzdHJpbmc6NCdcclxuICAgICAgICAgICAgICAgIGxlbmd0aE92ZXJyaWRlID0gcGFyc2VJbnQodHBbMV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2YgdCA9PSAnc3RyaW5nJyAmJiAvLC8udGVzdCh0KSkge1xyXG4gICAgICAgICAgICB2YXIgdHAgPSB0LnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgdCA9IHRwWzBdO1xyXG4gICAgICAgICAgICBjaGFyc2V0ID0gcGFyc2VJbnQodHBbMV0pLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHN3aXRjaCAodCkge1xyXG4gICAgICAgICAgICBjYXNlICd1aW50OCc6XHJcbiAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkVWludDgoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdpbnQ4JzpcclxuICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRJbnQ4KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDE2JzpcclxuICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRVaW50MTYodGhpcy5lbmRpYW5uZXNzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdpbnQxNic6XHJcbiAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkSW50MTYodGhpcy5lbmRpYW5uZXNzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd1aW50MzInOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZFVpbnQzMih0aGlzLmVuZGlhbm5lc3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDMyJzpcclxuICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRJbnQzMih0aGlzLmVuZGlhbm5lc3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Zsb2F0MzInOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZEZsb2F0MzIodGhpcy5lbmRpYW5uZXNzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdmbG9hdDY0JzpcclxuICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRGbG9hdDY0KHRoaXMuZW5kaWFubmVzcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDE2YmUnOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZFVpbnQxNihEYXRhU3RyZWFtLkJJR19FTkRJQU4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDE2YmUnOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZEludDE2KERhdGFTdHJlYW0uQklHX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDMyYmUnOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZFVpbnQzMihEYXRhU3RyZWFtLkJJR19FTkRJQU4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDMyYmUnOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZEludDMyKERhdGFTdHJlYW0uQklHX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZmxvYXQzMmJlJzpcclxuICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRGbG9hdDMyKERhdGFTdHJlYW0uQklHX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZmxvYXQ2NGJlJzpcclxuICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRGbG9hdDY0KERhdGFTdHJlYW0uQklHX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDE2bGUnOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZFVpbnQxNihEYXRhU3RyZWFtLkxJVFRMRV9FTkRJQU4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDE2bGUnOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZEludDE2KERhdGFTdHJlYW0uTElUVExFX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDMybGUnOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZFVpbnQzMihEYXRhU3RyZWFtLkxJVFRMRV9FTkRJQU4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDMybGUnOlxyXG4gICAgICAgICAgICAgICAgdiA9IHRoaXMucmVhZEludDMyKERhdGFTdHJlYW0uTElUVExFX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZmxvYXQzMmxlJzpcclxuICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRGbG9hdDMyKERhdGFTdHJlYW0uTElUVExFX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZmxvYXQ2NGxlJzpcclxuICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRGbG9hdDY0KERhdGFTdHJlYW0uTElUVExFX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnY3N0cmluZyc6XHJcbiAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkQ1N0cmluZyhsZW5ndGhPdmVycmlkZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRTdHJpbmcobGVuZ3RoT3ZlcnJpZGUsIGNoYXJzZXQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3UxNnN0cmluZyc6XHJcbiAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkVUNTMlN0cmluZyhsZW5ndGhPdmVycmlkZSwgdGhpcy5lbmRpYW5uZXNzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd1MTZzdHJpbmdsZSc6XHJcbiAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkVUNTMlN0cmluZyhsZW5ndGhPdmVycmlkZSwgRGF0YVN0cmVhbS5MSVRUTEVfRU5ESUFOKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd1MTZzdHJpbmdiZSc6XHJcbiAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkVUNTMlN0cmluZyhsZW5ndGhPdmVycmlkZSwgRGF0YVN0cmVhbS5CSUdfRU5ESUFOKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKHQubGVuZ3RoID09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGEgPSB0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW4gPSB0WzJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsZW5ndGggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbGVuID09ICdmdW5jdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gbGVuKHN0cnVjdCwgdGhpcywgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiBsZW4gPT0gJ3N0cmluZycgJiYgc3RydWN0W2xlbl0gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBwYXJzZUludChzdHJ1Y3RbbGVuXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGggPSBwYXJzZUludChsZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcCA9IHRhLnJlcGxhY2UoLyhsZXxiZSkkLywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kaWFubmVzcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvbGUkLy50ZXN0KHRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kaWFubmVzcyA9IERhdGFTdHJlYW0uTElUVExFX0VORElBTjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICgvYmUkLy50ZXN0KHRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kaWFubmVzcyA9IERhdGFTdHJlYW0uQklHX0VORElBTjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobGVuID09ICcqJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndWludDgnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRVaW50OEFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICd1aW50MTYnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRVaW50MTZBcnJheShsZW5ndGgsIGVuZGlhbm5lc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndWludDMyJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkVWludDMyQXJyYXkobGVuZ3RoLCBlbmRpYW5uZXNzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ludDgnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRJbnQ4QXJyYXkobGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ludDE2JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkSW50MTZBcnJheShsZW5ndGgsIGVuZGlhbm5lc3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaW50MzInOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSB0aGlzLnJlYWRJbnQzMkFycmF5KGxlbmd0aCwgZW5kaWFubmVzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmbG9hdDMyJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkRmxvYXQzMkFycmF5KGxlbmd0aCwgZW5kaWFubmVzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdmbG9hdDY0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gdGhpcy5yZWFkRmxvYXQ2NEFycmF5KGxlbmd0aCwgZW5kaWFubmVzcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjc3RyaW5nJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3V0ZjE2c3RyaW5nJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3N0cmluZyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxlbmd0aCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCF0aGlzLmlzRW9mKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1ID0gdGhpcy5yZWFkVHlwZSh0YSwgc3RydWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LnB1c2godSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBuZXcgQXJyYXkobGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdltpXSA9IHRoaXMucmVhZFR5cGUodGEsIHN0cnVjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZW4gPT0gJyonKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSB0aGlzLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvID0gdGhpcy5yZWFkVHlwZSh0YSwgc3RydWN0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LnB1c2gobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ID0gbmV3IEFycmF5KGxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHUgPSB0aGlzLnJlYWRUeXBlKHRhLCBzdHJ1Y3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1ID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZbaV0gPSB1O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobGVuZ3RoT3ZlcnJpZGUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gcG9zICsgbGVuZ3RoT3ZlcnJpZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB2O1xyXG4gICAgfTtcclxuICAgIDtcclxuICAgIC8qKlxyXG4gICAgICBXcml0ZXMgYSBzdHJ1Y3QgdG8gdGhlIERhdGFTdHJlYW0uIFRha2VzIGEgc3RydWN0RGVmaW5pdGlvbiB0aGF0IGdpdmVzIHRoZVxyXG4gICAgICB0eXBlcyBhbmQgYSBzdHJ1Y3Qgb2JqZWN0IHRoYXQgZ2l2ZXMgdGhlIHZhbHVlcy4gUmVmZXIgdG8gcmVhZFN0cnVjdCBmb3IgdGhlXHJcbiAgICAgIHN0cnVjdHVyZSBvZiBzdHJ1Y3REZWZpbml0aW9uLlxyXG4gICAgXHJcbiAgICAgIEBwYXJhbSBzdHJ1Y3REZWZpbml0aW9uIFR5cGUgZGVmaW5pdGlvbiBvZiB0aGUgc3RydWN0LlxyXG4gICAgICBAcGFyYW0gc3RydWN0IFRoZSBzdHJ1Y3QgZGF0YSBvYmplY3QuXHJcbiAgICAgICovXHJcbiAgICBEYXRhU3RyZWFtLnByb3RvdHlwZS53cml0ZVN0cnVjdCA9IGZ1bmN0aW9uIChzdHJ1Y3REZWZpbml0aW9uLCBzdHJ1Y3QpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cnVjdERlZmluaXRpb24ubGVuZ3RoOyBpICs9IDIpIHtcclxuICAgICAgICAgICAgdmFyIHQgPSBzdHJ1Y3REZWZpbml0aW9uW2kgKyAxXTtcclxuICAgICAgICAgICAgdGhpcy53cml0ZVR5cGUodCwgc3RydWN0W3N0cnVjdERlZmluaXRpb25baV1dLCBzdHJ1Y3QpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICA7XHJcbiAgICAvKipcclxuICAgICAgV3JpdGVzIG9iamVjdCB2IG9mIHR5cGUgdCB0byB0aGUgRGF0YVN0cmVhbS5cclxuICAgIFxyXG4gICAgICBAcGFyYW0gdCBUeXBlIG9mIGRhdGEgdG8gd3JpdGUuXHJcbiAgICAgIEBwYXJhbSB2IFZhbHVlIG9mIGRhdGEgdG8gd3JpdGUuXHJcbiAgICAgIEBwYXJhbSBzdHJ1Y3QgU3RydWN0IHRvIHBhc3MgdG8gd3JpdGUgY2FsbGJhY2sgZnVuY3Rpb25zLlxyXG4gICAgICAqL1xyXG4gICAgRGF0YVN0cmVhbS5wcm90b3R5cGUud3JpdGVUeXBlID0gZnVuY3Rpb24gKHQsIHYsIHN0cnVjdCkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgdCA9PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQodGhpcywgdik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0ID09IFwib2JqZWN0XCIgJiYgISh0IGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LnNldCh0aGlzLCB2LCBzdHJ1Y3QpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgbGVuZ3RoT3ZlcnJpZGUgPSBudWxsO1xyXG4gICAgICAgIHZhciBjaGFyc2V0ID0gXCJBU0NJSVwiO1xyXG4gICAgICAgIHZhciBwb3MgPSB0aGlzLnBvc2l0aW9uO1xyXG4gICAgICAgIGlmICh0eXBlb2YgKHQpID09ICdzdHJpbmcnICYmIC86Ly50ZXN0KHQpKSB7XHJcbiAgICAgICAgICAgIHZhciB0cCA9IHQuc3BsaXQoXCI6XCIpO1xyXG4gICAgICAgICAgICB0ID0gdHBbMF07XHJcbiAgICAgICAgICAgIGxlbmd0aE92ZXJyaWRlID0gcGFyc2VJbnQodHBbMV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHQgPT0gJ3N0cmluZycgJiYgLywvLnRlc3QodCkpIHtcclxuICAgICAgICAgICAgdmFyIHRwID0gdC5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgIHQgPSB0cFswXTtcclxuICAgICAgICAgICAgY2hhcnNldCA9IHBhcnNlSW50KHRwWzFdKS50b1N0cmluZygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKHQpIHtcclxuICAgICAgICAgICAgY2FzZSAndWludDgnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQ4KHYpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDgnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUludDgodik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDE2JzpcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVVaW50MTYodiwgdGhpcy5lbmRpYW5uZXNzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdpbnQxNic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlSW50MTYodiwgdGhpcy5lbmRpYW5uZXNzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd1aW50MzInOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQzMih2LCB0aGlzLmVuZGlhbm5lc3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDMyJzpcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVJbnQzMih2LCB0aGlzLmVuZGlhbm5lc3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Zsb2F0MzInOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUZsb2F0MzIodiwgdGhpcy5lbmRpYW5uZXNzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdmbG9hdDY0JzpcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVGbG9hdDY0KHYsIHRoaXMuZW5kaWFubmVzcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDE2YmUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQxNih2LCBEYXRhU3RyZWFtLkJJR19FTkRJQU4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDE2YmUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUludDE2KHYsIERhdGFTdHJlYW0uQklHX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDMyYmUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQzMih2LCBEYXRhU3RyZWFtLkJJR19FTkRJQU4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDMyYmUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUludDMyKHYsIERhdGFTdHJlYW0uQklHX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZmxvYXQzMmJlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVGbG9hdDMyKHYsIERhdGFTdHJlYW0uQklHX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZmxvYXQ2NGJlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVGbG9hdDY0KHYsIERhdGFTdHJlYW0uQklHX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDE2bGUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQxNih2LCBEYXRhU3RyZWFtLkxJVFRMRV9FTkRJQU4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDE2bGUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUludDE2KHYsIERhdGFTdHJlYW0uTElUVExFX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAndWludDMybGUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZVVpbnQzMih2LCBEYXRhU3RyZWFtLkxJVFRMRV9FTkRJQU4pO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2ludDMybGUnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUludDMyKHYsIERhdGFTdHJlYW0uTElUVExFX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZmxvYXQzMmxlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVGbG9hdDMyKHYsIERhdGFTdHJlYW0uTElUVExFX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZmxvYXQ2NGxlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVGbG9hdDY0KHYsIERhdGFTdHJlYW0uTElUVExFX0VORElBTik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnY3N0cmluZyc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlQ1N0cmluZyh2LCBsZW5ndGhPdmVycmlkZSk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnc3RyaW5nJzpcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVTdHJpbmcodiwgY2hhcnNldCwgbGVuZ3RoT3ZlcnJpZGUpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3UxNnN0cmluZyc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlVUNTMlN0cmluZyh2LCB0aGlzLmVuZGlhbm5lc3MsIGxlbmd0aE92ZXJyaWRlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd1MTZzdHJpbmdsZSc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlVUNTMlN0cmluZyh2LCBEYXRhU3RyZWFtLkxJVFRMRV9FTkRJQU4sIGxlbmd0aE92ZXJyaWRlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd1MTZzdHJpbmdiZSc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlVUNTMlN0cmluZyh2LCBEYXRhU3RyZWFtLkJJR19FTkRJQU4sIGxlbmd0aE92ZXJyaWRlKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgaWYgKHQubGVuZ3RoID09IDMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGEgPSB0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndyaXRlVHlwZSh0YSwgdltpXSwgdFsyXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZVN0cnVjdCh0LCB2KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGxlbmd0aE92ZXJyaWRlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvcztcclxuICAgICAgICAgICAgdGhpcy5fcmVhbGxvYyhsZW5ndGhPdmVycmlkZSk7XHJcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3MgKyBsZW5ndGhPdmVycmlkZTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgO1xyXG4gICAgLyoqXHJcbiAgICAgIEJpZy1lbmRpYW4gY29uc3QgdG8gdXNlIGFzIGRlZmF1bHQgZW5kaWFubmVzcy5cclxuICAgICAgKi9cclxuICAgIERhdGFTdHJlYW0uQklHX0VORElBTiA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgIExpdHRsZS1lbmRpYW4gY29uc3QgdG8gdXNlIGFzIGRlZmF1bHQgZW5kaWFubmVzcy5cclxuICAgICAgKi9cclxuICAgIERhdGFTdHJlYW0uTElUVExFX0VORElBTiA9IHRydWU7XHJcbiAgICAvKipcclxuICAgICAgTmF0aXZlIGVuZGlhbm5lc3MuIEVpdGhlciBEYXRhU3RyZWFtLkJJR19FTkRJQU4gb3IgRGF0YVN0cmVhbS5MSVRUTEVfRU5ESUFOXHJcbiAgICAgIGRlcGVuZGluZyBvbiB0aGUgcGxhdGZvcm0gZW5kaWFubmVzcy5cclxuICAgIFxyXG4gICAgICovXHJcbiAgICBEYXRhU3RyZWFtLmVuZGlhbm5lc3MgPSBuZXcgSW50OEFycmF5KG5ldyBJbnQxNkFycmF5KFsxXSkuYnVmZmVyKVswXSA+IDA7XHJcbiAgICByZXR1cm4gRGF0YVN0cmVhbTtcclxufSgpKTtcclxuZXhwb3J0cy5kZWZhdWx0ID0gRGF0YVN0cmVhbTtcclxuLyogRml4IGZvciBPcGVyYSAxMiBub3QgZGVmaW5pbmcgQllURVNfUEVSX0VMRU1FTlQgaW4gdHlwZWQgYXJyYXkgcHJvdG90eXBlcy4gKi9cclxuaWYgKFVpbnQ4QXJyYXkucHJvdG90eXBlLkJZVEVTX1BFUl9FTEVNRU5UID09PSB1bmRlZmluZWQpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFVpbnQ4QXJyYXkucHJvdG90eXBlLCB7IEJZVEVTX1BFUl9FTEVNRU5UOiB7IHZhbHVlOiBVaW50OEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIH0gfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhJbnQ4QXJyYXkucHJvdG90eXBlLCB7IEJZVEVTX1BFUl9FTEVNRU5UOiB7IHZhbHVlOiBJbnQ4QXJyYXkuQllURVNfUEVSX0VMRU1FTlQgfSB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFVpbnQ4Q2xhbXBlZEFycmF5LnByb3RvdHlwZSwgeyBCWVRFU19QRVJfRUxFTUVOVDogeyB2YWx1ZTogVWludDhDbGFtcGVkQXJyYXkuQllURVNfUEVSX0VMRU1FTlQgfSB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKFVpbnQxNkFycmF5LnByb3RvdHlwZSwgeyBCWVRFU19QRVJfRUxFTUVOVDogeyB2YWx1ZTogVWludDE2QXJyYXkuQllURVNfUEVSX0VMRU1FTlQgfSB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKEludDE2QXJyYXkucHJvdG90eXBlLCB7IEJZVEVTX1BFUl9FTEVNRU5UOiB7IHZhbHVlOiBJbnQxNkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIH0gfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhVaW50MzJBcnJheS5wcm90b3R5cGUsIHsgQllURVNfUEVSX0VMRU1FTlQ6IHsgdmFsdWU6IFVpbnQzMkFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIH0gfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhJbnQzMkFycmF5LnByb3RvdHlwZSwgeyBCWVRFU19QRVJfRUxFTUVOVDogeyB2YWx1ZTogSW50MzJBcnJheS5CWVRFU19QRVJfRUxFTUVOVCB9IH0pO1xyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoRmxvYXQ2NEFycmF5LnByb3RvdHlwZSwgeyBCWVRFU19QRVJfRUxFTUVOVDogeyB2YWx1ZTogRmxvYXQ2NEFycmF5LkJZVEVTX1BFUl9FTEVNRU5UIH0gfSk7XHJcbn1cclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/DataStream.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/EntryStreamParser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/EntryStreamParser.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.parse = void 0;\r\nvar DataStream_1 = __importDefault(__webpack_require__(/*! ./DataStream */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/DataStream.js\"));\r\n/**\r\n * @internal\r\n */\r\nfunction parse(array) {\r\n    var ds = new DataStream_1.default(array, 0, DataStream_1.default.LITTLE_ENDIAN);\r\n    var ret = [];\r\n    while (!ds.isEof()) {\r\n        var key = ds.readUint32();\r\n        var low = ds.readUint16();\r\n        var hi = ds.readUint16();\r\n        ret.push({\r\n            key: key,\r\n            isStringProperty: (low & 1) != 0,\r\n            guidIndex: (low >> 1) & 32767,\r\n            propertyIndex: hi,\r\n        });\r\n    }\r\n    return ret;\r\n}\r\nexports.parse = parse;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvRW50cnlTdHJlYW1QYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2IsbUNBQW1DLG1CQUFPLENBQUMsZ0ZBQWM7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tc2d0b2h0bWwvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvRW50cnlTdHJlYW1QYXJzZXIuanM/NjYzMyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnBhcnNlID0gdm9pZCAwO1xyXG52YXIgRGF0YVN0cmVhbV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL0RhdGFTdHJlYW1cIikpO1xyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZShhcnJheSkge1xyXG4gICAgdmFyIGRzID0gbmV3IERhdGFTdHJlYW1fMS5kZWZhdWx0KGFycmF5LCAwLCBEYXRhU3RyZWFtXzEuZGVmYXVsdC5MSVRUTEVfRU5ESUFOKTtcclxuICAgIHZhciByZXQgPSBbXTtcclxuICAgIHdoaWxlICghZHMuaXNFb2YoKSkge1xyXG4gICAgICAgIHZhciBrZXkgPSBkcy5yZWFkVWludDMyKCk7XHJcbiAgICAgICAgdmFyIGxvdyA9IGRzLnJlYWRVaW50MTYoKTtcclxuICAgICAgICB2YXIgaGkgPSBkcy5yZWFkVWludDE2KCk7XHJcbiAgICAgICAgcmV0LnB1c2goe1xyXG4gICAgICAgICAgICBrZXk6IGtleSxcclxuICAgICAgICAgICAgaXNTdHJpbmdQcm9wZXJ0eTogKGxvdyAmIDEpICE9IDAsXHJcbiAgICAgICAgICAgIGd1aWRJbmRleDogKGxvdyA+PiAxKSAmIDMyNzY3LFxyXG4gICAgICAgICAgICBwcm9wZXJ0eUluZGV4OiBoaSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbn1cclxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/EntryStreamParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/MsgReader.js":
/*!***********************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/MsgReader.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\n/* Copyright 2016 Yury Karpovich\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n/*\r\n MSG Reader\r\n */\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.OverrideFlags = exports.EndType = exports.CalendarType = exports.PatternType = exports.RecurFrequency = void 0;\r\nvar const_1 = __importDefault(__webpack_require__(/*! ./const */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/const.js\"));\r\nvar DataStream_1 = __importDefault(__webpack_require__(/*! ./DataStream */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/DataStream.js\"));\r\nvar Reader_1 = __webpack_require__(/*! ./Reader */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/Reader.js\");\r\nvar Burner_1 = __webpack_require__(/*! ./Burner */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/Burner.js\");\r\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/utils.js\");\r\nvar EntryStreamParser_1 = __webpack_require__(/*! ./EntryStreamParser */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/EntryStreamParser.js\");\r\nvar VerbStreamParser_1 = __webpack_require__(/*! ./VerbStreamParser */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/VerbStreamParser.js\");\r\nvar TZDEFINITIONParser_1 = __webpack_require__(/*! ./TZDEFINITIONParser */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/TZDEFINITIONParser.js\");\r\nvar TZREGParser_1 = __webpack_require__(/*! ./TZREGParser */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/TZREGParser.js\");\r\nvar AppointmentRecurParser_1 = __webpack_require__(/*! ./AppointmentRecurParser */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/AppointmentRecurParser.js\");\r\nvar AppointmentRecurParser_2 = __webpack_require__(/*! ./AppointmentRecurParser */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/AppointmentRecurParser.js\");\r\nObject.defineProperty(exports, \"RecurFrequency\", ({ enumerable: true, get: function () { return AppointmentRecurParser_2.RecurFrequency; } }));\r\nObject.defineProperty(exports, \"PatternType\", ({ enumerable: true, get: function () { return AppointmentRecurParser_2.PatternType; } }));\r\nObject.defineProperty(exports, \"CalendarType\", ({ enumerable: true, get: function () { return AppointmentRecurParser_2.CalendarType; } }));\r\nObject.defineProperty(exports, \"EndType\", ({ enumerable: true, get: function () { return AppointmentRecurParser_2.EndType; } }));\r\nObject.defineProperty(exports, \"OverrideFlags\", ({ enumerable: true, get: function () { return AppointmentRecurParser_2.OverrideFlags; } }));\r\n/**\r\n * CONST.MSG.PROP.TYPE_ENUM\r\n */\r\nvar TypeEnum;\r\n(function (TypeEnum) {\r\n    TypeEnum[TypeEnum[\"DIRECTORY\"] = 1] = \"DIRECTORY\";\r\n    TypeEnum[TypeEnum[\"DOCUMENT\"] = 2] = \"DOCUMENT\";\r\n    TypeEnum[TypeEnum[\"ROOT\"] = 5] = \"ROOT\";\r\n})(TypeEnum || (TypeEnum = {}));\r\nvar KeyType;\r\n(function (KeyType) {\r\n    KeyType[KeyType[\"root\"] = 0] = \"root\";\r\n    KeyType[KeyType[\"toSub\"] = 1] = \"toSub\";\r\n    KeyType[KeyType[\"named\"] = 2] = \"named\";\r\n})(KeyType || (KeyType = {}));\r\nfunction fileTimeToUnixEpoch(time) {\r\n    return (time - 116444736000000000) / 10000;\r\n}\r\n/**\r\n * The core implementation of MsgReader\r\n */\r\nvar MsgReader = /** @class */ (function () {\r\n    function MsgReader(arrayBuffer) {\r\n        this.reader = new Reader_1.Reader(arrayBuffer);\r\n    }\r\n    MsgReader.prototype.decodeField = function (fieldClass, fieldType, provider, ansiEncoding, insideProps) {\r\n        var array = provider();\r\n        var ds = new DataStream_1.default(array, 0, DataStream_1.default.LITTLE_ENDIAN);\r\n        var key = const_1.default.MSG.FIELD.FULL_NAME_MAPPING[\"\".concat(fieldClass).concat(fieldType)]\r\n            || const_1.default.MSG.FIELD.NAME_MAPPING[fieldClass];\r\n        var keyType = KeyType.root;\r\n        var propertySet = undefined;\r\n        var propertyLid = undefined;\r\n        var classValue = parseInt(\"0x\".concat(fieldClass));\r\n        if (classValue >= 0x8000) {\r\n            var keyed = this.privatePidToKeyed[classValue];\r\n            if (keyed) {\r\n                if (keyed.useName) {\r\n                    key = keyed.name;\r\n                    keyType = KeyType.named;\r\n                }\r\n                else {\r\n                    propertySet = keyed.propertySet;\r\n                    propertyLid = (0, utils_1.toHex4)(keyed.propertyLid);\r\n                    var lidDict = const_1.default.MSG.FIELD.PIDLID_MAPPING[keyed.propertySet];\r\n                    if (lidDict !== undefined) {\r\n                        var prop = lidDict[keyed.propertyLid];\r\n                        if (prop !== undefined) {\r\n                            if (prop.dispid !== undefined) {\r\n                                key = prop.dispid; // e.g. `votingResponse`\r\n                                keyType = KeyType.root;\r\n                            }\r\n                            else {\r\n                                key = prop.id; // e.g. `PidLidVerbStream` listed in SomeParsedOxProps\r\n                                keyType = KeyType.toSub;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        var value = array;\r\n        var skip = false;\r\n        var decodeAs = const_1.default.MSG.FIELD.TYPE_MAPPING[fieldType];\r\n        if (false) {}\r\n        else if (decodeAs === \"string\") {\r\n            value = ds.readString(array.length, ansiEncoding);\r\n            skip = insideProps;\r\n        }\r\n        else if (decodeAs === \"unicode\") {\r\n            value = ds.readUCS2String(array.length / 2);\r\n            skip = insideProps;\r\n        }\r\n        else if (decodeAs === \"binary\") {\r\n            skip = insideProps;\r\n        }\r\n        else if (decodeAs === \"integer\") {\r\n            value = ds.readUint32();\r\n        }\r\n        else if (decodeAs === \"boolean\") {\r\n            value = ds.readUint16() ? true : false;\r\n        }\r\n        else if (decodeAs === \"time\") {\r\n            var lo = ds.readUint32();\r\n            var fileTime = lo + (4294967296.0 * ds.readUint32());\r\n            value = new Date(fileTimeToUnixEpoch(fileTime)).toUTCString();\r\n        }\r\n        if (skip) {\r\n            key = undefined;\r\n        }\r\n        if (false) {}\r\n        else if (key === \"PidLidVerbStream\") {\r\n            key = \"votingOptions\";\r\n            keyType = KeyType.root;\r\n            value = (0, VerbStreamParser_1.parse)(ds);\r\n        }\r\n        else if ( false\r\n            || key === \"apptTZDefStartDisplay\"\r\n            || key === \"apptTZDefEndDisplay\"\r\n            || key === \"apptTZDefRecur\") {\r\n            keyType = KeyType.root;\r\n            value = (0, TZDEFINITIONParser_1.parse)(ds);\r\n        }\r\n        else if (key === \"timeZoneStruct\") {\r\n            value = (0, TZREGParser_1.parse)(ds);\r\n        }\r\n        else if (key === \"apptRecur\") {\r\n            try {\r\n                value = (0, AppointmentRecurParser_1.parse)(ds, ansiEncoding);\r\n            }\r\n            catch (ex) {\r\n                console.debug(ex);\r\n                // drop this data\r\n                key = undefined;\r\n            }\r\n        }\r\n        else if (key === \"recipType\") {\r\n            var MAPI_TO = 1;\r\n            var MAPI_CC = 2;\r\n            var MAPI_BCC = 3;\r\n            if (false) {}\r\n            else if (value === MAPI_TO) {\r\n                value = \"to\";\r\n            }\r\n            else if (value === MAPI_CC) {\r\n                value = \"cc\";\r\n            }\r\n            else if (value === MAPI_BCC) {\r\n                value = \"bcc\";\r\n            }\r\n        }\r\n        else if (key === \"globalAppointmentID\") {\r\n            value = (0, utils_1.bin2HexUpper)(ds);\r\n        }\r\n        var propertyTag = \"\".concat(fieldClass).concat(fieldType);\r\n        return { key: key, keyType: keyType, value: value, notForRawProp: skip, propertyTag: propertyTag, propertySet: propertySet, propertyLid: propertyLid, };\r\n    };\r\n    MsgReader.prototype.fieldsDataDocument = function (parserConfig, documentProperty, fields) {\r\n        var value = documentProperty.name.substring(12).toLowerCase();\r\n        var fieldClass = value.substring(0, 4);\r\n        var fieldType = value.substring(4, 8);\r\n        parserConfig.propertyObserver && parserConfig.propertyObserver(fields, parseInt(value.substring(0, 8), 16), documentProperty.provider());\r\n        if (fieldClass == const_1.default.MSG.FIELD.CLASS_MAPPING.ATTACHMENT_DATA) {\r\n            // attachment specific info\r\n            fields.dataId = documentProperty.dataId;\r\n            fields.contentLength = documentProperty.length;\r\n        }\r\n        else {\r\n            this.setDecodedFieldTo(parserConfig, fields, this.decodeField(fieldClass, fieldType, documentProperty.provider, parserConfig.ansiEncoding, false));\r\n        }\r\n    };\r\n    MsgReader.prototype.setDecodedFieldTo = function (parserConfig, fields, pair) {\r\n        var key = pair.key, keyType = pair.keyType, value = pair.value;\r\n        if (key !== undefined) {\r\n            if (keyType === KeyType.root) {\r\n                fields[key] = value;\r\n            }\r\n        }\r\n        if (parserConfig.includeRawProps === true) {\r\n            fields.rawProps = fields.rawProps || [];\r\n            if (!pair.notForRawProp) {\r\n                fields.rawProps.push({\r\n                    propertyTag: pair.propertyTag,\r\n                    propertySet: pair.propertySet,\r\n                    propertyLid: pair.propertyLid,\r\n                    propertyName: (pair.keyType === KeyType.named) ? pair.key : undefined,\r\n                    value: value,\r\n                });\r\n            }\r\n        }\r\n    };\r\n    MsgReader.prototype.getFieldType = function (fieldProperty) {\r\n        var value = fieldProperty.name.substring(12).toLowerCase();\r\n        return value.substring(4, 8);\r\n    };\r\n    MsgReader.prototype.fieldsDataDirInner = function (parserConfig, dirProperty, rootFolder, fields) {\r\n        var _this = this;\r\n        if (dirProperty.name.indexOf(const_1.default.MSG.FIELD.PREFIX.ATTACHMENT) == 0) {\r\n            // attachment\r\n            var attachmentField = {\r\n                dataType: \"attachment\",\r\n            };\r\n            fields.attachments.push(attachmentField);\r\n            this.fieldsDataDir(parserConfig, dirProperty, rootFolder, attachmentField, \"attachment\");\r\n        }\r\n        else if (dirProperty.name.indexOf(const_1.default.MSG.FIELD.PREFIX.RECIPIENT) == 0) {\r\n            // recipient\r\n            var recipientField = {\r\n                dataType: \"recipient\",\r\n            };\r\n            fields.recipients.push(recipientField);\r\n            this.fieldsDataDir(parserConfig, dirProperty, rootFolder, recipientField, \"recip\");\r\n        }\r\n        else if (dirProperty.name.indexOf(const_1.default.MSG.FIELD.PREFIX.NAMEID) == 0) {\r\n            // unknown, read\r\n            this.fieldsNameIdDir(parserConfig, dirProperty, rootFolder, fields);\r\n        }\r\n        else {\r\n            // other dir\r\n            var childFieldType = this.getFieldType(dirProperty);\r\n            if (childFieldType != const_1.default.MSG.FIELD.DIR_TYPE.INNER_MSG) {\r\n                // ignore\r\n            }\r\n            else {\r\n                var innerMsgContentFields = {\r\n                    dataType: \"msg\",\r\n                    attachments: [],\r\n                    recipients: [],\r\n                };\r\n                this.fieldsDataDir(parserConfig, dirProperty, rootFolder, innerMsgContentFields, \"sub\");\r\n                fields.innerMsgContentFields = innerMsgContentFields;\r\n                fields.innerMsgContent = true;\r\n                fields.folderId = dirProperty.dataId;\r\n                this.innerMsgBurners[dirProperty.dataId] = function () { return _this.burnMsg(dirProperty, rootFolder); };\r\n            }\r\n        }\r\n    };\r\n    MsgReader.prototype.burnMsg = function (folder, rootFolder) {\r\n        var entries = [\r\n            {\r\n                name: \"Root Entry\",\r\n                type: TypeEnum.ROOT,\r\n                children: [],\r\n                length: 0,\r\n            }\r\n        ];\r\n        this.registerFolder(entries, 0, folder, rootFolder, 0);\r\n        return (0, Burner_1.burn)(entries);\r\n    };\r\n    MsgReader.prototype.registerFolder = function (entries, index, folder, rootFolder, depth) {\r\n        var _loop_1 = function (set) {\r\n            var provider = set.provider, length_1 = set.length;\r\n            if (depth === 0 && set.name === \"__properties_version1.0\") {\r\n                var src = provider();\r\n                var dst_1 = new Uint8Array(src.length + 8);\r\n                dst_1.set(src.subarray(0, 24), 0);\r\n                dst_1.set(src.subarray(24), 32);\r\n                provider = function () { return dst_1; };\r\n                length_1 = dst_1.length;\r\n            }\r\n            var subIndex = entries.length;\r\n            entries[index].children.push(subIndex);\r\n            entries.push({\r\n                name: set.name,\r\n                type: TypeEnum.DOCUMENT,\r\n                binaryProvider: provider,\r\n                length: length_1,\r\n            });\r\n        };\r\n        for (var _i = 0, _a = folder.fileNameSets(); _i < _a.length; _i++) {\r\n            var set = _a[_i];\r\n            _loop_1(set);\r\n        }\r\n        if (depth === 0) {\r\n            // include root `__nameid_version1.0` folder.\r\n            var sources = rootFolder.subFolders()\r\n                .filter(function (it) { return it.name === const_1.default.MSG.FIELD.PREFIX.NAMEID; });\r\n            for (var _b = 0, sources_1 = sources; _b < sources_1.length; _b++) {\r\n                var source = sources_1[_b];\r\n                var subIndex = entries.length;\r\n                entries[index].children.push(subIndex);\r\n                entries.push({\r\n                    name: source.name,\r\n                    type: TypeEnum.DIRECTORY,\r\n                    children: [],\r\n                    length: 0,\r\n                });\r\n                this.registerFolder(entries, subIndex, source, rootFolder, depth + 1);\r\n            }\r\n        }\r\n        for (var _c = 0, _d = folder.subFolders(); _c < _d.length; _c++) {\r\n            var subFolder = _d[_c];\r\n            var subIndex = entries.length;\r\n            entries[index].children.push(subIndex);\r\n            entries.push({\r\n                name: subFolder.name,\r\n                type: TypeEnum.DIRECTORY,\r\n                children: [],\r\n                length: 0,\r\n            });\r\n            this.registerFolder(entries, subIndex, subFolder, rootFolder, depth + 1);\r\n        }\r\n    };\r\n    MsgReader.prototype.fieldsRecipAndAttachmentProperties = function (parserConfig, documentProperty, fields) {\r\n        var propertiesBinary = documentProperty.provider();\r\n        var propertiesDs = new DataStream_1.default(propertiesBinary, 8, DataStream_1.default.LITTLE_ENDIAN);\r\n        this.importPropertiesFromFile(parserConfig, propertiesDs, fields);\r\n    };\r\n    MsgReader.prototype.importPropertiesFromFile = function (parserConfig, propertiesDs, fields) {\r\n        // See: [MS-OXMSG]: Outlook Item (.msg) File Format, 2.4 Property Stream\r\n        // https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxmsg/20c1125f-043d-42d9-b1dc-cb9b7e5198ef\r\n        var typeConverters = {\r\n            0x0040: function (dataView) {\r\n                var fileTime = dataView.getUint32(0, true) + (4294967296.0 * dataView.getUint32(4, true));\r\n                return new Date(fileTimeToUnixEpoch(fileTime)).toUTCString();\r\n            },\r\n        };\r\n        var _loop_2 = function () {\r\n            var propertyTag = propertiesDs.readUint32();\r\n            if (propertyTag === 0) {\r\n                return \"break\";\r\n            }\r\n            var flags = propertiesDs.readUint32();\r\n            var arr = propertiesDs.readUint8Array(8);\r\n            parserConfig.propertyObserver(fields, propertyTag, arr);\r\n            var fieldClass = (0, utils_1.toHex2)((propertyTag / 65536) & 0xFFFF);\r\n            var fieldType = (0, utils_1.toHex2)(propertyTag & 0xFFFF);\r\n            this_1.setDecodedFieldTo(parserConfig, fields, this_1.decodeField(fieldClass, fieldType, function () { return arr; }, parserConfig.ansiEncoding, true));\r\n        };\r\n        var this_1 = this;\r\n        while (!propertiesDs.isEof()) {\r\n            var state_1 = _loop_2();\r\n            if (state_1 === \"break\")\r\n                break;\r\n        }\r\n    };\r\n    MsgReader.prototype.fieldsRootProperties = function (parserConfig, documentProperty, fields) {\r\n        var propertiesBinary = documentProperty.provider();\r\n        var propertiesDs = new DataStream_1.default(propertiesBinary, 32, DataStream_1.default.LITTLE_ENDIAN);\r\n        this.importPropertiesFromFile(parserConfig, propertiesDs, fields);\r\n    };\r\n    MsgReader.prototype.fieldsDataDir = function (parserConfig, dirProperty, rootFolder, fields, subClass) {\r\n        for (var _i = 0, _a = dirProperty.subFolders(); _i < _a.length; _i++) {\r\n            var subFolder = _a[_i];\r\n            this.fieldsDataDirInner(parserConfig, subFolder, rootFolder, fields);\r\n        }\r\n        for (var _b = 0, _c = dirProperty.fileNameSets(); _b < _c.length; _b++) {\r\n            var fileSet = _c[_b];\r\n            if (false) {}\r\n            else if (fileSet.name.indexOf(const_1.default.MSG.FIELD.PREFIX.DOCUMENT) == 0) {\r\n                this.fieldsDataDocument(parserConfig, fileSet, fields);\r\n            }\r\n            else if (fileSet.name === \"__properties_version1.0\") {\r\n                if (subClass === \"recip\" || subClass === \"attachment\" || subClass === \"sub\") {\r\n                    this.fieldsRecipAndAttachmentProperties(parserConfig, fileSet, fields);\r\n                }\r\n                else if (subClass === \"root\") {\r\n                    this.fieldsRootProperties(parserConfig, fileSet, fields);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    MsgReader.prototype.fieldsNameIdDir = function (parserConfig, dirProperty, rootFolder, fields) {\r\n        var guidTable = undefined;\r\n        var stringTable = undefined;\r\n        var entryTable = undefined;\r\n        for (var _i = 0, _a = dirProperty.fileNameSets(); _i < _a.length; _i++) {\r\n            var fileSet = _a[_i];\r\n            if (false) {}\r\n            else if (fileSet.name.indexOf(const_1.default.MSG.FIELD.PREFIX.DOCUMENT) == 0) {\r\n                var value = fileSet.name.substring(12).toLowerCase();\r\n                var fieldClass = value.substring(0, 4);\r\n                var fieldType = value.substring(4, 8);\r\n                if (false) {}\r\n                else if (fieldClass === \"0002\" && fieldType === \"0102\") {\r\n                    guidTable = fileSet.provider();\r\n                }\r\n                else if (fieldClass === \"0003\" && fieldType === \"0102\") {\r\n                    entryTable = fileSet.provider();\r\n                }\r\n                else if (fieldClass === \"0004\" && fieldType === \"0102\") {\r\n                    stringTable = fileSet.provider();\r\n                }\r\n            }\r\n        }\r\n        //console.log(\"%\", guidTable, stringTable, entryTable);\r\n        if (guidTable !== undefined && stringTable !== undefined && entryTable !== undefined) {\r\n            var entries = (0, EntryStreamParser_1.parse)(entryTable);\r\n            var stringReader = new DataStream_1.default(stringTable, 0, DataStream_1.default.LITTLE_ENDIAN);\r\n            for (var _b = 0, entries_1 = entries; _b < entries_1.length; _b++) {\r\n                var entry = entries_1[_b];\r\n                if (entry.isStringProperty) {\r\n                    stringReader.seek(entry.key);\r\n                    var numTextBytes = stringReader.readUint32();\r\n                    this.privatePidToKeyed[0x8000 | entry.propertyIndex] = {\r\n                        useName: true,\r\n                        name: stringReader.readUCS2String(numTextBytes / 2),\r\n                    };\r\n                }\r\n                else {\r\n                    this.privatePidToKeyed[0x8000 | entry.propertyIndex] = {\r\n                        useName: false,\r\n                        propertySet: (entry.guidIndex === 1) ? \"00020328-00000-0000-C000-00000000046\"\r\n                            : (entry.guidIndex === 2) ? \"00020329-00000-0000-C000-00000000046\"\r\n                                : (0, utils_1.msftUuidStringify)(guidTable, 16 * (entry.guidIndex - 3)),\r\n                        propertyLid: entry.key,\r\n                    };\r\n                }\r\n            }\r\n            //console.log(\"@\", this.privatePidToKeyed);\r\n        }\r\n    };\r\n    /**\r\n     * extract real fields\r\n     */\r\n    MsgReader.prototype.fieldsDataReader = function (parserConfig) {\r\n        var fields = {\r\n            dataType: \"msg\",\r\n            attachments: [],\r\n            recipients: []\r\n        };\r\n        this.fieldsDataDir(parserConfig, this.reader.rootFolder(), this.reader.rootFolder(), fields, \"root\");\r\n        return fields;\r\n    };\r\n    /**\r\n     * convert binary data to dictionary\r\n     */\r\n    MsgReader.prototype.parseMsgData = function (parserConfig) {\r\n        this.reader.parse();\r\n        return this.fieldsDataReader(parserConfig);\r\n    };\r\n    MsgReader.prototype.getFileData = function () {\r\n        var _a, _b, _c;\r\n        if (this.fieldsData === undefined) {\r\n            if (!this.reader.isMSGFile()) {\r\n                return {\r\n                    dataType: null,\r\n                    error: 'Unsupported file type!'\r\n                };\r\n            }\r\n            this.innerMsgBurners = {};\r\n            this.privatePidToKeyed = {};\r\n            this.fieldsData = this.parseMsgData({\r\n                propertyObserver: ((_a = this.parserConfig) === null || _a === void 0 ? void 0 : _a.propertyObserver) || (function () { }),\r\n                includeRawProps: ((_b = this.parserConfig) === null || _b === void 0 ? void 0 : _b.includeRawProps) ? true : false,\r\n                ansiEncoding: (0, utils_1.emptyToNull)((_c = this.parserConfig) === null || _c === void 0 ? void 0 : _c.ansiEncoding),\r\n            });\r\n        }\r\n        return this.fieldsData;\r\n    };\r\n    /**\r\n     Reads an attachment content by key/ID\r\n     \r\n      @return {Object} The attachment for specific attachment key\r\n      */\r\n    MsgReader.prototype.getAttachment = function (attach) {\r\n        var attachData = typeof attach === 'number' ? this.fieldsData.attachments[attach] : attach;\r\n        if (attachData.innerMsgContent === true && typeof attachData.folderId === \"number\") {\r\n            // embedded msg\r\n            return { fileName: attachData.name + \".msg\", content: this.innerMsgBurners[attachData.folderId]() };\r\n        }\r\n        else {\r\n            // raw attachment file\r\n            var fieldData = this.reader.readFileOf(attachData.dataId);\r\n            return { fileName: attachData.fileName, content: fieldData };\r\n        }\r\n    };\r\n    return MsgReader;\r\n}());\r\nexports[\"default\"] = MsgReader;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvTXNnUmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQixHQUFHLGVBQWUsR0FBRyxvQkFBb0IsR0FBRyxtQkFBbUIsR0FBRyxzQkFBc0I7QUFDN0csOEJBQThCLG1CQUFPLENBQUMsc0VBQVM7QUFDL0MsbUNBQW1DLG1CQUFPLENBQUMsZ0ZBQWM7QUFDekQsZUFBZSxtQkFBTyxDQUFDLHdFQUFVO0FBQ2pDLGVBQWUsbUJBQU8sQ0FBQyx3RUFBVTtBQUNqQyxjQUFjLG1CQUFPLENBQUMsc0VBQVM7QUFDL0IsMEJBQTBCLG1CQUFPLENBQUMsOEZBQXFCO0FBQ3ZELHlCQUF5QixtQkFBTyxDQUFDLDRGQUFvQjtBQUNyRCwyQkFBMkIsbUJBQU8sQ0FBQyxnR0FBc0I7QUFDekQsb0JBQW9CLG1CQUFPLENBQUMsa0ZBQWU7QUFDM0MsK0JBQStCLG1CQUFPLENBQUMsd0dBQTBCO0FBQ2pFLCtCQUErQixtQkFBTyxDQUFDLHdHQUEwQjtBQUNqRSxrREFBaUQsRUFBRSxxQ0FBcUMsbURBQW1ELEVBQUM7QUFDNUksK0NBQThDLEVBQUUscUNBQXFDLGdEQUFnRCxFQUFDO0FBQ3RJLGdEQUErQyxFQUFFLHFDQUFxQyxpREFBaUQsRUFBQztBQUN4SSwyQ0FBMEMsRUFBRSxxQ0FBcUMsNENBQTRDLEVBQUM7QUFDOUgsaURBQWdELEVBQUUscUNBQXFDLGtEQUFrRCxFQUFDO0FBQzFJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDRCQUE0QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQywwQkFBMEI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsK0NBQStDO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxLQUFDLEVBQUUsRUFBRztBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksS0FBQyxFQUFFLEVBQUc7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixNQUFLO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsS0FBQyxFQUFFLEVBQUc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5RUFBeUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxxREFBcUQsZ0JBQWdCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyw2REFBNkQ7QUFDckcsa0RBQWtELHVCQUF1QjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxnQkFBZ0I7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1IQUFtSCxhQUFhO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3REFBd0QsZ0JBQWdCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxnQkFBZ0I7QUFDMUU7QUFDQSxnQkFBZ0IsS0FBQyxFQUFFLEVBQUc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBEQUEwRCxnQkFBZ0I7QUFDMUU7QUFDQSxnQkFBZ0IsS0FBQyxFQUFFLEVBQUc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsS0FBQyxFQUFFLEVBQUc7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELHVCQUF1QjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUlBQXlJO0FBQ3pJO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFlIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXNndG9odG1sLy4vbm9kZV9tb2R1bGVzL0BrZW5qaXVuby9tc2dyZWFkZXIvbGliL01zZ1JlYWRlci5qcz9kNGIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG4vKiBDb3B5cmlnaHQgMjAxNiBZdXJ5IEthcnBvdmljaFxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbi8qXHJcbiBNU0cgUmVhZGVyXHJcbiAqL1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmV4cG9ydHMuT3ZlcnJpZGVGbGFncyA9IGV4cG9ydHMuRW5kVHlwZSA9IGV4cG9ydHMuQ2FsZW5kYXJUeXBlID0gZXhwb3J0cy5QYXR0ZXJuVHlwZSA9IGV4cG9ydHMuUmVjdXJGcmVxdWVuY3kgPSB2b2lkIDA7XHJcbnZhciBjb25zdF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnN0XCIpKTtcclxudmFyIERhdGFTdHJlYW1fMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9EYXRhU3RyZWFtXCIpKTtcclxudmFyIFJlYWRlcl8xID0gcmVxdWlyZShcIi4vUmVhZGVyXCIpO1xyXG52YXIgQnVybmVyXzEgPSByZXF1aXJlKFwiLi9CdXJuZXJcIik7XHJcbnZhciB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XHJcbnZhciBFbnRyeVN0cmVhbVBhcnNlcl8xID0gcmVxdWlyZShcIi4vRW50cnlTdHJlYW1QYXJzZXJcIik7XHJcbnZhciBWZXJiU3RyZWFtUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9WZXJiU3RyZWFtUGFyc2VyXCIpO1xyXG52YXIgVFpERUZJTklUSU9OUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9UWkRFRklOSVRJT05QYXJzZXJcIik7XHJcbnZhciBUWlJFR1BhcnNlcl8xID0gcmVxdWlyZShcIi4vVFpSRUdQYXJzZXJcIik7XHJcbnZhciBBcHBvaW50bWVudFJlY3VyUGFyc2VyXzEgPSByZXF1aXJlKFwiLi9BcHBvaW50bWVudFJlY3VyUGFyc2VyXCIpO1xyXG52YXIgQXBwb2ludG1lbnRSZWN1clBhcnNlcl8yID0gcmVxdWlyZShcIi4vQXBwb2ludG1lbnRSZWN1clBhcnNlclwiKTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUmVjdXJGcmVxdWVuY3lcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFwcG9pbnRtZW50UmVjdXJQYXJzZXJfMi5SZWN1ckZyZXF1ZW5jeTsgfSB9KTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiUGF0dGVyblR5cGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFwcG9pbnRtZW50UmVjdXJQYXJzZXJfMi5QYXR0ZXJuVHlwZTsgfSB9KTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ2FsZW5kYXJUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcHBvaW50bWVudFJlY3VyUGFyc2VyXzIuQ2FsZW5kYXJUeXBlOyB9IH0pO1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFbmRUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBBcHBvaW50bWVudFJlY3VyUGFyc2VyXzIuRW5kVHlwZTsgfSB9KTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiT3ZlcnJpZGVGbGFnc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQXBwb2ludG1lbnRSZWN1clBhcnNlcl8yLk92ZXJyaWRlRmxhZ3M7IH0gfSk7XHJcbi8qKlxyXG4gKiBDT05TVC5NU0cuUFJPUC5UWVBFX0VOVU1cclxuICovXHJcbnZhciBUeXBlRW51bTtcclxuKGZ1bmN0aW9uIChUeXBlRW51bSkge1xyXG4gICAgVHlwZUVudW1bVHlwZUVudW1bXCJESVJFQ1RPUllcIl0gPSAxXSA9IFwiRElSRUNUT1JZXCI7XHJcbiAgICBUeXBlRW51bVtUeXBlRW51bVtcIkRPQ1VNRU5UXCJdID0gMl0gPSBcIkRPQ1VNRU5UXCI7XHJcbiAgICBUeXBlRW51bVtUeXBlRW51bVtcIlJPT1RcIl0gPSA1XSA9IFwiUk9PVFwiO1xyXG59KShUeXBlRW51bSB8fCAoVHlwZUVudW0gPSB7fSkpO1xyXG52YXIgS2V5VHlwZTtcclxuKGZ1bmN0aW9uIChLZXlUeXBlKSB7XHJcbiAgICBLZXlUeXBlW0tleVR5cGVbXCJyb290XCJdID0gMF0gPSBcInJvb3RcIjtcclxuICAgIEtleVR5cGVbS2V5VHlwZVtcInRvU3ViXCJdID0gMV0gPSBcInRvU3ViXCI7XHJcbiAgICBLZXlUeXBlW0tleVR5cGVbXCJuYW1lZFwiXSA9IDJdID0gXCJuYW1lZFwiO1xyXG59KShLZXlUeXBlIHx8IChLZXlUeXBlID0ge30pKTtcclxuZnVuY3Rpb24gZmlsZVRpbWVUb1VuaXhFcG9jaCh0aW1lKSB7XHJcbiAgICByZXR1cm4gKHRpbWUgLSAxMTY0NDQ3MzYwMDAwMDAwMDApIC8gMTAwMDA7XHJcbn1cclxuLyoqXHJcbiAqIFRoZSBjb3JlIGltcGxlbWVudGF0aW9uIG9mIE1zZ1JlYWRlclxyXG4gKi9cclxudmFyIE1zZ1JlYWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIE1zZ1JlYWRlcihhcnJheUJ1ZmZlcikge1xyXG4gICAgICAgIHRoaXMucmVhZGVyID0gbmV3IFJlYWRlcl8xLlJlYWRlcihhcnJheUJ1ZmZlcik7XHJcbiAgICB9XHJcbiAgICBNc2dSZWFkZXIucHJvdG90eXBlLmRlY29kZUZpZWxkID0gZnVuY3Rpb24gKGZpZWxkQ2xhc3MsIGZpZWxkVHlwZSwgcHJvdmlkZXIsIGFuc2lFbmNvZGluZywgaW5zaWRlUHJvcHMpIHtcclxuICAgICAgICB2YXIgYXJyYXkgPSBwcm92aWRlcigpO1xyXG4gICAgICAgIHZhciBkcyA9IG5ldyBEYXRhU3RyZWFtXzEuZGVmYXVsdChhcnJheSwgMCwgRGF0YVN0cmVhbV8xLmRlZmF1bHQuTElUVExFX0VORElBTik7XHJcbiAgICAgICAgdmFyIGtleSA9IGNvbnN0XzEuZGVmYXVsdC5NU0cuRklFTEQuRlVMTF9OQU1FX01BUFBJTkdbXCJcIi5jb25jYXQoZmllbGRDbGFzcykuY29uY2F0KGZpZWxkVHlwZSldXHJcbiAgICAgICAgICAgIHx8IGNvbnN0XzEuZGVmYXVsdC5NU0cuRklFTEQuTkFNRV9NQVBQSU5HW2ZpZWxkQ2xhc3NdO1xyXG4gICAgICAgIHZhciBrZXlUeXBlID0gS2V5VHlwZS5yb290O1xyXG4gICAgICAgIHZhciBwcm9wZXJ0eVNldCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB2YXIgcHJvcGVydHlMaWQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdmFyIGNsYXNzVmFsdWUgPSBwYXJzZUludChcIjB4XCIuY29uY2F0KGZpZWxkQ2xhc3MpKTtcclxuICAgICAgICBpZiAoY2xhc3NWYWx1ZSA+PSAweDgwMDApIHtcclxuICAgICAgICAgICAgdmFyIGtleWVkID0gdGhpcy5wcml2YXRlUGlkVG9LZXllZFtjbGFzc1ZhbHVlXTtcclxuICAgICAgICAgICAgaWYgKGtleWVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ZWQudXNlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGtleWVkLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5VHlwZSA9IEtleVR5cGUubmFtZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eVNldCA9IGtleWVkLnByb3BlcnR5U2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TGlkID0gKDAsIHV0aWxzXzEudG9IZXg0KShrZXllZC5wcm9wZXJ0eUxpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpZERpY3QgPSBjb25zdF8xLmRlZmF1bHQuTVNHLkZJRUxELlBJRExJRF9NQVBQSU5HW2tleWVkLnByb3BlcnR5U2V0XTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobGlkRGljdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wID0gbGlkRGljdFtrZXllZC5wcm9wZXJ0eUxpZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wLmRpc3BpZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ID0gcHJvcC5kaXNwaWQ7IC8vIGUuZy4gYHZvdGluZ1Jlc3BvbnNlYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleVR5cGUgPSBLZXlUeXBlLnJvb3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXkgPSBwcm9wLmlkOyAvLyBlLmcuIGBQaWRMaWRWZXJiU3RyZWFtYCBsaXN0ZWQgaW4gU29tZVBhcnNlZE94UHJvcHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlUeXBlID0gS2V5VHlwZS50b1N1YjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheTtcclxuICAgICAgICB2YXIgc2tpcCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBkZWNvZGVBcyA9IGNvbnN0XzEuZGVmYXVsdC5NU0cuRklFTEQuVFlQRV9NQVBQSU5HW2ZpZWxkVHlwZV07XHJcbiAgICAgICAgaWYgKDApIHsgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRlY29kZUFzID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gZHMucmVhZFN0cmluZyhhcnJheS5sZW5ndGgsIGFuc2lFbmNvZGluZyk7XHJcbiAgICAgICAgICAgIHNraXAgPSBpbnNpZGVQcm9wcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGVjb2RlQXMgPT09IFwidW5pY29kZVwiKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gZHMucmVhZFVDUzJTdHJpbmcoYXJyYXkubGVuZ3RoIC8gMik7XHJcbiAgICAgICAgICAgIHNraXAgPSBpbnNpZGVQcm9wcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGVjb2RlQXMgPT09IFwiYmluYXJ5XCIpIHtcclxuICAgICAgICAgICAgc2tpcCA9IGluc2lkZVByb3BzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkZWNvZGVBcyA9PT0gXCJpbnRlZ2VyXCIpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSBkcy5yZWFkVWludDMyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGRlY29kZUFzID09PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICB2YWx1ZSA9IGRzLnJlYWRVaW50MTYoKSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGVjb2RlQXMgPT09IFwidGltZVwiKSB7XHJcbiAgICAgICAgICAgIHZhciBsbyA9IGRzLnJlYWRVaW50MzIoKTtcclxuICAgICAgICAgICAgdmFyIGZpbGVUaW1lID0gbG8gKyAoNDI5NDk2NzI5Ni4wICogZHMucmVhZFVpbnQzMigpKTtcclxuICAgICAgICAgICAgdmFsdWUgPSBuZXcgRGF0ZShmaWxlVGltZVRvVW5peEVwb2NoKGZpbGVUaW1lKSkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHNraXApIHtcclxuICAgICAgICAgICAga2V5ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoMCkgeyB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcIlBpZExpZFZlcmJTdHJlYW1cIikge1xyXG4gICAgICAgICAgICBrZXkgPSBcInZvdGluZ09wdGlvbnNcIjtcclxuICAgICAgICAgICAga2V5VHlwZSA9IEtleVR5cGUucm9vdDtcclxuICAgICAgICAgICAgdmFsdWUgPSAoMCwgVmVyYlN0cmVhbVBhcnNlcl8xLnBhcnNlKShkcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGZhbHNlXHJcbiAgICAgICAgICAgIHx8IGtleSA9PT0gXCJhcHB0VFpEZWZTdGFydERpc3BsYXlcIlxyXG4gICAgICAgICAgICB8fCBrZXkgPT09IFwiYXBwdFRaRGVmRW5kRGlzcGxheVwiXHJcbiAgICAgICAgICAgIHx8IGtleSA9PT0gXCJhcHB0VFpEZWZSZWN1clwiKSB7XHJcbiAgICAgICAgICAgIGtleVR5cGUgPSBLZXlUeXBlLnJvb3Q7XHJcbiAgICAgICAgICAgIHZhbHVlID0gKDAsIFRaREVGSU5JVElPTlBhcnNlcl8xLnBhcnNlKShkcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJ0aW1lWm9uZVN0cnVjdFwiKSB7XHJcbiAgICAgICAgICAgIHZhbHVlID0gKDAsIFRaUkVHUGFyc2VyXzEucGFyc2UpKGRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoa2V5ID09PSBcImFwcHRSZWN1clwiKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZSA9ICgwLCBBcHBvaW50bWVudFJlY3VyUGFyc2VyXzEucGFyc2UpKGRzLCBhbnNpRW5jb2RpbmcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNhdGNoIChleCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZyhleCk7XHJcbiAgICAgICAgICAgICAgICAvLyBkcm9wIHRoaXMgZGF0YVxyXG4gICAgICAgICAgICAgICAga2V5ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJyZWNpcFR5cGVcIikge1xyXG4gICAgICAgICAgICB2YXIgTUFQSV9UTyA9IDE7XHJcbiAgICAgICAgICAgIHZhciBNQVBJX0NDID0gMjtcclxuICAgICAgICAgICAgdmFyIE1BUElfQkNDID0gMztcclxuICAgICAgICAgICAgaWYgKDApIHsgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gTUFQSV9UTykge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBcInRvXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWUgPT09IE1BUElfQ0MpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gXCJjY1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlID09PSBNQVBJX0JDQykge1xyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSBcImJjY1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGtleSA9PT0gXCJnbG9iYWxBcHBvaW50bWVudElEXCIpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSAoMCwgdXRpbHNfMS5iaW4ySGV4VXBwZXIpKGRzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHByb3BlcnR5VGFnID0gXCJcIi5jb25jYXQoZmllbGRDbGFzcykuY29uY2F0KGZpZWxkVHlwZSk7XHJcbiAgICAgICAgcmV0dXJuIHsga2V5OiBrZXksIGtleVR5cGU6IGtleVR5cGUsIHZhbHVlOiB2YWx1ZSwgbm90Rm9yUmF3UHJvcDogc2tpcCwgcHJvcGVydHlUYWc6IHByb3BlcnR5VGFnLCBwcm9wZXJ0eVNldDogcHJvcGVydHlTZXQsIHByb3BlcnR5TGlkOiBwcm9wZXJ0eUxpZCwgfTtcclxuICAgIH07XHJcbiAgICBNc2dSZWFkZXIucHJvdG90eXBlLmZpZWxkc0RhdGFEb2N1bWVudCA9IGZ1bmN0aW9uIChwYXJzZXJDb25maWcsIGRvY3VtZW50UHJvcGVydHksIGZpZWxkcykge1xyXG4gICAgICAgIHZhciB2YWx1ZSA9IGRvY3VtZW50UHJvcGVydHkubmFtZS5zdWJzdHJpbmcoMTIpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgdmFyIGZpZWxkQ2xhc3MgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgNCk7XHJcbiAgICAgICAgdmFyIGZpZWxkVHlwZSA9IHZhbHVlLnN1YnN0cmluZyg0LCA4KTtcclxuICAgICAgICBwYXJzZXJDb25maWcucHJvcGVydHlPYnNlcnZlciAmJiBwYXJzZXJDb25maWcucHJvcGVydHlPYnNlcnZlcihmaWVsZHMsIHBhcnNlSW50KHZhbHVlLnN1YnN0cmluZygwLCA4KSwgMTYpLCBkb2N1bWVudFByb3BlcnR5LnByb3ZpZGVyKCkpO1xyXG4gICAgICAgIGlmIChmaWVsZENsYXNzID09IGNvbnN0XzEuZGVmYXVsdC5NU0cuRklFTEQuQ0xBU1NfTUFQUElORy5BVFRBQ0hNRU5UX0RBVEEpIHtcclxuICAgICAgICAgICAgLy8gYXR0YWNobWVudCBzcGVjaWZpYyBpbmZvXHJcbiAgICAgICAgICAgIGZpZWxkcy5kYXRhSWQgPSBkb2N1bWVudFByb3BlcnR5LmRhdGFJZDtcclxuICAgICAgICAgICAgZmllbGRzLmNvbnRlbnRMZW5ndGggPSBkb2N1bWVudFByb3BlcnR5Lmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RGVjb2RlZEZpZWxkVG8ocGFyc2VyQ29uZmlnLCBmaWVsZHMsIHRoaXMuZGVjb2RlRmllbGQoZmllbGRDbGFzcywgZmllbGRUeXBlLCBkb2N1bWVudFByb3BlcnR5LnByb3ZpZGVyLCBwYXJzZXJDb25maWcuYW5zaUVuY29kaW5nLCBmYWxzZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNc2dSZWFkZXIucHJvdG90eXBlLnNldERlY29kZWRGaWVsZFRvID0gZnVuY3Rpb24gKHBhcnNlckNvbmZpZywgZmllbGRzLCBwYWlyKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IHBhaXIua2V5LCBrZXlUeXBlID0gcGFpci5rZXlUeXBlLCB2YWx1ZSA9IHBhaXIudmFsdWU7XHJcbiAgICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGlmIChrZXlUeXBlID09PSBLZXlUeXBlLnJvb3QpIHtcclxuICAgICAgICAgICAgICAgIGZpZWxkc1trZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBhcnNlckNvbmZpZy5pbmNsdWRlUmF3UHJvcHMgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgZmllbGRzLnJhd1Byb3BzID0gZmllbGRzLnJhd1Byb3BzIHx8IFtdO1xyXG4gICAgICAgICAgICBpZiAoIXBhaXIubm90Rm9yUmF3UHJvcCkge1xyXG4gICAgICAgICAgICAgICAgZmllbGRzLnJhd1Byb3BzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5VGFnOiBwYWlyLnByb3BlcnR5VGFnLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5U2V0OiBwYWlyLnByb3BlcnR5U2V0LFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TGlkOiBwYWlyLnByb3BlcnR5TGlkLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogKHBhaXIua2V5VHlwZSA9PT0gS2V5VHlwZS5uYW1lZCkgPyBwYWlyLmtleSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNc2dSZWFkZXIucHJvdG90eXBlLmdldEZpZWxkVHlwZSA9IGZ1bmN0aW9uIChmaWVsZFByb3BlcnR5KSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gZmllbGRQcm9wZXJ0eS5uYW1lLnN1YnN0cmluZygxMikudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICByZXR1cm4gdmFsdWUuc3Vic3RyaW5nKDQsIDgpO1xyXG4gICAgfTtcclxuICAgIE1zZ1JlYWRlci5wcm90b3R5cGUuZmllbGRzRGF0YURpcklubmVyID0gZnVuY3Rpb24gKHBhcnNlckNvbmZpZywgZGlyUHJvcGVydHksIHJvb3RGb2xkZXIsIGZpZWxkcykge1xyXG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XHJcbiAgICAgICAgaWYgKGRpclByb3BlcnR5Lm5hbWUuaW5kZXhPZihjb25zdF8xLmRlZmF1bHQuTVNHLkZJRUxELlBSRUZJWC5BVFRBQ0hNRU5UKSA9PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIGF0dGFjaG1lbnRcclxuICAgICAgICAgICAgdmFyIGF0dGFjaG1lbnRGaWVsZCA9IHtcclxuICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImF0dGFjaG1lbnRcIixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZmllbGRzLmF0dGFjaG1lbnRzLnB1c2goYXR0YWNobWVudEZpZWxkKTtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHNEYXRhRGlyKHBhcnNlckNvbmZpZywgZGlyUHJvcGVydHksIHJvb3RGb2xkZXIsIGF0dGFjaG1lbnRGaWVsZCwgXCJhdHRhY2htZW50XCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChkaXJQcm9wZXJ0eS5uYW1lLmluZGV4T2YoY29uc3RfMS5kZWZhdWx0Lk1TRy5GSUVMRC5QUkVGSVguUkVDSVBJRU5UKSA9PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIHJlY2lwaWVudFxyXG4gICAgICAgICAgICB2YXIgcmVjaXBpZW50RmllbGQgPSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJyZWNpcGllbnRcIixcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZmllbGRzLnJlY2lwaWVudHMucHVzaChyZWNpcGllbnRGaWVsZCk7XHJcbiAgICAgICAgICAgIHRoaXMuZmllbGRzRGF0YURpcihwYXJzZXJDb25maWcsIGRpclByb3BlcnR5LCByb290Rm9sZGVyLCByZWNpcGllbnRGaWVsZCwgXCJyZWNpcFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoZGlyUHJvcGVydHkubmFtZS5pbmRleE9mKGNvbnN0XzEuZGVmYXVsdC5NU0cuRklFTEQuUFJFRklYLk5BTUVJRCkgPT0gMCkge1xyXG4gICAgICAgICAgICAvLyB1bmtub3duLCByZWFkXHJcbiAgICAgICAgICAgIHRoaXMuZmllbGRzTmFtZUlkRGlyKHBhcnNlckNvbmZpZywgZGlyUHJvcGVydHksIHJvb3RGb2xkZXIsIGZpZWxkcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBvdGhlciBkaXJcclxuICAgICAgICAgICAgdmFyIGNoaWxkRmllbGRUeXBlID0gdGhpcy5nZXRGaWVsZFR5cGUoZGlyUHJvcGVydHkpO1xyXG4gICAgICAgICAgICBpZiAoY2hpbGRGaWVsZFR5cGUgIT0gY29uc3RfMS5kZWZhdWx0Lk1TRy5GSUVMRC5ESVJfVFlQRS5JTk5FUl9NU0cpIHtcclxuICAgICAgICAgICAgICAgIC8vIGlnbm9yZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlubmVyTXNnQ29udGVudEZpZWxkcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJtc2dcIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRhY2htZW50czogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgcmVjaXBpZW50czogW10sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maWVsZHNEYXRhRGlyKHBhcnNlckNvbmZpZywgZGlyUHJvcGVydHksIHJvb3RGb2xkZXIsIGlubmVyTXNnQ29udGVudEZpZWxkcywgXCJzdWJcIik7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHMuaW5uZXJNc2dDb250ZW50RmllbGRzID0gaW5uZXJNc2dDb250ZW50RmllbGRzO1xyXG4gICAgICAgICAgICAgICAgZmllbGRzLmlubmVyTXNnQ29udGVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBmaWVsZHMuZm9sZGVySWQgPSBkaXJQcm9wZXJ0eS5kYXRhSWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyTXNnQnVybmVyc1tkaXJQcm9wZXJ0eS5kYXRhSWRdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuYnVybk1zZyhkaXJQcm9wZXJ0eSwgcm9vdEZvbGRlcik7IH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTXNnUmVhZGVyLnByb3RvdHlwZS5idXJuTXNnID0gZnVuY3Rpb24gKGZvbGRlciwgcm9vdEZvbGRlcikge1xyXG4gICAgICAgIHZhciBlbnRyaWVzID0gW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcIlJvb3QgRW50cnlcIixcclxuICAgICAgICAgICAgICAgIHR5cGU6IFR5cGVFbnVtLlJPT1QsXHJcbiAgICAgICAgICAgICAgICBjaGlsZHJlbjogW10sXHJcbiAgICAgICAgICAgICAgICBsZW5ndGg6IDAsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIHRoaXMucmVnaXN0ZXJGb2xkZXIoZW50cmllcywgMCwgZm9sZGVyLCByb290Rm9sZGVyLCAwKTtcclxuICAgICAgICByZXR1cm4gKDAsIEJ1cm5lcl8xLmJ1cm4pKGVudHJpZXMpO1xyXG4gICAgfTtcclxuICAgIE1zZ1JlYWRlci5wcm90b3R5cGUucmVnaXN0ZXJGb2xkZXIgPSBmdW5jdGlvbiAoZW50cmllcywgaW5kZXgsIGZvbGRlciwgcm9vdEZvbGRlciwgZGVwdGgpIHtcclxuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChzZXQpIHtcclxuICAgICAgICAgICAgdmFyIHByb3ZpZGVyID0gc2V0LnByb3ZpZGVyLCBsZW5ndGhfMSA9IHNldC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChkZXB0aCA9PT0gMCAmJiBzZXQubmFtZSA9PT0gXCJfX3Byb3BlcnRpZXNfdmVyc2lvbjEuMFwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3JjID0gcHJvdmlkZXIoKTtcclxuICAgICAgICAgICAgICAgIHZhciBkc3RfMSA9IG5ldyBVaW50OEFycmF5KHNyYy5sZW5ndGggKyA4KTtcclxuICAgICAgICAgICAgICAgIGRzdF8xLnNldChzcmMuc3ViYXJyYXkoMCwgMjQpLCAwKTtcclxuICAgICAgICAgICAgICAgIGRzdF8xLnNldChzcmMuc3ViYXJyYXkoMjQpLCAzMik7XHJcbiAgICAgICAgICAgICAgICBwcm92aWRlciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRzdF8xOyB9O1xyXG4gICAgICAgICAgICAgICAgbGVuZ3RoXzEgPSBkc3RfMS5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHN1YkluZGV4ID0gZW50cmllcy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGVudHJpZXNbaW5kZXhdLmNoaWxkcmVuLnB1c2goc3ViSW5kZXgpO1xyXG4gICAgICAgICAgICBlbnRyaWVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbmFtZTogc2V0Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiBUeXBlRW51bS5ET0NVTUVOVCxcclxuICAgICAgICAgICAgICAgIGJpbmFyeVByb3ZpZGVyOiBwcm92aWRlcixcclxuICAgICAgICAgICAgICAgIGxlbmd0aDogbGVuZ3RoXzEsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IGZvbGRlci5maWxlTmFtZVNldHMoKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcclxuICAgICAgICAgICAgdmFyIHNldCA9IF9hW19pXTtcclxuICAgICAgICAgICAgX2xvb3BfMShzZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVwdGggPT09IDApIHtcclxuICAgICAgICAgICAgLy8gaW5jbHVkZSByb290IGBfX25hbWVpZF92ZXJzaW9uMS4wYCBmb2xkZXIuXHJcbiAgICAgICAgICAgIHZhciBzb3VyY2VzID0gcm9vdEZvbGRlci5zdWJGb2xkZXJzKClcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGl0KSB7IHJldHVybiBpdC5uYW1lID09PSBjb25zdF8xLmRlZmF1bHQuTVNHLkZJRUxELlBSRUZJWC5OQU1FSUQ7IH0pO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IDAsIHNvdXJjZXNfMSA9IHNvdXJjZXM7IF9iIDwgc291cmNlc18xLmxlbmd0aDsgX2IrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNfMVtfYl07XHJcbiAgICAgICAgICAgICAgICB2YXIgc3ViSW5kZXggPSBlbnRyaWVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGVudHJpZXNbaW5kZXhdLmNoaWxkcmVuLnB1c2goc3ViSW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgZW50cmllcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBzb3VyY2UubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBUeXBlRW51bS5ESVJFQ1RPUlksXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlckZvbGRlcihlbnRyaWVzLCBzdWJJbmRleCwgc291cmNlLCByb290Rm9sZGVyLCBkZXB0aCArIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIF9jID0gMCwgX2QgPSBmb2xkZXIuc3ViRm9sZGVycygpOyBfYyA8IF9kLmxlbmd0aDsgX2MrKykge1xyXG4gICAgICAgICAgICB2YXIgc3ViRm9sZGVyID0gX2RbX2NdO1xyXG4gICAgICAgICAgICB2YXIgc3ViSW5kZXggPSBlbnRyaWVzLmxlbmd0aDtcclxuICAgICAgICAgICAgZW50cmllc1tpbmRleF0uY2hpbGRyZW4ucHVzaChzdWJJbmRleCk7XHJcbiAgICAgICAgICAgIGVudHJpZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBuYW1lOiBzdWJGb2xkZXIubmFtZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6IFR5cGVFbnVtLkRJUkVDVE9SWSxcclxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbXSxcclxuICAgICAgICAgICAgICAgIGxlbmd0aDogMCxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJGb2xkZXIoZW50cmllcywgc3ViSW5kZXgsIHN1YkZvbGRlciwgcm9vdEZvbGRlciwgZGVwdGggKyAxKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgTXNnUmVhZGVyLnByb3RvdHlwZS5maWVsZHNSZWNpcEFuZEF0dGFjaG1lbnRQcm9wZXJ0aWVzID0gZnVuY3Rpb24gKHBhcnNlckNvbmZpZywgZG9jdW1lbnRQcm9wZXJ0eSwgZmllbGRzKSB7XHJcbiAgICAgICAgdmFyIHByb3BlcnRpZXNCaW5hcnkgPSBkb2N1bWVudFByb3BlcnR5LnByb3ZpZGVyKCk7XHJcbiAgICAgICAgdmFyIHByb3BlcnRpZXNEcyA9IG5ldyBEYXRhU3RyZWFtXzEuZGVmYXVsdChwcm9wZXJ0aWVzQmluYXJ5LCA4LCBEYXRhU3RyZWFtXzEuZGVmYXVsdC5MSVRUTEVfRU5ESUFOKTtcclxuICAgICAgICB0aGlzLmltcG9ydFByb3BlcnRpZXNGcm9tRmlsZShwYXJzZXJDb25maWcsIHByb3BlcnRpZXNEcywgZmllbGRzKTtcclxuICAgIH07XHJcbiAgICBNc2dSZWFkZXIucHJvdG90eXBlLmltcG9ydFByb3BlcnRpZXNGcm9tRmlsZSA9IGZ1bmN0aW9uIChwYXJzZXJDb25maWcsIHByb3BlcnRpZXNEcywgZmllbGRzKSB7XHJcbiAgICAgICAgLy8gU2VlOiBbTVMtT1hNU0ddOiBPdXRsb29rIEl0ZW0gKC5tc2cpIEZpbGUgRm9ybWF0LCAyLjQgUHJvcGVydHkgU3RyZWFtXHJcbiAgICAgICAgLy8gaHR0cHM6Ly9kb2NzLm1pY3Jvc29mdC5jb20vZW4tdXMvb3BlbnNwZWNzL2V4Y2hhbmdlX3NlcnZlcl9wcm90b2NvbHMvbXMtb3htc2cvMjBjMTEyNWYtMDQzZC00MmQ5LWIxZGMtY2I5YjdlNTE5OGVmXHJcbiAgICAgICAgdmFyIHR5cGVDb252ZXJ0ZXJzID0ge1xyXG4gICAgICAgICAgICAweDAwNDA6IGZ1bmN0aW9uIChkYXRhVmlldykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVUaW1lID0gZGF0YVZpZXcuZ2V0VWludDMyKDAsIHRydWUpICsgKDQyOTQ5NjcyOTYuMCAqIGRhdGFWaWV3LmdldFVpbnQzMig0LCB0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERhdGUoZmlsZVRpbWVUb1VuaXhFcG9jaChmaWxlVGltZSkpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgX2xvb3BfMiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHByb3BlcnR5VGFnID0gcHJvcGVydGllc0RzLnJlYWRVaW50MzIoKTtcclxuICAgICAgICAgICAgaWYgKHByb3BlcnR5VGFnID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJicmVha1wiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBmbGFncyA9IHByb3BlcnRpZXNEcy5yZWFkVWludDMyKCk7XHJcbiAgICAgICAgICAgIHZhciBhcnIgPSBwcm9wZXJ0aWVzRHMucmVhZFVpbnQ4QXJyYXkoOCk7XHJcbiAgICAgICAgICAgIHBhcnNlckNvbmZpZy5wcm9wZXJ0eU9ic2VydmVyKGZpZWxkcywgcHJvcGVydHlUYWcsIGFycik7XHJcbiAgICAgICAgICAgIHZhciBmaWVsZENsYXNzID0gKDAsIHV0aWxzXzEudG9IZXgyKSgocHJvcGVydHlUYWcgLyA2NTUzNikgJiAweEZGRkYpO1xyXG4gICAgICAgICAgICB2YXIgZmllbGRUeXBlID0gKDAsIHV0aWxzXzEudG9IZXgyKShwcm9wZXJ0eVRhZyAmIDB4RkZGRik7XHJcbiAgICAgICAgICAgIHRoaXNfMS5zZXREZWNvZGVkRmllbGRUbyhwYXJzZXJDb25maWcsIGZpZWxkcywgdGhpc18xLmRlY29kZUZpZWxkKGZpZWxkQ2xhc3MsIGZpZWxkVHlwZSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJyOyB9LCBwYXJzZXJDb25maWcuYW5zaUVuY29kaW5nLCB0cnVlKSk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgdGhpc18xID0gdGhpcztcclxuICAgICAgICB3aGlsZSAoIXByb3BlcnRpZXNEcy5pc0VvZigpKSB7XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZV8xID0gX2xvb3BfMigpO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGVfMSA9PT0gXCJicmVha1wiKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIE1zZ1JlYWRlci5wcm90b3R5cGUuZmllbGRzUm9vdFByb3BlcnRpZXMgPSBmdW5jdGlvbiAocGFyc2VyQ29uZmlnLCBkb2N1bWVudFByb3BlcnR5LCBmaWVsZHMpIHtcclxuICAgICAgICB2YXIgcHJvcGVydGllc0JpbmFyeSA9IGRvY3VtZW50UHJvcGVydHkucHJvdmlkZXIoKTtcclxuICAgICAgICB2YXIgcHJvcGVydGllc0RzID0gbmV3IERhdGFTdHJlYW1fMS5kZWZhdWx0KHByb3BlcnRpZXNCaW5hcnksIDMyLCBEYXRhU3RyZWFtXzEuZGVmYXVsdC5MSVRUTEVfRU5ESUFOKTtcclxuICAgICAgICB0aGlzLmltcG9ydFByb3BlcnRpZXNGcm9tRmlsZShwYXJzZXJDb25maWcsIHByb3BlcnRpZXNEcywgZmllbGRzKTtcclxuICAgIH07XHJcbiAgICBNc2dSZWFkZXIucHJvdG90eXBlLmZpZWxkc0RhdGFEaXIgPSBmdW5jdGlvbiAocGFyc2VyQ29uZmlnLCBkaXJQcm9wZXJ0eSwgcm9vdEZvbGRlciwgZmllbGRzLCBzdWJDbGFzcykge1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBkaXJQcm9wZXJ0eS5zdWJGb2xkZXJzKCk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBzdWJGb2xkZXIgPSBfYVtfaV07XHJcbiAgICAgICAgICAgIHRoaXMuZmllbGRzRGF0YURpcklubmVyKHBhcnNlckNvbmZpZywgc3ViRm9sZGVyLCByb290Rm9sZGVyLCBmaWVsZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBfYiA9IDAsIF9jID0gZGlyUHJvcGVydHkuZmlsZU5hbWVTZXRzKCk7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgIHZhciBmaWxlU2V0ID0gX2NbX2JdO1xyXG4gICAgICAgICAgICBpZiAoMCkgeyB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGZpbGVTZXQubmFtZS5pbmRleE9mKGNvbnN0XzEuZGVmYXVsdC5NU0cuRklFTEQuUFJFRklYLkRPQ1VNRU5UKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpZWxkc0RhdGFEb2N1bWVudChwYXJzZXJDb25maWcsIGZpbGVTZXQsIGZpZWxkcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoZmlsZVNldC5uYW1lID09PSBcIl9fcHJvcGVydGllc192ZXJzaW9uMS4wXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdWJDbGFzcyA9PT0gXCJyZWNpcFwiIHx8IHN1YkNsYXNzID09PSBcImF0dGFjaG1lbnRcIiB8fCBzdWJDbGFzcyA9PT0gXCJzdWJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmllbGRzUmVjaXBBbmRBdHRhY2htZW50UHJvcGVydGllcyhwYXJzZXJDb25maWcsIGZpbGVTZXQsIGZpZWxkcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChzdWJDbGFzcyA9PT0gXCJyb290XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpZWxkc1Jvb3RQcm9wZXJ0aWVzKHBhcnNlckNvbmZpZywgZmlsZVNldCwgZmllbGRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBNc2dSZWFkZXIucHJvdG90eXBlLmZpZWxkc05hbWVJZERpciA9IGZ1bmN0aW9uIChwYXJzZXJDb25maWcsIGRpclByb3BlcnR5LCByb290Rm9sZGVyLCBmaWVsZHMpIHtcclxuICAgICAgICB2YXIgZ3VpZFRhYmxlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHZhciBzdHJpbmdUYWJsZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB2YXIgZW50cnlUYWJsZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gZGlyUHJvcGVydHkuZmlsZU5hbWVTZXRzKCk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBmaWxlU2V0ID0gX2FbX2ldO1xyXG4gICAgICAgICAgICBpZiAoMCkgeyB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGZpbGVTZXQubmFtZS5pbmRleE9mKGNvbnN0XzEuZGVmYXVsdC5NU0cuRklFTEQuUFJFRklYLkRPQ1VNRU5UKSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBmaWxlU2V0Lm5hbWUuc3Vic3RyaW5nKDEyKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZpZWxkQ2xhc3MgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgNCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmllbGRUeXBlID0gdmFsdWUuc3Vic3RyaW5nKDQsIDgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKDApIHsgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmllbGRDbGFzcyA9PT0gXCIwMDAyXCIgJiYgZmllbGRUeXBlID09PSBcIjAxMDJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGd1aWRUYWJsZSA9IGZpbGVTZXQucHJvdmlkZXIoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZpZWxkQ2xhc3MgPT09IFwiMDAwM1wiICYmIGZpZWxkVHlwZSA9PT0gXCIwMTAyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeVRhYmxlID0gZmlsZVNldC5wcm92aWRlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZmllbGRDbGFzcyA9PT0gXCIwMDA0XCIgJiYgZmllbGRUeXBlID09PSBcIjAxMDJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0cmluZ1RhYmxlID0gZmlsZVNldC5wcm92aWRlcigpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vY29uc29sZS5sb2coXCIlXCIsIGd1aWRUYWJsZSwgc3RyaW5nVGFibGUsIGVudHJ5VGFibGUpO1xyXG4gICAgICAgIGlmIChndWlkVGFibGUgIT09IHVuZGVmaW5lZCAmJiBzdHJpbmdUYWJsZSAhPT0gdW5kZWZpbmVkICYmIGVudHJ5VGFibGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB2YXIgZW50cmllcyA9ICgwLCBFbnRyeVN0cmVhbVBhcnNlcl8xLnBhcnNlKShlbnRyeVRhYmxlKTtcclxuICAgICAgICAgICAgdmFyIHN0cmluZ1JlYWRlciA9IG5ldyBEYXRhU3RyZWFtXzEuZGVmYXVsdChzdHJpbmdUYWJsZSwgMCwgRGF0YVN0cmVhbV8xLmRlZmF1bHQuTElUVExFX0VORElBTik7XHJcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgZW50cmllc18xID0gZW50cmllczsgX2IgPCBlbnRyaWVzXzEubGVuZ3RoOyBfYisrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzXzFbX2JdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5LmlzU3RyaW5nUHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHJpbmdSZWFkZXIuc2VlayhlbnRyeS5rZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBudW1UZXh0Qnl0ZXMgPSBzdHJpbmdSZWFkZXIucmVhZFVpbnQzMigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJpdmF0ZVBpZFRvS2V5ZWRbMHg4MDAwIHwgZW50cnkucHJvcGVydHlJbmRleF0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZU5hbWU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHN0cmluZ1JlYWRlci5yZWFkVUNTMlN0cmluZyhudW1UZXh0Qnl0ZXMgLyAyKSxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wcml2YXRlUGlkVG9LZXllZFsweDgwMDAgfCBlbnRyeS5wcm9wZXJ0eUluZGV4XSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlTmFtZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5U2V0OiAoZW50cnkuZ3VpZEluZGV4ID09PSAxKSA/IFwiMDAwMjAzMjgtMDAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDQ2XCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKGVudHJ5Lmd1aWRJbmRleCA9PT0gMikgPyBcIjAwMDIwMzI5LTAwMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDA0NlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAoMCwgdXRpbHNfMS5tc2Z0VXVpZFN0cmluZ2lmeSkoZ3VpZFRhYmxlLCAxNiAqIChlbnRyeS5ndWlkSW5kZXggLSAzKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TGlkOiBlbnRyeS5rZXksXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKFwiQFwiLCB0aGlzLnByaXZhdGVQaWRUb0tleWVkKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBleHRyYWN0IHJlYWwgZmllbGRzXHJcbiAgICAgKi9cclxuICAgIE1zZ1JlYWRlci5wcm90b3R5cGUuZmllbGRzRGF0YVJlYWRlciA9IGZ1bmN0aW9uIChwYXJzZXJDb25maWcpIHtcclxuICAgICAgICB2YXIgZmllbGRzID0ge1xyXG4gICAgICAgICAgICBkYXRhVHlwZTogXCJtc2dcIixcclxuICAgICAgICAgICAgYXR0YWNobWVudHM6IFtdLFxyXG4gICAgICAgICAgICByZWNpcGllbnRzOiBbXVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5maWVsZHNEYXRhRGlyKHBhcnNlckNvbmZpZywgdGhpcy5yZWFkZXIucm9vdEZvbGRlcigpLCB0aGlzLnJlYWRlci5yb290Rm9sZGVyKCksIGZpZWxkcywgXCJyb290XCIpO1xyXG4gICAgICAgIHJldHVybiBmaWVsZHM7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBjb252ZXJ0IGJpbmFyeSBkYXRhIHRvIGRpY3Rpb25hcnlcclxuICAgICAqL1xyXG4gICAgTXNnUmVhZGVyLnByb3RvdHlwZS5wYXJzZU1zZ0RhdGEgPSBmdW5jdGlvbiAocGFyc2VyQ29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5yZWFkZXIucGFyc2UoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5maWVsZHNEYXRhUmVhZGVyKHBhcnNlckNvbmZpZyk7XHJcbiAgICB9O1xyXG4gICAgTXNnUmVhZGVyLnByb3RvdHlwZS5nZXRGaWxlRGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgX2EsIF9iLCBfYztcclxuICAgICAgICBpZiAodGhpcy5maWVsZHNEYXRhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnJlYWRlci5pc01TR0ZpbGUoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ1Vuc3VwcG9ydGVkIGZpbGUgdHlwZSEnXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuaW5uZXJNc2dCdXJuZXJzID0ge307XHJcbiAgICAgICAgICAgIHRoaXMucHJpdmF0ZVBpZFRvS2V5ZWQgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHNEYXRhID0gdGhpcy5wYXJzZU1zZ0RhdGEoe1xyXG4gICAgICAgICAgICAgICAgcHJvcGVydHlPYnNlcnZlcjogKChfYSA9IHRoaXMucGFyc2VyQ29uZmlnKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EucHJvcGVydHlPYnNlcnZlcikgfHwgKGZ1bmN0aW9uICgpIHsgfSksXHJcbiAgICAgICAgICAgICAgICBpbmNsdWRlUmF3UHJvcHM6ICgoX2IgPSB0aGlzLnBhcnNlckNvbmZpZykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmluY2x1ZGVSYXdQcm9wcykgPyB0cnVlIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICBhbnNpRW5jb2Rpbmc6ICgwLCB1dGlsc18xLmVtcHR5VG9OdWxsKSgoX2MgPSB0aGlzLnBhcnNlckNvbmZpZykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmFuc2lFbmNvZGluZyksXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5maWVsZHNEYXRhO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgIFJlYWRzIGFuIGF0dGFjaG1lbnQgY29udGVudCBieSBrZXkvSURcclxuICAgICBcclxuICAgICAgQHJldHVybiB7T2JqZWN0fSBUaGUgYXR0YWNobWVudCBmb3Igc3BlY2lmaWMgYXR0YWNobWVudCBrZXlcclxuICAgICAgKi9cclxuICAgIE1zZ1JlYWRlci5wcm90b3R5cGUuZ2V0QXR0YWNobWVudCA9IGZ1bmN0aW9uIChhdHRhY2gpIHtcclxuICAgICAgICB2YXIgYXR0YWNoRGF0YSA9IHR5cGVvZiBhdHRhY2ggPT09ICdudW1iZXInID8gdGhpcy5maWVsZHNEYXRhLmF0dGFjaG1lbnRzW2F0dGFjaF0gOiBhdHRhY2g7XHJcbiAgICAgICAgaWYgKGF0dGFjaERhdGEuaW5uZXJNc2dDb250ZW50ID09PSB0cnVlICYmIHR5cGVvZiBhdHRhY2hEYXRhLmZvbGRlcklkID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIC8vIGVtYmVkZGVkIG1zZ1xyXG4gICAgICAgICAgICByZXR1cm4geyBmaWxlTmFtZTogYXR0YWNoRGF0YS5uYW1lICsgXCIubXNnXCIsIGNvbnRlbnQ6IHRoaXMuaW5uZXJNc2dCdXJuZXJzW2F0dGFjaERhdGEuZm9sZGVySWRdKCkgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIHJhdyBhdHRhY2htZW50IGZpbGVcclxuICAgICAgICAgICAgdmFyIGZpZWxkRGF0YSA9IHRoaXMucmVhZGVyLnJlYWRGaWxlT2YoYXR0YWNoRGF0YS5kYXRhSWQpO1xyXG4gICAgICAgICAgICByZXR1cm4geyBmaWxlTmFtZTogYXR0YWNoRGF0YS5maWxlTmFtZSwgY29udGVudDogZmllbGREYXRhIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBNc2dSZWFkZXI7XHJcbn0oKSk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IE1zZ1JlYWRlcjtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/MsgReader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/Reader.js":
/*!********************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/Reader.js ***!
  \********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Reader = exports.TypeEnum = void 0;\r\nvar DataStream_1 = __importDefault(__webpack_require__(/*! ./DataStream */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/DataStream.js\"));\r\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/utils.js\");\r\nvar const_1 = __importDefault(__webpack_require__(/*! ./const */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/const.js\"));\r\n/**\r\n * `Object Type` in `2.6.1 Compound File Directory Entry`\r\n *\r\n * See also: [[MS-CFB]: Compound File Directory Entry | Microsoft Docs](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/60fe8611-66c3-496b-b70d-a504c94c9ace)\r\n */\r\nvar TypeEnum;\r\n(function (TypeEnum) {\r\n    /**\r\n     * `Storage Object`\r\n     *\r\n     * storage object: An object in a compound file that is analogous to a file system directory. The parent object of a storage object must be another storage object or the root storage object.\r\n     *\r\n     * See also:\r\n     *\r\n     * - [[MS-CFB]: Other Directory Entries | Microsoft Docs](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/b37413bb-f3ef-4adc-b18e-29bddd62c26e)\r\n     * - [[MS-CFB]: Glossary | Microsoft Docs](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/59ccb2ef-1ce5-41e3-bc30-075dea759d0a#gt_c3ddf892-3f55-4561-8804-20325dbc8fba)\r\n     */\r\n    TypeEnum[TypeEnum[\"DIRECTORY\"] = 1] = \"DIRECTORY\";\r\n    /**\r\n     * `Stream Object`\r\n     *\r\n     * - stream object: An object in a compound file that is analogous to a file system file. The parent object of a stream object must be a storage object or the root storage object.\r\n     *\r\n     * See also:\r\n     * - [[MS-CFB]: Compound File User-Defined Data Sectors | Microsoft Docs](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/b089deda-be20-4b4a-aad5-fbe68bb19672)\r\n     * - [[MS-CFB]: Glossary | Microsoft Docs](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/59ccb2ef-1ce5-41e3-bc30-075dea759d0a#gt_9f598e1c-0d65-4845-8f06-8d50f7a32fd5)\r\n     */\r\n    TypeEnum[TypeEnum[\"DOCUMENT\"] = 2] = \"DOCUMENT\";\r\n    /**\r\n     * `Root Storage Object`\r\n     *\r\n     * - root storage object: A storage object in a compound file that must be accessed before any other storage objects and stream objects are referenced. It is the uppermost parent object in the storage object and stream object hierarchy.\r\n     *\r\n     * See also:\r\n     * - [[MS-CFB]: Root Directory Entry | Microsoft Docs](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/026fde6e-143d-41bf-a7da-c08b2130d50e)\r\n     * - [[MS-CFB]: Glossary | Microsoft Docs](https://docs.microsoft.com/en-us/openspecs/windows_protocols/ms-cfb/59ccb2ef-1ce5-41e3-bc30-075dea759d0a#gt_d49237e3-04dd-4823-a0a5-5e23f750a5f4)\r\n     */\r\n    TypeEnum[TypeEnum[\"ROOT\"] = 5] = \"ROOT\";\r\n})(TypeEnum = exports.TypeEnum || (exports.TypeEnum = {}));\r\n/**\r\n * Original msg file (CFBF) reader which was implemented in MsgReader.\r\n */\r\nvar Reader = /** @class */ (function () {\r\n    function Reader(arrayBuffer) {\r\n        this.ds = new DataStream_1.default(arrayBuffer, 0, DataStream_1.default.LITTLE_ENDIAN);\r\n    }\r\n    Reader.prototype.isMSGFile = function () {\r\n        this.ds.seek(0);\r\n        return (0, utils_1.arraysEqual)(const_1.default.FILE_HEADER, this.ds.readInt8Array(const_1.default.FILE_HEADER.length));\r\n    };\r\n    Reader.prototype.headerData = function () {\r\n        this.bigBlockSize = this.ds.readByte(30) == const_1.default.MSG.L_BIG_BLOCK_MARK ? const_1.default.MSG.L_BIG_BLOCK_SIZE : const_1.default.MSG.S_BIG_BLOCK_SIZE;\r\n        this.bigBlockLength = this.bigBlockSize / 4;\r\n        // system data\r\n        this.xBlockLength = this.bigBlockLength - 1;\r\n        // header data\r\n        this.batCount = this.ds.readInt(const_1.default.MSG.HEADER.BAT_COUNT_OFFSET);\r\n        this.propertyStart = this.ds.readInt(const_1.default.MSG.HEADER.PROPERTY_START_OFFSET);\r\n        this.sbatStart = this.ds.readInt(const_1.default.MSG.HEADER.SBAT_START_OFFSET);\r\n        this.sbatCount = this.ds.readInt(const_1.default.MSG.HEADER.SBAT_COUNT_OFFSET);\r\n        this.xbatStart = this.ds.readInt(const_1.default.MSG.HEADER.XBAT_START_OFFSET);\r\n        this.xbatCount = this.ds.readInt(const_1.default.MSG.HEADER.XBAT_COUNT_OFFSET);\r\n    };\r\n    Reader.prototype.convertName = function (offset) {\r\n        var nameLength = this.ds.readShort(offset + const_1.default.MSG.PROP.NAME_SIZE_OFFSET);\r\n        if (nameLength < 1) {\r\n            return '';\r\n        }\r\n        else {\r\n            return this.ds.readStringAt(offset, nameLength / 2).split('\\0')[0];\r\n        }\r\n    };\r\n    Reader.prototype.convertProperty = function (offset) {\r\n        return {\r\n            type: this.ds.readByte(offset + const_1.default.MSG.PROP.TYPE_OFFSET),\r\n            name: this.convertName(offset),\r\n            // hierarchy\r\n            previousProperty: this.ds.readInt(offset + const_1.default.MSG.PROP.PREVIOUS_PROPERTY_OFFSET),\r\n            nextProperty: this.ds.readInt(offset + const_1.default.MSG.PROP.NEXT_PROPERTY_OFFSET),\r\n            childProperty: this.ds.readInt(offset + const_1.default.MSG.PROP.CHILD_PROPERTY_OFFSET),\r\n            // data offset\r\n            startBlock: this.ds.readInt(offset + const_1.default.MSG.PROP.START_BLOCK_OFFSET),\r\n            sizeBlock: this.ds.readInt(offset + const_1.default.MSG.PROP.SIZE_OFFSET),\r\n        };\r\n    };\r\n    Reader.prototype.convertBlockToProperties = function (propertyBlockOffset, props) {\r\n        var propertyCount = this.bigBlockSize / const_1.default.MSG.PROP.PROPERTY_SIZE;\r\n        var propertyOffset = this.getBlockOffsetAt(propertyBlockOffset);\r\n        for (var i = 0; i < propertyCount; i++) {\r\n            if (this.ds.byteLength < propertyOffset + const_1.default.MSG.PROP.TYPE_OFFSET) {\r\n                break;\r\n            }\r\n            var propertyType = this.ds.readByte(propertyOffset + const_1.default.MSG.PROP.TYPE_OFFSET);\r\n            switch (propertyType) {\r\n                case const_1.default.MSG.PROP.TYPE_ENUM.ROOT:\r\n                case const_1.default.MSG.PROP.TYPE_ENUM.DIRECTORY:\r\n                case const_1.default.MSG.PROP.TYPE_ENUM.DOCUMENT:\r\n                    props.push(this.convertProperty(propertyOffset));\r\n                    break;\r\n            }\r\n            propertyOffset += const_1.default.MSG.PROP.PROPERTY_SIZE;\r\n        }\r\n    };\r\n    Reader.prototype.createPropertyHierarchy = function (props, nodeProperty) {\r\n        if (!nodeProperty || nodeProperty.childProperty == const_1.default.MSG.PROP.NO_INDEX) {\r\n            return;\r\n        }\r\n        nodeProperty.children = [];\r\n        var children = [nodeProperty.childProperty];\r\n        while (children.length != 0) {\r\n            var currentIndex = children.shift();\r\n            var current = props[currentIndex];\r\n            if (current == null) {\r\n                continue;\r\n            }\r\n            nodeProperty.children.push(currentIndex);\r\n            if (current.type == const_1.default.MSG.PROP.TYPE_ENUM.DIRECTORY) {\r\n                this.createPropertyHierarchy(props, current);\r\n            }\r\n            if (current.previousProperty != const_1.default.MSG.PROP.NO_INDEX) {\r\n                children.push(current.previousProperty);\r\n            }\r\n            if (current.nextProperty != const_1.default.MSG.PROP.NO_INDEX) {\r\n                children.push(current.nextProperty);\r\n            }\r\n        }\r\n    };\r\n    Reader.prototype.propertyDataReader = function (propertyStart) {\r\n        var props = [];\r\n        var currentOffset = propertyStart;\r\n        while (currentOffset != const_1.default.MSG.END_OF_CHAIN) {\r\n            this.convertBlockToProperties(currentOffset, props);\r\n            currentOffset = this.getNextBlock(currentOffset);\r\n        }\r\n        this.createPropertyHierarchy(props, props[0]);\r\n        return props;\r\n    };\r\n    /**\r\n     * Parse msg file.\r\n     */\r\n    Reader.prototype.parse = function () {\r\n        this.headerData();\r\n        this.batData = this.batDataReader();\r\n        if (this.xbatCount > 0) {\r\n            this.xbatDataReader();\r\n        }\r\n        this.sbatData = this.sbatDataReader();\r\n        this.propertyData = this.propertyDataReader(this.propertyStart);\r\n        this.bigBlockTable = this.readBigBlockTable();\r\n    };\r\n    Reader.prototype.batCountInHeader = function () {\r\n        var maxBatsInHeader = (const_1.default.MSG.S_BIG_BLOCK_SIZE - const_1.default.MSG.HEADER.BAT_START_OFFSET) / 4;\r\n        return Math.min(this.batCount, maxBatsInHeader);\r\n    };\r\n    Reader.prototype.batDataReader = function () {\r\n        var result = new Array(this.batCountInHeader());\r\n        this.ds.seek(const_1.default.MSG.HEADER.BAT_START_OFFSET);\r\n        for (var i = 0; i < result.length; i++) {\r\n            result[i] = this.ds.readInt32();\r\n        }\r\n        return result;\r\n    };\r\n    Reader.prototype.getBlockOffsetAt = function (offset) {\r\n        return (offset + 1) * this.bigBlockSize;\r\n    };\r\n    Reader.prototype.getBlockAt = function (offset) {\r\n        var startOffset = this.getBlockOffsetAt(offset);\r\n        this.ds.seek(startOffset);\r\n        return this.ds.readInt32Array(this.bigBlockLength);\r\n    };\r\n    Reader.prototype.getBlockValueAt = function (offset, index) {\r\n        var startOffset = this.getBlockOffsetAt(offset);\r\n        this.ds.seek(startOffset + 4 * index);\r\n        return this.ds.readInt32();\r\n    };\r\n    Reader.prototype.getNextBlockInner = function (offset, blockOffsetData) {\r\n        var currentBlock = Math.floor(offset / this.bigBlockLength);\r\n        var currentBlockIndex = offset % this.bigBlockLength;\r\n        var startBlockOffset = blockOffsetData[currentBlock];\r\n        if (typeof startBlockOffset === \"undefined\") {\r\n            return const_1.default.MSG.END_OF_CHAIN;\r\n        }\r\n        return this.getBlockValueAt(startBlockOffset, currentBlockIndex);\r\n    };\r\n    Reader.prototype.getNextBlock = function (offset) {\r\n        return this.getNextBlockInner(offset, this.batData);\r\n    };\r\n    Reader.prototype.sbatDataReader = function () {\r\n        var result = [];\r\n        var startIndex = this.sbatStart;\r\n        for (var i = 0; i < this.sbatCount && startIndex && startIndex != const_1.default.MSG.END_OF_CHAIN; i++) {\r\n            result.push(startIndex);\r\n            startIndex = this.getNextBlock(startIndex);\r\n        }\r\n        return result;\r\n    };\r\n    Reader.prototype.xbatDataReader = function () {\r\n        var batCount = this.batCountInHeader();\r\n        var batCountTotal = this.batCount;\r\n        var remainingBlocks = batCountTotal - batCount;\r\n        var nextBlockAt = this.xbatStart;\r\n        for (var i = 0; i < this.xbatCount; i++) {\r\n            var xBatBlock = this.getBlockAt(nextBlockAt);\r\n            var blocksToProcess = Math.min(remainingBlocks, this.xBlockLength);\r\n            for (var j = 0; j < blocksToProcess; j++) {\r\n                var blockStartAt = xBatBlock[j];\r\n                if (blockStartAt == const_1.default.MSG.UNUSED_BLOCK || blockStartAt == const_1.default.MSG.END_OF_CHAIN) {\r\n                    break;\r\n                }\r\n                this.batData.push(blockStartAt);\r\n            }\r\n            remainingBlocks -= blocksToProcess;\r\n            nextBlockAt = xBatBlock[this.xBlockLength];\r\n            if (nextBlockAt == const_1.default.MSG.UNUSED_BLOCK || nextBlockAt == const_1.default.MSG.END_OF_CHAIN) {\r\n                break;\r\n            }\r\n        }\r\n    };\r\n    Reader.prototype.getNextBlockSmall = function (offset) {\r\n        return this.getNextBlockInner(offset, this.sbatData);\r\n    };\r\n    Reader.prototype.getChainByBlockSmall = function (fieldProperty) {\r\n        var blockChain = [];\r\n        var nextBlockSmall = fieldProperty.startBlock;\r\n        while (nextBlockSmall != const_1.default.MSG.END_OF_CHAIN) {\r\n            blockChain.push(nextBlockSmall);\r\n            nextBlockSmall = this.getNextBlockSmall(nextBlockSmall);\r\n        }\r\n        return blockChain;\r\n    };\r\n    Reader.prototype.readBigBlockTable = function () {\r\n        var rootProp = this.propertyData[0];\r\n        var table = [];\r\n        var nextBlock = rootProp.startBlock;\r\n        for (var i = 0; nextBlock != const_1.default.MSG.END_OF_CHAIN; i++) {\r\n            table.push(nextBlock);\r\n            nextBlock = this.getNextBlock(nextBlock);\r\n        }\r\n        return table;\r\n    };\r\n    Reader.prototype.readDataByBlockSmall = function (startBlock, blockSize, arr, dstOffset) {\r\n        var byteOffset = startBlock * const_1.default.MSG.SMALL_BLOCK_SIZE;\r\n        var bigBlockNumber = Math.floor(byteOffset / this.bigBlockSize);\r\n        var bigBlockOffset = byteOffset % this.bigBlockSize;\r\n        var nextBlock = this.bigBlockTable[bigBlockNumber];\r\n        var blockStartOffset = this.getBlockOffsetAt(nextBlock);\r\n        this.ds.seek(blockStartOffset + bigBlockOffset);\r\n        return this.ds.readToUint8Array(blockSize, arr, dstOffset);\r\n    };\r\n    Reader.prototype.readChainDataByBlockSmall = function (fieldProperty, chain) {\r\n        var resultData = new Uint8Array(fieldProperty.sizeBlock);\r\n        for (var i = 0, idx = 0; i < chain.length; i++) {\r\n            var readLen = (resultData.length < idx + const_1.default.MSG.SMALL_BLOCK_SIZE)\r\n                ? resultData.length - idx\r\n                : const_1.default.MSG.SMALL_BLOCK_SIZE;\r\n            this.readDataByBlockSmall(chain[i], readLen, resultData, idx);\r\n            idx += readLen;\r\n        }\r\n        return resultData;\r\n    };\r\n    Reader.prototype.readProperty = function (fieldProperty) {\r\n        if (!fieldProperty.sizeBlock) {\r\n            return new Uint8Array(0);\r\n        }\r\n        else if (fieldProperty.sizeBlock < const_1.default.MSG.BIG_BLOCK_MIN_DOC_SIZE) {\r\n            var chain = this.getChainByBlockSmall(fieldProperty);\r\n            if (chain.length == 1) {\r\n                var resultData = new Uint8Array(fieldProperty.sizeBlock);\r\n                this.readDataByBlockSmall(fieldProperty.startBlock, fieldProperty.sizeBlock, resultData, 0);\r\n                return resultData;\r\n            }\r\n            else if (chain.length > 1) {\r\n                return this.readChainDataByBlockSmall(fieldProperty, chain);\r\n            }\r\n            return new Uint8Array(0);\r\n        }\r\n        else {\r\n            var nextBlock = fieldProperty.startBlock;\r\n            var remaining = fieldProperty.sizeBlock;\r\n            var position = 0;\r\n            var resultData = new Uint8Array(fieldProperty.sizeBlock);\r\n            while (1 <= remaining) {\r\n                var blockStartOffset = this.getBlockOffsetAt(nextBlock);\r\n                this.ds.seek(blockStartOffset);\r\n                var partSize = Math.min(remaining, this.bigBlockSize);\r\n                var part = this.ds.readUint8Array(partSize);\r\n                resultData.set(part, position);\r\n                position += partSize;\r\n                remaining -= partSize;\r\n                nextBlock = this.getNextBlock(nextBlock);\r\n            }\r\n            return resultData;\r\n        }\r\n    };\r\n    /**\r\n     * Get binary from document in CFBF.\r\n     *\r\n     * @param index entry index\r\n     * @returns binary\r\n     * @internal\r\n     */\r\n    Reader.prototype.readFileOf = function (index) {\r\n        return this.readProperty(this.propertyData[index]);\r\n    };\r\n    Reader.prototype.folderOf = function (index) {\r\n        var _this = this;\r\n        var propertyData = this.propertyData;\r\n        if (!propertyData) {\r\n            return null;\r\n        }\r\n        var folder = propertyData[index];\r\n        return {\r\n            dataId: index,\r\n            name: folder.name,\r\n            fileNames: function () {\r\n                var children = folder.children;\r\n                if (children) {\r\n                    return children\r\n                        .map(function (subIndex) { return propertyData[subIndex]; })\r\n                        .filter(function (it) { return it.type === TypeEnum.DOCUMENT; })\r\n                        .map(function (it) { return it.name; });\r\n                }\r\n                return [];\r\n            },\r\n            fileNameSets: function () {\r\n                var children = folder.children;\r\n                if (children) {\r\n                    return children\r\n                        .map(function (subIndex) { return ({\r\n                        subIndex: subIndex,\r\n                        entry: propertyData[subIndex]\r\n                    }); })\r\n                        .filter(function (it) { return it.entry.type === TypeEnum.DOCUMENT; })\r\n                        .map(function (it) { return ({\r\n                        name: it.entry.name,\r\n                        length: it.entry.sizeBlock,\r\n                        dataId: it.subIndex,\r\n                        provider: function () { return _this.readProperty(it.entry); },\r\n                    }); });\r\n                }\r\n                return [];\r\n            },\r\n            subFolders: function () {\r\n                var children = folder.children;\r\n                if (children) {\r\n                    return children\r\n                        .filter(function (subIndex) { return propertyData[subIndex].type == TypeEnum.DIRECTORY; })\r\n                        .map(function (subIndex) { return _this.folderOf(subIndex); });\r\n                }\r\n                return [];\r\n            },\r\n            readFile: function (fileName) {\r\n                var children = folder.children;\r\n                if (children) {\r\n                    for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\r\n                        var subIndex = children_1[_i];\r\n                        var file = propertyData[subIndex];\r\n                        if (file && file.type === TypeEnum.DOCUMENT && file.name === fileName) {\r\n                            return _this.readProperty(file);\r\n                        }\r\n                    }\r\n                }\r\n                return null;\r\n            },\r\n        };\r\n    };\r\n    /**\r\n     * Get reader access to CFBF (valid after successful call of {@link parse}).\r\n     *\r\n     * @returns root folder\r\n     */\r\n    Reader.prototype.rootFolder = function () {\r\n        return this.folderOf(0);\r\n    };\r\n    return Reader;\r\n}());\r\nexports.Reader = Reader;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/Reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/TZDEFINITIONParser.js":
/*!********************************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/TZDEFINITIONParser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.parse = void 0;\r\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/utils.js\");\r\nvar TZDEFINITION_FLAG_VALID_GUID = 1;\r\nvar TZDEFINITION_FLAG_VALID_KEYNAME = 2;\r\nvar TZRULE_FLAG_EFFECTIVE_TZREG = 2;\r\nvar TZRULE_FLAG_RECUR_CURRENT_TZREG = 1;\r\n/**\r\n * @internal\r\n */\r\nfunction parse(ds) {\r\n    // About persisting TZDEFINITION to a stream to commit to a binary property\r\n    // https://learn.microsoft.com/en-us/office/client-developer/outlook/auxiliary/about-persisting-tzdefinition-to-a-stream-to-commit-to-a-binary-property?redirectedfrom=MSDN\r\n    var tz = { rules: [] };\r\n    if (!ds.isEof()) {\r\n        var bMajorVersion = ds.readUint8();\r\n        if (bMajorVersion !== 2) {\r\n            throw new Error(\"TZDEFINITION major version not supported\");\r\n        }\r\n        var bMinorVersion = ds.readUint8();\r\n        if (bMajorVersion < 1) {\r\n            throw new Error(\"TZDEFINITION minor version not supported\");\r\n        }\r\n        var cbHeader = ds.readUint16();\r\n        var wFlags = ds.readUint16();\r\n        if (wFlags & TZDEFINITION_FLAG_VALID_GUID) {\r\n            ds.readInt32();\r\n            ds.readInt32();\r\n            ds.readInt32();\r\n            ds.readInt32();\r\n        }\r\n        if (wFlags & TZDEFINITION_FLAG_VALID_KEYNAME) {\r\n            var cchKeyName = ds.readUint16();\r\n            tz.keyName = ds.readUCS2String(cchKeyName);\r\n        }\r\n        var cRules = ds.readUint16();\r\n        ds.seek(4 + cbHeader);\r\n        for (var x = 0; x < cRules; x++) {\r\n            var bMajorVersion_1 = ds.readUint8();\r\n            if (bMajorVersion_1 !== 2) {\r\n                break;\r\n            }\r\n            var bMinorVersion_1 = ds.readUint8();\r\n            if (bMajorVersion_1 < 1) {\r\n                break;\r\n            }\r\n            var cbRule = ds.readUint16();\r\n            var basePos = ds.position;\r\n            var wFlags_1 = ds.readUint16();\r\n            var stStart = (0, utils_1.readSystemTime)(ds);\r\n            var lBias = ds.readInt32();\r\n            var lStandardBias = ds.readInt32();\r\n            var lDaylightBias = ds.readInt32();\r\n            var stStandardDate = (0, utils_1.readTransitionSystemTime)(ds);\r\n            var stDaylightDate = (0, utils_1.readTransitionSystemTime)(ds);\r\n            var rule = Object.assign({}, {\r\n                flags: wFlags_1,\r\n                start: (stStart === null || stStart === void 0 ? void 0 : stStart.toUTCString()) || null,\r\n                bias: lBias,\r\n                standardBias: lStandardBias,\r\n                daylightBias: lDaylightBias,\r\n                standardDate: stStandardDate,\r\n                daylightDate: stDaylightDate,\r\n            });\r\n            tz.rules.push(rule);\r\n            ds.seek(basePos + cbRule);\r\n        }\r\n    }\r\n    return tz;\r\n}\r\nexports.parse = parse;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvVFpERUZJTklUSU9OUGFyc2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWE7QUFDYixjQUFjLG1CQUFPLENBQUMsc0VBQVM7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL21zZ3RvaHRtbC8uL25vZGVfbW9kdWxlcy9Aa2Vuaml1bm8vbXNncmVhZGVyL2xpYi9UWkRFRklOSVRJT05QYXJzZXIuanM/ZjE0OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnBhcnNlID0gdm9pZCAwO1xyXG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xyXG52YXIgVFpERUZJTklUSU9OX0ZMQUdfVkFMSURfR1VJRCA9IDE7XHJcbnZhciBUWkRFRklOSVRJT05fRkxBR19WQUxJRF9LRVlOQU1FID0gMjtcclxudmFyIFRaUlVMRV9GTEFHX0VGRkVDVElWRV9UWlJFRyA9IDI7XHJcbnZhciBUWlJVTEVfRkxBR19SRUNVUl9DVVJSRU5UX1RaUkVHID0gMTtcclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2UoZHMpIHtcclxuICAgIC8vIEFib3V0IHBlcnNpc3RpbmcgVFpERUZJTklUSU9OIHRvIGEgc3RyZWFtIHRvIGNvbW1pdCB0byBhIGJpbmFyeSBwcm9wZXJ0eVxyXG4gICAgLy8gaHR0cHM6Ly9sZWFybi5taWNyb3NvZnQuY29tL2VuLXVzL29mZmljZS9jbGllbnQtZGV2ZWxvcGVyL291dGxvb2svYXV4aWxpYXJ5L2Fib3V0LXBlcnNpc3RpbmctdHpkZWZpbml0aW9uLXRvLWEtc3RyZWFtLXRvLWNvbW1pdC10by1hLWJpbmFyeS1wcm9wZXJ0eT9yZWRpcmVjdGVkZnJvbT1NU0ROXHJcbiAgICB2YXIgdHogPSB7IHJ1bGVzOiBbXSB9O1xyXG4gICAgaWYgKCFkcy5pc0VvZigpKSB7XHJcbiAgICAgICAgdmFyIGJNYWpvclZlcnNpb24gPSBkcy5yZWFkVWludDgoKTtcclxuICAgICAgICBpZiAoYk1ham9yVmVyc2lvbiAhPT0gMikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUWkRFRklOSVRJT04gbWFqb3IgdmVyc2lvbiBub3Qgc3VwcG9ydGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgYk1pbm9yVmVyc2lvbiA9IGRzLnJlYWRVaW50OCgpO1xyXG4gICAgICAgIGlmIChiTWFqb3JWZXJzaW9uIDwgMSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUWkRFRklOSVRJT04gbWlub3IgdmVyc2lvbiBub3Qgc3VwcG9ydGVkXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2JIZWFkZXIgPSBkcy5yZWFkVWludDE2KCk7XHJcbiAgICAgICAgdmFyIHdGbGFncyA9IGRzLnJlYWRVaW50MTYoKTtcclxuICAgICAgICBpZiAod0ZsYWdzICYgVFpERUZJTklUSU9OX0ZMQUdfVkFMSURfR1VJRCkge1xyXG4gICAgICAgICAgICBkcy5yZWFkSW50MzIoKTtcclxuICAgICAgICAgICAgZHMucmVhZEludDMyKCk7XHJcbiAgICAgICAgICAgIGRzLnJlYWRJbnQzMigpO1xyXG4gICAgICAgICAgICBkcy5yZWFkSW50MzIoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHdGbGFncyAmIFRaREVGSU5JVElPTl9GTEFHX1ZBTElEX0tFWU5BTUUpIHtcclxuICAgICAgICAgICAgdmFyIGNjaEtleU5hbWUgPSBkcy5yZWFkVWludDE2KCk7XHJcbiAgICAgICAgICAgIHR6LmtleU5hbWUgPSBkcy5yZWFkVUNTMlN0cmluZyhjY2hLZXlOYW1lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNSdWxlcyA9IGRzLnJlYWRVaW50MTYoKTtcclxuICAgICAgICBkcy5zZWVrKDQgKyBjYkhlYWRlcik7XHJcbiAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBjUnVsZXM7IHgrKykge1xyXG4gICAgICAgICAgICB2YXIgYk1ham9yVmVyc2lvbl8xID0gZHMucmVhZFVpbnQ4KCk7XHJcbiAgICAgICAgICAgIGlmIChiTWFqb3JWZXJzaW9uXzEgIT09IDIpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBiTWlub3JWZXJzaW9uXzEgPSBkcy5yZWFkVWludDgoKTtcclxuICAgICAgICAgICAgaWYgKGJNYWpvclZlcnNpb25fMSA8IDEpIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBjYlJ1bGUgPSBkcy5yZWFkVWludDE2KCk7XHJcbiAgICAgICAgICAgIHZhciBiYXNlUG9zID0gZHMucG9zaXRpb247XHJcbiAgICAgICAgICAgIHZhciB3RmxhZ3NfMSA9IGRzLnJlYWRVaW50MTYoKTtcclxuICAgICAgICAgICAgdmFyIHN0U3RhcnQgPSAoMCwgdXRpbHNfMS5yZWFkU3lzdGVtVGltZSkoZHMpO1xyXG4gICAgICAgICAgICB2YXIgbEJpYXMgPSBkcy5yZWFkSW50MzIoKTtcclxuICAgICAgICAgICAgdmFyIGxTdGFuZGFyZEJpYXMgPSBkcy5yZWFkSW50MzIoKTtcclxuICAgICAgICAgICAgdmFyIGxEYXlsaWdodEJpYXMgPSBkcy5yZWFkSW50MzIoKTtcclxuICAgICAgICAgICAgdmFyIHN0U3RhbmRhcmREYXRlID0gKDAsIHV0aWxzXzEucmVhZFRyYW5zaXRpb25TeXN0ZW1UaW1lKShkcyk7XHJcbiAgICAgICAgICAgIHZhciBzdERheWxpZ2h0RGF0ZSA9ICgwLCB1dGlsc18xLnJlYWRUcmFuc2l0aW9uU3lzdGVtVGltZSkoZHMpO1xyXG4gICAgICAgICAgICB2YXIgcnVsZSA9IE9iamVjdC5hc3NpZ24oe30sIHtcclxuICAgICAgICAgICAgICAgIGZsYWdzOiB3RmxhZ3NfMSxcclxuICAgICAgICAgICAgICAgIHN0YXJ0OiAoc3RTdGFydCA9PT0gbnVsbCB8fCBzdFN0YXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzdFN0YXJ0LnRvVVRDU3RyaW5nKCkpIHx8IG51bGwsXHJcbiAgICAgICAgICAgICAgICBiaWFzOiBsQmlhcyxcclxuICAgICAgICAgICAgICAgIHN0YW5kYXJkQmlhczogbFN0YW5kYXJkQmlhcyxcclxuICAgICAgICAgICAgICAgIGRheWxpZ2h0QmlhczogbERheWxpZ2h0QmlhcyxcclxuICAgICAgICAgICAgICAgIHN0YW5kYXJkRGF0ZTogc3RTdGFuZGFyZERhdGUsXHJcbiAgICAgICAgICAgICAgICBkYXlsaWdodERhdGU6IHN0RGF5bGlnaHREYXRlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdHoucnVsZXMucHVzaChydWxlKTtcclxuICAgICAgICAgICAgZHMuc2VlayhiYXNlUG9zICsgY2JSdWxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHo7XHJcbn1cclxuZXhwb3J0cy5wYXJzZSA9IHBhcnNlO1xyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/TZDEFINITIONParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/TZREGParser.js":
/*!*************************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/TZREGParser.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.parse = void 0;\r\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/utils.js\");\r\n/**\r\n * @internal\r\n */\r\nfunction parse(ds) {\r\n    // PidLidTimeZoneStruct Canonical Property\r\n    // https://learn.microsoft.com/en-us/office/client-developer/outlook/mapi/pidlidtimezonestruct-canonical-property\r\n    if (!ds.isEof()) {\r\n        var lBias = ds.readInt32();\r\n        var lStandardBias = ds.readInt32();\r\n        var lDaylightBias = ds.readInt32();\r\n        var wStandardYear = ds.readUint16();\r\n        var stStandardDate = (0, utils_1.readTransitionSystemTime)(ds);\r\n        var wDaylightYear = ds.readUint16();\r\n        var stDaylightDate = (0, utils_1.readTransitionSystemTime)(ds);\r\n        return Object.assign({}, {\r\n            bias: lBias,\r\n            standardBias: lStandardBias,\r\n            daylightBias: lDaylightBias,\r\n            standardYear: wStandardYear,\r\n            standardDate: stStandardDate,\r\n            daylightYear: wDaylightYear,\r\n            daylightDate: stDaylightDate,\r\n        });\r\n    }\r\n    return null;\r\n}\r\nexports.parse = parse;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvVFpSRUdQYXJzZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiLGNBQWMsbUJBQU8sQ0FBQyxzRUFBUztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tc2d0b2h0bWwvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvVFpSRUdQYXJzZXIuanM/M2QyYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG5leHBvcnRzLnBhcnNlID0gdm9pZCAwO1xyXG52YXIgdXRpbHNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xyXG4vKipcclxuICogQGludGVybmFsXHJcbiAqL1xyXG5mdW5jdGlvbiBwYXJzZShkcykge1xyXG4gICAgLy8gUGlkTGlkVGltZVpvbmVTdHJ1Y3QgQ2Fub25pY2FsIFByb3BlcnR5XHJcbiAgICAvLyBodHRwczovL2xlYXJuLm1pY3Jvc29mdC5jb20vZW4tdXMvb2ZmaWNlL2NsaWVudC1kZXZlbG9wZXIvb3V0bG9vay9tYXBpL3BpZGxpZHRpbWV6b25lc3RydWN0LWNhbm9uaWNhbC1wcm9wZXJ0eVxyXG4gICAgaWYgKCFkcy5pc0VvZigpKSB7XHJcbiAgICAgICAgdmFyIGxCaWFzID0gZHMucmVhZEludDMyKCk7XHJcbiAgICAgICAgdmFyIGxTdGFuZGFyZEJpYXMgPSBkcy5yZWFkSW50MzIoKTtcclxuICAgICAgICB2YXIgbERheWxpZ2h0QmlhcyA9IGRzLnJlYWRJbnQzMigpO1xyXG4gICAgICAgIHZhciB3U3RhbmRhcmRZZWFyID0gZHMucmVhZFVpbnQxNigpO1xyXG4gICAgICAgIHZhciBzdFN0YW5kYXJkRGF0ZSA9ICgwLCB1dGlsc18xLnJlYWRUcmFuc2l0aW9uU3lzdGVtVGltZSkoZHMpO1xyXG4gICAgICAgIHZhciB3RGF5bGlnaHRZZWFyID0gZHMucmVhZFVpbnQxNigpO1xyXG4gICAgICAgIHZhciBzdERheWxpZ2h0RGF0ZSA9ICgwLCB1dGlsc18xLnJlYWRUcmFuc2l0aW9uU3lzdGVtVGltZSkoZHMpO1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCB7XHJcbiAgICAgICAgICAgIGJpYXM6IGxCaWFzLFxyXG4gICAgICAgICAgICBzdGFuZGFyZEJpYXM6IGxTdGFuZGFyZEJpYXMsXHJcbiAgICAgICAgICAgIGRheWxpZ2h0QmlhczogbERheWxpZ2h0QmlhcyxcclxuICAgICAgICAgICAgc3RhbmRhcmRZZWFyOiB3U3RhbmRhcmRZZWFyLFxyXG4gICAgICAgICAgICBzdGFuZGFyZERhdGU6IHN0U3RhbmRhcmREYXRlLFxyXG4gICAgICAgICAgICBkYXlsaWdodFllYXI6IHdEYXlsaWdodFllYXIsXHJcbiAgICAgICAgICAgIGRheWxpZ2h0RGF0ZTogc3REYXlsaWdodERhdGUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5leHBvcnRzLnBhcnNlID0gcGFyc2U7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/TZREGParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/VerbStreamParser.js":
/*!******************************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/VerbStreamParser.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.parse = void 0;\r\n/**\r\n * @internal\r\n */\r\nfunction parse(ds) {\r\n    // 2.2.1.74.1 VoteOption Structure\r\n    // https://docs.microsoft.com/en-us/openspecs/exchange_server_protocols/ms-oxomsg/87488eff-3eec-4502-bc94-2368c04e3109\r\n    var items = [];\r\n    var count = 0;\r\n    while (!ds.isEof()) {\r\n        var version = ds.readUint16();\r\n        if (version === 258) {\r\n            count = ds.readUint16();\r\n            var dummy1 = ds.readUint16();\r\n            for (var index = 0; index < count; index += 1) {\r\n                var VerbType = ds.readInt32();\r\n                var DisplayNameCount = ds.readUint8();\r\n                var DisplayName = ds.readString(DisplayNameCount);\r\n                var MsgClsNameCount = ds.readUint8();\r\n                var MsgClsName = ds.readString(MsgClsNameCount);\r\n                var Internal1StringCount = ds.readUint8();\r\n                var Internal1String = ds.readString(Internal1StringCount);\r\n                var DisplayNameCountRepeat = ds.readUint8();\r\n                var DisplayNameRepeat = ds.readString(DisplayNameCountRepeat);\r\n                var Internal2 = ds.readInt32();\r\n                var Internal3 = ds.readUint8();\r\n                var fUseUSHeaders = ds.readInt32();\r\n                var Internal4 = ds.readInt32();\r\n                var SendBehavior = ds.readInt32();\r\n                var Internal5 = ds.readInt32();\r\n                var ID = ds.readInt32();\r\n                var Internal6 = ds.readInt32();\r\n                items.push({ VerbType: VerbType, DisplayName: DisplayName });\r\n            }\r\n        }\r\n        else if (version === 260) {\r\n            for (var index = 0; index < count; index += 1) {\r\n                var DisplayNameCount = ds.readUint8();\r\n                var DisplayName = ds.readUCS2String(DisplayNameCount);\r\n                var DisplayNameCountRepeat = ds.readUint8();\r\n                var DisplayNameRepeat = ds.readUCS2String(DisplayNameCountRepeat);\r\n                items[index].DisplayName = DisplayName;\r\n            }\r\n        }\r\n    }\r\n    return items\r\n        .filter(function (it) { return it.VerbType === 4; })\r\n        .map(function (it) { return it.DisplayName; })\r\n        .join(\";\");\r\n}\r\nexports.parse = parse;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvVmVyYlN0cmVhbVBhcnNlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZUFBZTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDhDQUE4QztBQUMzRTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZUFBZTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsMkJBQTJCO0FBQzNELDZCQUE2Qix3QkFBd0I7QUFDckQsZ0JBQWdCO0FBQ2hCO0FBQ0EsYUFBYSIsInNvdXJjZXMiOlsid2VicGFjazovL21zZ3RvaHRtbC8uL25vZGVfbW9kdWxlcy9Aa2Vuaml1bm8vbXNncmVhZGVyL2xpYi9WZXJiU3RyZWFtUGFyc2VyLmpzPzhiZmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5wYXJzZSA9IHZvaWQgMDtcclxuLyoqXHJcbiAqIEBpbnRlcm5hbFxyXG4gKi9cclxuZnVuY3Rpb24gcGFyc2UoZHMpIHtcclxuICAgIC8vIDIuMi4xLjc0LjEgVm90ZU9wdGlvbiBTdHJ1Y3R1cmVcclxuICAgIC8vIGh0dHBzOi8vZG9jcy5taWNyb3NvZnQuY29tL2VuLXVzL29wZW5zcGVjcy9leGNoYW5nZV9zZXJ2ZXJfcHJvdG9jb2xzL21zLW94b21zZy84NzQ4OGVmZi0zZWVjLTQ1MDItYmM5NC0yMzY4YzA0ZTMxMDlcclxuICAgIHZhciBpdGVtcyA9IFtdO1xyXG4gICAgdmFyIGNvdW50ID0gMDtcclxuICAgIHdoaWxlICghZHMuaXNFb2YoKSkge1xyXG4gICAgICAgIHZhciB2ZXJzaW9uID0gZHMucmVhZFVpbnQxNigpO1xyXG4gICAgICAgIGlmICh2ZXJzaW9uID09PSAyNTgpIHtcclxuICAgICAgICAgICAgY291bnQgPSBkcy5yZWFkVWludDE2KCk7XHJcbiAgICAgICAgICAgIHZhciBkdW1teTEgPSBkcy5yZWFkVWludDE2KCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBjb3VudDsgaW5kZXggKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIFZlcmJUeXBlID0gZHMucmVhZEludDMyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgRGlzcGxheU5hbWVDb3VudCA9IGRzLnJlYWRVaW50OCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIERpc3BsYXlOYW1lID0gZHMucmVhZFN0cmluZyhEaXNwbGF5TmFtZUNvdW50KTtcclxuICAgICAgICAgICAgICAgIHZhciBNc2dDbHNOYW1lQ291bnQgPSBkcy5yZWFkVWludDgoKTtcclxuICAgICAgICAgICAgICAgIHZhciBNc2dDbHNOYW1lID0gZHMucmVhZFN0cmluZyhNc2dDbHNOYW1lQ291bnQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIEludGVybmFsMVN0cmluZ0NvdW50ID0gZHMucmVhZFVpbnQ4KCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgSW50ZXJuYWwxU3RyaW5nID0gZHMucmVhZFN0cmluZyhJbnRlcm5hbDFTdHJpbmdDb3VudCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgRGlzcGxheU5hbWVDb3VudFJlcGVhdCA9IGRzLnJlYWRVaW50OCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIERpc3BsYXlOYW1lUmVwZWF0ID0gZHMucmVhZFN0cmluZyhEaXNwbGF5TmFtZUNvdW50UmVwZWF0KTtcclxuICAgICAgICAgICAgICAgIHZhciBJbnRlcm5hbDIgPSBkcy5yZWFkSW50MzIoKTtcclxuICAgICAgICAgICAgICAgIHZhciBJbnRlcm5hbDMgPSBkcy5yZWFkVWludDgoKTtcclxuICAgICAgICAgICAgICAgIHZhciBmVXNlVVNIZWFkZXJzID0gZHMucmVhZEludDMyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgSW50ZXJuYWw0ID0gZHMucmVhZEludDMyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgU2VuZEJlaGF2aW9yID0gZHMucmVhZEludDMyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgSW50ZXJuYWw1ID0gZHMucmVhZEludDMyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgSUQgPSBkcy5yZWFkSW50MzIoKTtcclxuICAgICAgICAgICAgICAgIHZhciBJbnRlcm5hbDYgPSBkcy5yZWFkSW50MzIoKTtcclxuICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goeyBWZXJiVHlwZTogVmVyYlR5cGUsIERpc3BsYXlOYW1lOiBEaXNwbGF5TmFtZSB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2ZXJzaW9uID09PSAyNjApIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGNvdW50OyBpbmRleCArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgRGlzcGxheU5hbWVDb3VudCA9IGRzLnJlYWRVaW50OCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIERpc3BsYXlOYW1lID0gZHMucmVhZFVDUzJTdHJpbmcoRGlzcGxheU5hbWVDb3VudCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgRGlzcGxheU5hbWVDb3VudFJlcGVhdCA9IGRzLnJlYWRVaW50OCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIERpc3BsYXlOYW1lUmVwZWF0ID0gZHMucmVhZFVDUzJTdHJpbmcoRGlzcGxheU5hbWVDb3VudFJlcGVhdCk7XHJcbiAgICAgICAgICAgICAgICBpdGVtc1tpbmRleF0uRGlzcGxheU5hbWUgPSBEaXNwbGF5TmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBpdGVtc1xyXG4gICAgICAgIC5maWx0ZXIoZnVuY3Rpb24gKGl0KSB7IHJldHVybiBpdC5WZXJiVHlwZSA9PT0gNDsgfSlcclxuICAgICAgICAubWFwKGZ1bmN0aW9uIChpdCkgeyByZXR1cm4gaXQuRGlzcGxheU5hbWU7IH0pXHJcbiAgICAgICAgLmpvaW4oXCI7XCIpO1xyXG59XHJcbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/VerbStreamParser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/const.js":
/*!*******************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/const.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/utils.js\");\r\nexports[\"default\"] = {\r\n    FILE_HEADER: (0, utils_1.uInt2int)([0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1]),\r\n    MSG: {\r\n        UNUSED_BLOCK: -1,\r\n        END_OF_CHAIN: -2,\r\n        S_BIG_BLOCK_SIZE: 0x0200,\r\n        S_BIG_BLOCK_MARK: 9,\r\n        L_BIG_BLOCK_SIZE: 0x1000,\r\n        L_BIG_BLOCK_MARK: 12,\r\n        SMALL_BLOCK_SIZE: 0x0040,\r\n        BIG_BLOCK_MIN_DOC_SIZE: 0x1000,\r\n        HEADER: {\r\n            PROPERTY_START_OFFSET: 0x30,\r\n            BAT_START_OFFSET: 0x4c,\r\n            BAT_COUNT_OFFSET: 0x2C,\r\n            SBAT_START_OFFSET: 0x3C,\r\n            SBAT_COUNT_OFFSET: 0x40,\r\n            XBAT_START_OFFSET: 0x44,\r\n            XBAT_COUNT_OFFSET: 0x48\r\n        },\r\n        PROP: {\r\n            NO_INDEX: -1,\r\n            PROPERTY_SIZE: 0x0080,\r\n            NAME_SIZE_OFFSET: 0x40,\r\n            MAX_NAME_LENGTH: ( /*NAME_SIZE_OFFSET*/0x40 / 2) - 1,\r\n            TYPE_OFFSET: 0x42,\r\n            PREVIOUS_PROPERTY_OFFSET: 0x44,\r\n            NEXT_PROPERTY_OFFSET: 0x48,\r\n            CHILD_PROPERTY_OFFSET: 0x4C,\r\n            START_BLOCK_OFFSET: 0x74,\r\n            SIZE_OFFSET: 0x78,\r\n            TYPE_ENUM: {\r\n                DIRECTORY: 1,\r\n                DOCUMENT: 2,\r\n                ROOT: 5\r\n            }\r\n        },\r\n        FIELD: {\r\n            PREFIX: {\r\n                ATTACHMENT: '__attach_version1.0',\r\n                RECIPIENT: '__recip_version1.0',\r\n                DOCUMENT: '__substg1.',\r\n                NAMEID: '__nameid_version1.0'\r\n            },\r\n            // example (use fields as needed)\r\n            NAME_MAPPING: {\r\n                // email specific\r\n                '001a': 'messageClass',\r\n                '0037': 'subject',\r\n                '0c1a': 'senderName',\r\n                '0c1e': 'senderAddressType',\r\n                '0c1f': 'senderEmail',\r\n                '5d01': 'senderSmtpAddress',\r\n                '5d02': 'sentRepresentingSmtpAddress',\r\n                '5d0a': 'creatorSMTPAddress',\r\n                '5d0b': 'lastModifierSMTPAddress',\r\n                '1000': 'body',\r\n                '007d': 'headers',\r\n                '1009': 'compressedRtf',\r\n                '3ffa': 'lastModifierName',\r\n                '0039': 'clientSubmitTime',\r\n                '0e06': 'messageDeliveryTime',\r\n                '3fde': 'internetCodepage',\r\n                '3ffd': 'messageCodepage',\r\n                '3ff1': 'messageLocaleId',\r\n                '0e07': 'messageFlags',\r\n                '1035': 'messageId',\r\n                // attachment specific\r\n                '3007': 'creationTime',\r\n                '3008': 'lastModificationTime',\r\n                '3703': 'extension',\r\n                '3704': 'fileNameShort',\r\n                '3707': 'fileName',\r\n                '3712': 'pidContentId',\r\n                '7ffe': 'attachmentHidden',\r\n                '370e': 'attachMimeTag',\r\n                // recipient specific\r\n                '0c15': 'recipType',\r\n                '3001': 'name',\r\n                '3002': 'addressType',\r\n                '3003': 'email',\r\n                '39fe': 'smtpAddress',\r\n                // contact specific\r\n                '3a18': 'departmentName',\r\n                '3a44': 'middleName',\r\n                '3a05': 'generation',\r\n                '3a11': 'surname',\r\n                '3a27': 'addressCity',\r\n                '3a16': 'companyName',\r\n                '3a24': 'businessFaxNumber',\r\n                '3a29': 'streetAddress',\r\n                '3a51': 'businessHomePage',\r\n                '3a06': 'givenName',\r\n                '3a09': 'homeTelephoneNumber',\r\n                '3a15': 'postalAddress',\r\n                '3a17': 'title',\r\n                '3a1c': 'mobileTelephoneNumber',\r\n                '3a26': 'country',\r\n                '3a28': 'stateOrProvince',\r\n                '3a2a': 'postalCode',\r\n                '3a45': 'displayNamePrefix',\r\n                '0070': 'conversationTopic',\r\n                '0e1d': 'normalizedSubject',\r\n                '3a08': 'businessTelephoneNumber',\r\n                '3a0d': 'location',\r\n            },\r\n            FULL_NAME_MAPPING: {\r\n                '1013001f': 'bodyHtml',\r\n                '10130102': 'html',\r\n            },\r\n            PIDLID_MAPPING: {\r\n                // PSETID_Common\r\n                \"00062008-0000-0000-c000-000000000046\": {\r\n                    0x00008520: { id: \"PidLidVerbStream\", },\r\n                    0x00008524: { id: \"PidLidVerbResponse\", dispid: \"votingResponse\", },\r\n                    0x00008580: { id: \"PidLidInternetAccountName\", dispid: \"inetAcctName\", },\r\n                },\r\n                // PSETID_Appointment\r\n                \"00062002-0000-0000-c000-000000000046\": {\r\n                    0x0000820D: { id: \"PidLidAppointmentStartWhole\", dispid: \"apptStartWhole\", },\r\n                    0x0000820E: { id: \"PidLidAppointmentEndWhole\", dispid: \"apptEndWhole\", },\r\n                    0x00008235: { id: \"PidLidClipStart\", dispid: \"clipStart\", },\r\n                    0x00008236: { id: \"PidLidClipEnd\", dispid: \"clipEnd\", },\r\n                    0x00008233: { id: \"PidLidTimeZoneStruct\", dispid: \"timeZoneStruct\" },\r\n                    0x00008234: { id: \"PidLidTimeZoneDescription\", dispid: \"timeZoneDesc\" },\r\n                    0x0000825E: { id: \"PidLidAppointmentTimeZoneDefinitionStartDisplay\", dispid: \"apptTZDefStartDisplay\" },\r\n                    0x0000825F: { id: \"PidLidAppointmentTimeZoneDefinitionEndDisplay\", dispid: \"apptTZDefEndDisplay\" },\r\n                    0x00008260: { id: \"PidLidAppointmentTimeZoneDefinitionRecur\", dispid: \"apptTZDefRecur\" },\r\n                    0x00008216: { id: \"PidLidAppointmentRecur\", dispid: \"apptRecur\" },\r\n                    0x00008208: { id: \"PidLidLocation\", dispid: \"apptLocation\", },\r\n                },\r\n                // PSETID_Address\r\n                \"00062004-0000-0000-c000-000000000046\": {\r\n                    0x0000802c: { id: \"dispidYomiFirstName\", dispid: \"yomiFirstName\", },\r\n                    0x00008083: { id: \"dispidEmail1EmailAddress\", dispid: \"email1EmailAddress\", },\r\n                    0x0000802e: { id: \"dispidYomiCompanyName\", dispid: \"yomiCompanyName\", },\r\n                    0x000080d2: { id: \"PidLidFax3AddressType\", dispid: \"fax3AddrType\", },\r\n                    0x00008080: { id: \"PidLidEmail1DisplayName\", dispid: \"email1DisplayName\", },\r\n                    0x00008084: { id: \"PidLidEmail1OriginalDisplayName\", dispid: \"email1OriginalDisplayName\", },\r\n                    0x00008005: { id: \"PidLidFileUnder\", dispid: \"fileUnder\", },\r\n                    0x0000802d: { id: \"PidLidYomiLastName\", dispid: \"yomiLastName\", },\r\n                    0x000080b2: { id: \"PidLidFax1AddressType\", dispid: \"fax1AddrType\", },\r\n                    0x000080c3: { id: \"PidLidFax2EmailAddress\", dispid: \"fax2EmailAddress\", },\r\n                    0x00008046: { id: \"PidLidWorkAddressCity\", dispid: \"workAddressCity\", },\r\n                    0x000080dd: { id: \"PidLidAddressCountryCode\", dispid: \"addressCountryCode\", },\r\n                    0x000080c2: { id: \"PidLidFax2AddressType\", dispid: \"fax2AddrType\", },\r\n                    0x000080c4: { id: \"PidLidFax2OriginalDisplayName\", dispid: \"fax2OriginalDisplayName\", },\r\n                    0x00008048: { id: \"PidLidWorkAddressPostalCode\", dispid: \"workAddressPostalCode\", },\r\n                    0x00008045: { id: \"PidLidWorkAddressStreet\", dispid: \"workAddressStreet\", },\r\n                    0x00008047: { id: \"PidLidWorkAddressState\", dispid: \"workAddressState\", },\r\n                    0x000080db: { id: \"PidLidWorkAddressCountryCode\", dispid: \"workAddressCountryCode\", },\r\n                    0x00008049: { id: \"PidLidWorkAddressCountry\", dispid: \"workAddressCountry\", },\r\n                    0x0000802b: { id: \"PidLidHtml\", dispid: \"contactHtml\", },\r\n                    0x0000801b: { id: \"PidLidWorkAddress\", dispid: \"workAddress\", },\r\n                    0x000080b4: { id: \"PidLidFax1OriginalDisplayName\", dispid: \"fax1OriginalDisplayName\", },\r\n                    0x00008062: { id: \"PidLidInstantMessagingAddress\", dispid: \"instMsg\", },\r\n                    0x00008010: { id: \"PidLidDepartment\", dispid: \"department\", },\r\n                    0x000080b3: { id: \"PidLidFax1EmailAddress\", dispid: \"fax1EmailAddress\", },\r\n                    0x000080d4: { id: \"PidLidFax3OriginalDisplayName\", dispid: \"fax3OriginalDisplayName\", },\r\n                    0x000080d3: { id: \"PidLidFax3EmailAddress\", dispid: \"fax3EmailAddress\", },\r\n                },\r\n                // PSETID_Meeting\r\n                \"6ed8da90-450b-101b-98da-00aa003f1305\": {\r\n                    0x00000003: { id: \"PidLidGlobalObjectId\", dispid: \"globalAppointmentID\", },\r\n                    0x00000028: { id: \"PidLidOldLocation\", dispid: \"apptOldLocation\", },\r\n                },\r\n            },\r\n            CLASS_MAPPING: {\r\n                ATTACHMENT_DATA: '3701'\r\n            },\r\n            TYPE_MAPPING: {\r\n                '001e': 'string',\r\n                '001f': 'unicode',\r\n                '0040': 'time',\r\n                '0102': 'binary',\r\n                '0003': 'integer',\r\n                '000b': 'boolean',\r\n            },\r\n            DIR_TYPE: {\r\n                INNER_MSG: '000d'\r\n            }\r\n        }\r\n    }\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/const.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n      desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}));\r\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\r\n};\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nvar MsgReader_1 = __importDefault(__webpack_require__(/*! ./MsgReader */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/MsgReader.js\"));\r\n__exportStar(__webpack_require__(/*! ./MsgReader */ \"(rsc)/./node_modules/@kenjiuno/msgreader/lib/MsgReader.js\"), exports);\r\nexports[\"default\"] = MsgReader_1.default;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0MsbUJBQU8sQ0FBQyw4RUFBYTtBQUN2RCxhQUFhLG1CQUFPLENBQUMsOEVBQWE7QUFDbEMsa0JBQWUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tc2d0b2h0bWwvLi9ub2RlX21vZHVsZXMvQGtlbmppdW5vL21zZ3JlYWRlci9saWIvaW5kZXguanM/MDFlNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcclxuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XHJcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xyXG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIG9bazJdID0gbVtrXTtcclxufSkpO1xyXG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcclxufTtcclxudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcclxufTtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG52YXIgTXNnUmVhZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vTXNnUmVhZGVyXCIpKTtcclxuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL01zZ1JlYWRlclwiKSwgZXhwb3J0cyk7XHJcbmV4cG9ydHMuZGVmYXVsdCA9IE1zZ1JlYWRlcl8xLmRlZmF1bHQ7XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kenjiuno/msgreader/lib/utils.js":
/*!*******************************************************!*\
  !*** ./node_modules/@kenjiuno/msgreader/lib/utils.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.bin2HexUpper = exports.readTransitionSystemTime = exports.readSystemTime = exports.emptyToNull = exports.msftUuidStringify = exports.toHex4 = exports.toHex2 = exports.toHex1 = exports.toHexStr = exports.uInt2int = exports.arraysEqual = void 0;\r\n/**\r\n * @internal\r\n */\r\nfunction arraysEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    if (a == null || b == null)\r\n        return false;\r\n    if (a.length != b.length)\r\n        return false;\r\n    for (var i = 0; i < a.length; i++) {\r\n        if (a[i] !== b[i])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\nexports.arraysEqual = arraysEqual;\r\n/**\r\n * @internal\r\n */\r\nfunction uInt2int(data) {\r\n    var result = new Array(data.length);\r\n    for (var i = 0; i < data.length; i++) {\r\n        result[i] = data[i] << 24 >> 24;\r\n    }\r\n    return result;\r\n}\r\nexports.uInt2int = uInt2int;\r\n/**\r\n * @internal\r\n */\r\nfunction toHexStr(value, padding) {\r\n    var text = \"\";\r\n    while (value != 0) {\r\n        text = \"0123456789abcdef\"[value & 15] + text;\r\n        value >>= 4;\r\n        text = \"0123456789abcdef\"[value & 15] + text;\r\n        value >>= 4;\r\n    }\r\n    while (text.length < padding) {\r\n        text = \"0\" + text;\r\n    }\r\n    return text;\r\n}\r\nexports.toHexStr = toHexStr;\r\nvar hex = \"0123456789abcdef\";\r\n/**\r\n * byte to lower case hex string\r\n *\r\n * @internal\r\n */\r\nfunction toHex1(value) {\r\n    return hex[(value >> 4) & 15]\r\n        + hex[(value) & 15];\r\n}\r\nexports.toHex1 = toHex1;\r\n/**\r\n * little uint16 to lower case hex string\r\n *\r\n * @internal\r\n */\r\nfunction toHex2(value) {\r\n    return hex[(value >> 12) & 15]\r\n        + hex[(value >> 8) & 15]\r\n        + hex[(value >> 4) & 15]\r\n        + hex[(value) & 15];\r\n}\r\nexports.toHex2 = toHex2;\r\n/**\r\n * little uint32 to lower case hex string\r\n *\r\n * @internal\r\n */\r\nfunction toHex4(value) {\r\n    return hex[(value >> 28) & 15]\r\n        + hex[(value >> 24) & 15]\r\n        + hex[(value >> 20) & 15]\r\n        + hex[(value >> 16) & 15]\r\n        + hex[(value >> 12) & 15]\r\n        + hex[(value >> 8) & 15]\r\n        + hex[(value >> 4) & 15]\r\n        + hex[(value) & 15];\r\n}\r\nexports.toHex4 = toHex4;\r\n/**\r\n * Variant 2 UUIDs, historically used in Microsoft's COM/OLE libraries,\r\n * use a mixed-endian format, whereby the first three components of the UUID are little-endian,\r\n * and the last two are big-endian.\r\n * For example, `00112233-4455-6677-8899-aabbccddeeff` is encoded as the bytes\r\n * `33 22 11 00 55 44 77 66 88 99 aa bb cc dd ee ff`.\r\n *\r\n * @see https://en.wikipedia.org/wiki/Universally_unique_identifier\r\n * @internal\r\n */\r\nfunction msftUuidStringify(array, offset) {\r\n    return \"\"\r\n        + toHex1(array[offset + 3])\r\n        + toHex1(array[offset + 2])\r\n        + toHex1(array[offset + 1])\r\n        + toHex1(array[offset + 0])\r\n        + \"-\"\r\n        + toHex1(array[offset + 5])\r\n        + toHex1(array[offset + 4])\r\n        + \"-\"\r\n        + toHex1(array[offset + 7])\r\n        + toHex1(array[offset + 6])\r\n        + \"-\"\r\n        + toHex1(array[offset + 8])\r\n        + toHex1(array[offset + 9])\r\n        + \"-\"\r\n        + toHex1(array[offset + 10])\r\n        + toHex1(array[offset + 11])\r\n        + toHex1(array[offset + 12])\r\n        + toHex1(array[offset + 13])\r\n        + toHex1(array[offset + 14])\r\n        + toHex1(array[offset + 15]);\r\n}\r\nexports.msftUuidStringify = msftUuidStringify;\r\n/**\r\n * @internal\r\n */\r\nfunction emptyToNull(text) {\r\n    return (text === \"\") ? null : text;\r\n}\r\nexports.emptyToNull = emptyToNull;\r\n/**\r\n * @internal\r\n */\r\nfunction padNumber(value, maxLen) {\r\n    return (\"\" + value).padStart(maxLen, '0');\r\n}\r\n/**\r\n * @internal\r\n */\r\nfunction readSystemTime(ds) {\r\n    // SYSTEMTIME structure (minwinbase.h)\r\n    // https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-systemtime\r\n    var wYear = ds.readUint16();\r\n    var wMonth = ds.readUint16();\r\n    var wDayOfWeek = ds.readUint16();\r\n    var wDay = ds.readUint16();\r\n    var wHour = ds.readUint16();\r\n    var wMinute = ds.readUint16();\r\n    var wSecond = ds.readUint16();\r\n    var wMilliseconds = ds.readUint16();\r\n    var text = \"\".concat(padNumber(wYear, 4), \"-\").concat(padNumber(wMonth, 2), \"-\").concat(padNumber(wDay, 2), \"T\").concat(padNumber(wHour, 2), \":\").concat(padNumber(wMinute, 2), \":\").concat(padNumber(wSecond, 2), \"Z\");\r\n    if (text === '0000-00-00T00:00:00Z') {\r\n        return null;\r\n    }\r\n    else {\r\n        return new Date(text);\r\n    }\r\n}\r\nexports.readSystemTime = readSystemTime;\r\n/**\r\n * @internal\r\n */\r\nfunction readTransitionSystemTime(ds) {\r\n    // SYSTEMTIME structure (minwinbase.h)\r\n    // https://learn.microsoft.com/en-us/windows/win32/api/minwinbase/ns-minwinbase-systemtime\r\n    var wYear = ds.readUint16();\r\n    var wMonth = ds.readUint16();\r\n    var wDayOfWeek = ds.readUint16();\r\n    var wDay = ds.readUint16();\r\n    var wHour = ds.readUint16();\r\n    var wMinute = ds.readUint16();\r\n    var wSecond = ds.readUint16();\r\n    var wMilliseconds = ds.readUint16();\r\n    return {\r\n        year: wYear,\r\n        month: wMonth,\r\n        dayOfWeek: wDayOfWeek,\r\n        day: wDay,\r\n        hour: wHour,\r\n        minute: wMinute,\r\n    };\r\n}\r\nexports.readTransitionSystemTime = readTransitionSystemTime;\r\n/**\r\n * @internal\r\n */\r\nfunction bin2HexUpper(ds) {\r\n    var text = \"\";\r\n    while (!ds.isEof()) {\r\n        text += toHex1(ds.readUint8());\r\n    }\r\n    return text.toUpperCase();\r\n}\r\nexports.bin2HexUpper = bin2HexUpper;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kenjiuno/msgreader/lib/utils.js\n");

/***/ })

};
;